
STM32_SimpleFOC_InlineCurrentSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad94  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800b030  0800b030  0001b030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b0  0800b4b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4b0  0800b4b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4b0  0800b4b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800b4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  24000080  0800b53c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240003d0  0800b53c  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000347f6  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000565d  00000000  00000000  000548a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00059f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0005b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d2de  00000000  00000000  0005c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acc4  00000000  00000000  00099a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00173ca8  00000000  00000000  000b46f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022839a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b1c  00000000  00000000  002283f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b014 	.word	0x0800b014

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	0800b014 	.word	0x0800b014

080002d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	ed87 0a01 	vstr	s0, [r7, #4]
 80002e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002e6:	eef0 7ae7 	vabs.f32	s15, s15
 80002ea:	eeb0 0a67 	vmov.f32	s0, s15
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000302:	edc7 0a00 	vstr	s1, [r7]
 8000306:	edd7 0a00 	vldr	s1, [r7]
 800030a:	ed97 0a01 	vldr	s0, [r7, #4]
 800030e:	f00a fb75 	bl	800a9fc <atan2f>
 8000312:	eef0 7a40 	vmov.f32	s15, s0
 8000316:	eeb0 0a67 	vmov.f32	s0, s15
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	ed87 0a01 	vstr	s0, [r7, #4]
 800032a:	edd7 7a01 	vldr	s15, [r7, #4]
 800032e:	eef0 7ae7 	vabs.f32	s15, s15
 8000332:	eeb0 0a67 	vmov.f32	s0, s15
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	ed87 0a01 	vstr	s0, [r7, #4]
 800034a:	edc7 0a00 	vstr	s1, [r7]
 800034e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000352:	ed97 7a00 	vldr	s14, [r7]
 8000356:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 800035a:	eeb0 0a67 	vmov.f32	s0, s15
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <_ZN9BLDCMotorC1Eif>:
#include "math.h"

// BLDCMotor( int pp , float R)
// - pp            - pole pair number
// - R             - motor phase resistance
BLDCMotor::BLDCMotor(int pp, float _R)
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	ed87 0a01 	vstr	s0, [r7, #4]
: FOCMotor()
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fc55 	bl	8002c28 <_ZN8FOCMotorC1Ev>
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <_ZN9BLDCMotorC1Eif+0x44>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	601a      	str	r2, [r3, #0]
{
  // save pole pairs number
  pole_pairs = pp;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	63da      	str	r2, [r3, #60]	; 0x3c
  // save phase resistance number
  phase_resistance = _R;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	639a      	str	r2, [r3, #56]	; 0x38
  // torque control type is voltage by default
  torque_controller = TorqueControlType::voltage;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	2200      	movs	r2, #0
 8000394:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  // anti-cogging request
  anti_cogging = false;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	2200      	movs	r2, #0
 800039c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
}
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	0800b068 	.word	0x0800b068

080003b0 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>:


/**
	Link the driver which controls the motor
*/
void BLDCMotor::linkDriver(BLDCDriver* _driver) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  driver = _driver;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <_ZN9BLDCMotor4initEv>:

// init hardware pins
void BLDCMotor::init() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
//  if(monitor_port) monitor_port->println(F("MOT: Init"));

  // if no current sensing and the user has set the phase resistance of the motor use current limit to calculate the voltage limit
  if( !current_sense && _isset(phase_resistance)) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d123      	bne.n	800042a <_ZN9BLDCMotor4initEv+0x5a>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80003e8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80004d0 <_ZN9BLDCMotor4initEv+0x100>
 80003ec:	eef4 7a47 	vcmp.f32	s15, s14
 80003f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f4:	d019      	beq.n	800042a <_ZN9BLDCMotor4initEv+0x5a>
    float new_voltage_limit = current_limit * (phase_resistance); // v_lim = current_lim / (3/2 phase resistance) - worst case
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000406:	edc7 7a03 	vstr	s15, [r7, #12]
    // use it if it is less then voltage_limit set by the user
    voltage_limit = new_voltage_limit < voltage_limit ? new_voltage_limit : voltage_limit;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000410:	ed97 7a03 	vldr	s14, [r7, #12]
 8000414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041c:	d501      	bpl.n	8000422 <_ZN9BLDCMotor4initEv+0x52>
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	e001      	b.n	8000426 <_ZN9BLDCMotor4initEv+0x56>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6413      	str	r3, [r2, #64]	; 0x40
  }
  // sanity check for the voltage limit configuration
  if(voltage_limit > driver->voltage_limit) voltage_limit =  driver->voltage_limit;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000436:	edd3 7a03 	vldr	s15, [r3, #12]
 800043a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dd05      	ble.n	8000450 <_ZN9BLDCMotor4initEv+0x80>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	641a      	str	r2, [r3, #64]	; 0x40
  // constrain voltage for sensor alignment
  if(voltage_sensor_align > voltage_limit) voltage_sensor_align = voltage_limit;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800045c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000464:	dd03      	ble.n	800046e <_ZN9BLDCMotor4initEv+0x9e>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	631a      	str	r2, [r3, #48]	; 0x30

  // update the controller limits
  if(current_sense){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00e      	beq.n	8000496 <_ZN9BLDCMotor4initEv+0xc6>
    // current control loop controls voltage
    PID_current_q.limit = voltage_limit;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	665a      	str	r2, [r3, #100]	; 0x64
    PID_current_d.limit = voltage_limit;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    // velocity control loop controls current
    PID_velocity.limit = current_limit;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8000494:	e004      	b.n	80004a0 <_ZN9BLDCMotor4initEv+0xd0>
  }else{
    PID_velocity.limit = voltage_limit;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
  P_angle.limit = velocity_limit;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

  _delay(500);
 80004aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ae:	f003 f979 	bl	80037a4 <_Z6_delaym>
  // enable motor
//  if(monitor_port) monitor_port->println(F("MOT: Enable driver."));
  enable();
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3308      	adds	r3, #8
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	4798      	blx	r3
  _delay(500);
 80004be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c2:	f003 f96f 	bl	80037a4 <_Z6_delaym>
}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	c640e400 	.word	0xc640e400

080004d4 <_ZN9BLDCMotor7disableEv>:


// disable motor driver
void BLDCMotor::disable()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	330c      	adds	r3, #12
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8000524 <_ZN9BLDCMotor7disableEv+0x50>
 80004f2:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8000524 <_ZN9BLDCMotor7disableEv+0x50>
 80004f6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000524 <_ZN9BLDCMotor7disableEv+0x50>
 80004fa:	4610      	mov	r0, r2
 80004fc:	4798      	blx	r3
  // disable the driver
  driver->disable();
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3308      	adds	r3, #8
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4610      	mov	r0, r2
 8000512:	4798      	blx	r3
  // motor status update
  enabled = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	00000000 	.word	0x00000000

08000528 <_ZN9BLDCMotor6enableEv>:
// enable motor driver
void BLDCMotor::enable()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  // enable the driver
  driver->enable();
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3304      	adds	r3, #4
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4610      	mov	r0, r2
 8000544:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	330c      	adds	r3, #12
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8000578 <_ZN9BLDCMotor6enableEv+0x50>
 800055c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000578 <_ZN9BLDCMotor6enableEv+0x50>
 8000560:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000578 <_ZN9BLDCMotor6enableEv+0x50>
 8000564:	4610      	mov	r0, r2
 8000566:	4798      	blx	r3
  // motor status update
  enabled = 1;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	00000000 	.word	0x00000000

0800057c <_ZN9BLDCMotor7initFOCEf9Direction>:

/**
  FOC functions
*/
// FOC initialization function
int  BLDCMotor::initFOC( float zero_electric_offset, Direction _sensor_direction) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	ed87 0a02 	vstr	s0, [r7, #8]
 8000588:	460b      	mov	r3, r1
 800058a:	71fb      	strb	r3, [r7, #7]
  int exit_flag = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
  // align motor if necessary
  // alignment necessary for encoders!
  if(_isset(zero_electric_offset)){
 8000590:	edd7 7a02 	vldr	s15, [r7, #8]
 8000594:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000644 <_ZN9BLDCMotor7initFOCEf9Direction+0xc8>
 8000598:	eef4 7a47 	vcmp.f32	s15, s14
 800059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a0:	d008      	beq.n	80005b4 <_ZN9BLDCMotor7initFOCEf9Direction+0x38>
    // absolute zero offset provided - no need to align
    zero_electric_angle = zero_electric_offset;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    // set the sensor direction - default CW
    sensor_direction = _sensor_direction;
 80005aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  }

  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  _delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f003 f8f4 	bl	80037a4 <_Z6_delaym>
  if(sensor) exit_flag *= alignSensor();
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d007      	beq.n	80005d6 <_ZN9BLDCMotor7initFOCEf9Direction+0x5a>
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f000 f866 	bl	8000698 <_ZN9BLDCMotor11alignSensorEv>
 80005cc:	4602      	mov	r2, r0
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	617b      	str	r3, [r7, #20]
//  else if(monitor_port) monitor_port->println(F("MOT: No sensor."));

  // aligning the current sensor - can be skipped
  // checks if driver phases are the same as current sense phases
  // and checks the direction of measurement.
  _delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f003 f8e3 	bl	80037a4 <_Z6_delaym>
  if(exit_flag){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00c      	beq.n	80005fe <_ZN9BLDCMotor7initFOCEf9Direction+0x82>
    if(current_sense) exit_flag *= alignCurrentSense();
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <_ZN9BLDCMotor7initFOCEf9Direction+0x82>
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f000 f82a 	bl	8000648 <_ZN9BLDCMotor17alignCurrentSenseEv>
 80005f4:	4602      	mov	r2, r0
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	617b      	str	r3, [r7, #20]
//    else if(monitor_port) monitor_port->println(F("MOT: No current sense."));
  }

  _delay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f003 f8cf 	bl	80037a4 <_Z6_delaym>
  if (exit_flag) {
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00c      	beq.n	8000626 <_ZN9BLDCMotor7initFOCEf9Direction+0xaa>
	  if(anti_cogging) exit_flag *= antiCoggingCalibration();
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <_ZN9BLDCMotor7initFOCEf9Direction+0xaa>
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f000 f9fe 	bl	8000a18 <_ZN9BLDCMotor22antiCoggingCalibrationEv>
 800061c:	4602      	mov	r2, r0
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
  }

  if(exit_flag){
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <_ZN9BLDCMotor7initFOCEf9Direction+0xbc>
//    if(monitor_port) monitor_port->println(F("MOT: Ready."));
  }else{
//    if(monitor_port) monitor_port->println(F("MOT: Init FOC failed."));
    disable();
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3304      	adds	r3, #4
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	4798      	blx	r3
  }

  return exit_flag;
 8000638:	697b      	ldr	r3, [r7, #20]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	c640e400 	.word	0xc640e400

08000648 <_ZN9BLDCMotor17alignCurrentSenseEv>:

// Calibarthe the motor and current sense phases
int BLDCMotor::alignCurrentSense() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; // success
 8000650:	2301      	movs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]

//  if(monitor_port) monitor_port->println(F("MOT: Align current sense."));

  // align current sense and the driver
  exit_flag = current_sense->driverAlign(driver, voltage_sensor_align);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3308      	adds	r3, #8
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8000672:	eeb0 0a67 	vmov.f32	s0, s15
 8000676:	4798      	blx	r3
 8000678:	60f8      	str	r0, [r7, #12]
  if(!exit_flag){
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <_ZN9BLDCMotor17alignCurrentSenseEv+0x3c>
    // error in current sense - phase either not measured or bad connection
//    if(monitor_port) monitor_port->println(F("MOT: Align error!"));
    exit_flag = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
    // output the alignment status flag
//    if(monitor_port) monitor_port->print(F("MOT: Success: "));
//    if(monitor_port) monitor_port->println(exit_flag);
  }

  return exit_flag > 0;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bfcc      	ite	gt
 800068a:	2301      	movgt	r3, #1
 800068c:	2300      	movle	r3, #0
 800068e:	b2db      	uxtb	r3, r3
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_ZN9BLDCMotor11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int BLDCMotor::alignSensor() {
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; //success
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
//  if(monitor_port) monitor_port->println(F("MOT: Align sensor."));

  // if unknown natural direction
  if(!_isset(sensor_direction)){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80006aa:	4a9d      	ldr	r2, [pc, #628]	; (8000920 <_ZN9BLDCMotor11alignSensorEv+0x288>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	f040 80d3 	bne.w	8000858 <_ZN9BLDCMotor11alignSensorEv+0x1c0>
    // check if sensor needs zero search
    if(sensor->needsSearch()) exit_flag = absoluteZeroSearch();
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3308      	adds	r3, #8
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4610      	mov	r0, r2
 80006c6:	4798      	blx	r3
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <_ZN9BLDCMotor11alignSensorEv+0x48>
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f929 	bl	8000930 <_ZN9BLDCMotor18absoluteZeroSearchEv>
 80006de:	62f8      	str	r0, [r7, #44]	; 0x2c
    // stop init if not found index
    if(!exit_flag) return exit_flag;
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <_ZN9BLDCMotor11alignSensorEv+0x52>
 80006e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e8:	e109      	b.n	80008fe <_ZN9BLDCMotor11alignSensorEv+0x266>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ ) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006f4:	dc27      	bgt.n	8000746 <_ZN9BLDCMotor11alignSensorEv+0xae>
      float angle = _3PI_2 + _2PI * i / 500.0;
 80006f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000700:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8000908 <_ZN9BLDCMotor11alignSensorEv+0x270>
 8000704:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000708:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8000910 <_ZN9BLDCMotor11alignSensorEv+0x278>
 800070c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000710:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8000918 <_ZN9BLDCMotor11alignSensorEv+0x280>
 8000714:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000718:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800071c:	edc7 7a08 	vstr	s15, [r7, #32]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000726:	ed97 1a08 	vldr	s2, [r7, #32]
 800072a:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 800072e:	eeb0 0a67 	vmov.f32	s0, s15
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 fca8 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
      _delay(2);//FIXME - Nat changed from 2 to 2
 8000738:	2002      	movs	r0, #2
 800073a:	f003 f833 	bl	80037a4 <_Z6_delaym>
    for (int i = 0; i <=500; i++ ) {
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	3301      	adds	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
 8000744:	e7d3      	b.n	80006ee <_ZN9BLDCMotor11alignSensorEv+0x56>
    }
    // take and angle in the middle
    float mid_angle = sensor->getAngle();
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4610      	mov	r0, r2
 8000758:	4798      	blx	r3
 800075a:	ed87 0a07 	vstr	s0, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- ) {
 800075e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	2b00      	cmp	r3, #0
 8000768:	db27      	blt.n	80007ba <_ZN9BLDCMotor11alignSensorEv+0x122>
      float angle = _3PI_2 + _2PI * i / 500.0 ;
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000774:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000908 <_ZN9BLDCMotor11alignSensorEv+0x270>
 8000778:	ee27 6b06 	vmul.f64	d6, d7, d6
 800077c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8000910 <_ZN9BLDCMotor11alignSensorEv+0x278>
 8000780:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000784:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000918 <_ZN9BLDCMotor11alignSensorEv+0x280>
 8000788:	ee37 7b06 	vadd.f64	d7, d7, d6
 800078c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000790:	edc7 7a06 	vstr	s15, [r7, #24]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800079a:	ed97 1a06 	vldr	s2, [r7, #24]
 800079e:	eddf 0a61 	vldr	s1, [pc, #388]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80007a2:	eeb0 0a67 	vmov.f32	s0, s15
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fc6e 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
      _delay(2);//FIXME - Nat changed from 2 to 2
 80007ac:	2002      	movs	r0, #2
 80007ae:	f002 fff9 	bl	80037a4 <_Z6_delaym>
    for (int i = 500; i >=0; i-- ) {
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	3b01      	subs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
 80007b8:	e7d4      	b.n	8000764 <_ZN9BLDCMotor11alignSensorEv+0xcc>
    }
    float end_angle = sensor->getAngle();
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4610      	mov	r0, r2
 80007cc:	4798      	blx	r3
 80007ce:	ed87 0a05 	vstr	s0, [r7, #20]
    setPhaseVoltage(0, 0, 0);
 80007d2:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80007d6:	eddf 0a53 	vldr	s1, [pc, #332]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80007da:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 fc52 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
    _delay(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f002 ffdd 	bl	80037a4 <_Z6_delaym>
    // determine the direction the sensor moved
    if (mid_angle == end_angle) {
 80007ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80007ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d101      	bne.n	8000800 <_ZN9BLDCMotor11alignSensorEv+0x168>
//      if(monitor_port) monitor_port->println(F("MOT: Failed to notice movement"));
      return 0; // failed calibration
 80007fc:	2300      	movs	r3, #0
 80007fe:	e07e      	b.n	80008fe <_ZN9BLDCMotor11alignSensorEv+0x266>
    } else if (mid_angle < end_angle) {
 8000800:	ed97 7a07 	vldr	s14, [r7, #28]
 8000804:	edd7 7a05 	vldr	s15, [r7, #20]
 8000808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	d505      	bpl.n	800081e <_ZN9BLDCMotor11alignSensorEv+0x186>
//      if(monitor_port) monitor_port->println(F("MOT: sensor_direction==CCW"));
      sensor_direction = Direction::CCW;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 800081c:	e003      	b.n	8000826 <_ZN9BLDCMotor11alignSensorEv+0x18e>
    } else{
//      if(monitor_port) monitor_port->println(F("MOT: sensor_direction==CW"));
      sensor_direction = Direction::CW;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    // check pole pair number
//    if(monitor_port) monitor_port->print(F("MOT: PP check: "));
    float moved =  fabs(mid_angle - end_angle);
 8000826:	ed97 7a07 	vldr	s14, [r7, #28]
 800082a:	edd7 7a05 	vldr	s15, [r7, #20]
 800082e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000832:	eeb0 0a67 	vmov.f32	s0, s15
 8000836:	f7ff fd73 	bl	8000320 <_ZSt4fabsf>
 800083a:	ed87 0a04 	vstr	s0, [r7, #16]
    est_pp = _2PI / moved;
 800083e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000846:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8000908 <_ZN9BLDCMotor11alignSensorEv+0x270>
 800084a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800084e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
    }//else if(monitor_port) monitor_port->println(F("OK!"));

  }//else if(monitor_port) monitor_port->println(F("MOT: Skip dir calib."));

  // zero electric angle not known
  if(!_isset(zero_electric_angle)){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 800085e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000928 <_ZN9BLDCMotor11alignSensorEv+0x290>
 8000862:	eef4 7a47 	vcmp.f32	s15, s14
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d147      	bne.n	80008fc <_ZN9BLDCMotor11alignSensorEv+0x264>
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_sensor_align, 0,  _3PI_2);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000872:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800092c <_ZN9BLDCMotor11alignSensorEv+0x294>
 8000876:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 fc02 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
    //setPhaseVoltage(0, voltage_sensor_align, _3PI_2);
//    setPhaseVoltage(0, voltage_sensor_align, _PI_2);
    _delay(700); //FIXME - NAT changed from 700 to 700
 8000884:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000888:	f002 ff8c 	bl	80037a4 <_Z6_delaym>
    float tmp = sensor->getAngle();
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4610      	mov	r0, r2
 800089e:	4798      	blx	r3
 80008a0:	ed87 0a03 	vstr	s0, [r7, #12]
    zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction*tmp, pole_pairs));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008be:	4618      	mov	r0, r3
 80008c0:	eeb0 0a67 	vmov.f32	s0, s15
 80008c4:	f002 fd70 	bl	80033a8 <_Z16_electricalAnglefi>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f002 fd3a 	bl	8003348 <_Z15_normalizeAnglef>
 80008d4:	eef0 7a40 	vmov.f32	s15, s0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
    _delay(20);
 80008de:	2014      	movs	r0, #20
 80008e0:	f002 ff60 	bl	80037a4 <_Z6_delaym>
//    if(monitor_port){
//      monitor_port->print(F("MOT: Zero elec. angle: "));
//      monitor_port->println(zero_electric_angle);
//    }
    // stop everything
    setPhaseVoltage(0, 0, 0);
 80008e4:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80008e8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80008ec:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000924 <_ZN9BLDCMotor11alignSensorEv+0x28c>
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fbc9 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
    _delay(200);
 80008f6:	20c8      	movs	r0, #200	; 0xc8
 80008f8:	f002 ff54 	bl	80037a4 <_Z6_delaym>
  }//else if(monitor_port) monitor_port->println(F("MOT: Skip offset calib."));
  return exit_flag;
 80008fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	54442eea 	.word	0x54442eea
 800090c:	401921fb 	.word	0x401921fb
 8000910:	00000000 	.word	0x00000000
 8000914:	407f4000 	.word	0x407f4000
 8000918:	7f330d32 	.word	0x7f330d32
 800091c:	4012d97c 	.word	0x4012d97c
 8000920:	ffffcfc7 	.word	0xffffcfc7
 8000924:	00000000 	.word	0x00000000
 8000928:	c640e400 	.word	0xc640e400
 800092c:	4096cbe4 	.word	0x4096cbe4

08000930 <_ZN9BLDCMotor18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int BLDCMotor::absoluteZeroSearch() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

//  if(monitor_port) monitor_port->println(F("MOT: Index search..."));
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093c:	60fb      	str	r3, [r7, #12]
  float limit_volt = voltage_limit;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	60bb      	str	r3, [r7, #8]
  velocity_limit = velocity_index_search;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	649a      	str	r2, [r3, #72]	; 0x48
  voltage_limit = voltage_sensor_align;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
  shaft_angle = 0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f04f 0200 	mov.w	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  while(sensor->needsSearch() && shaft_angle < _2PI){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3308      	adds	r3, #8
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4610      	mov	r0, r2
 8000970:	4798      	blx	r3
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00d      	beq.n	8000994 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x64>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	edd3 7a02 	vldr	s15, [r3, #8]
 800097e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000982:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000a08 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xd8>
 8000986:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098e:	d501      	bpl.n	8000994 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x64>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x66>
 8000994:	2300      	movs	r3, #0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00f      	beq.n	80009ba <_ZN9BLDCMotor18absoluteZeroSearchEv+0x8a>
    angleOpenloop(1.5*_2PI);
 800099a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000a10 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 fef6 	bl	8001790 <_ZN9BLDCMotor13angleOpenloopEf>
    // call important for some sensors not to loose count
    // not needed for the search
    sensor->getAngle(); //NG: may have been necessary in some instances to increase time of loop
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4610      	mov	r0, r2
 80009b6:	4798      	blx	r3
  while(sensor->needsSearch() && shaft_angle < _2PI){
 80009b8:	e7d0      	b.n	800095c <_ZN9BLDCMotor18absoluteZeroSearchEv+0x2c>
  }
  // disable motor
  setPhaseVoltage(0, 0, 0);
 80009ba:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000a14 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe4>
 80009be:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000a14 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe4>
 80009c2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000a14 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe4>
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 fb5e 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
  // reinit the limits
  velocity_limit = limit_vel;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	649a      	str	r2, [r3, #72]	; 0x48
  voltage_limit = limit_volt;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	641a      	str	r2, [r3, #64]	; 0x40
  // check if the zero found
//  if(monitor_port){
//    if(sensor->needsSearch()) monitor_port->println(F("MOT: Error: Not found!"));
//    else monitor_port->println(F("MOT: Success!"));
//  }
  return !sensor->needsSearch();
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4610      	mov	r0, r2
 80009ec:	4798      	blx	r3
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf0c      	ite	eq
 80009f4:	2301      	moveq	r3, #1
 80009f6:	2300      	movne	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	f3af 8000 	nop.w
 8000a08:	54442eea 	.word	0x54442eea
 8000a0c:	401921fb 	.word	0x401921fb
 8000a10:	4116cbe4 	.word	0x4116cbe4
 8000a14:	00000000 	.word	0x00000000

08000a18 <_ZN9BLDCMotor22antiCoggingCalibrationEv>:

// Anti-cogging algorithm implementation, see: http://www.roboticsproceedings.org/rss10/p42.pdf
int BLDCMotor::antiCoggingCalibration() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	int exit_flag = true;
 8000a20:	2301      	movs	r3, #1
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
	float limit_vel = velocity_limit;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	float limit_volt = voltage_limit;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	velocity_limit = velocity_index_search;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	649a      	str	r2, [r3, #72]	; 0x48
	voltage_limit = voltage_sensor_align;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40

	//need to put motor in open-loop position control:
	MotionControlType requested_controller = controller;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FOCModulationType requested_modulation = foc_modulation;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TorqueControlType requested_torque_controller = torque_controller;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	controller = MotionControlType::angle;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2202      	movs	r2, #2
 8000a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	foc_modulation = FOCModulationType::SpaceVectorPWM;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	torque_controller = TorqueControlType::foc_current;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2202      	movs	r2, #2
 8000a72:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	//set position control PID coefficients: //TODO - fix these...may not work with all motors?
	//---save old values:
	float prev_P_angle_P = P_angle.P;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7c:	623b      	str	r3, [r7, #32]
	float prev_P_angle_I = P_angle.I;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a84:	61fb      	str	r3, [r7, #28]
	float prev_P_angle_D = P_angle.D;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	61bb      	str	r3, [r7, #24]
	float prev_P_angle_limit = P_angle.limit;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a94:	617b      	str	r3, [r7, #20]

	//---now set wanted values:
	P_angle.P = 1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a9c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	P_angle.I = 0.01;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a45      	ldr	r2, [pc, #276]	; (8000bb8 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1a0>)
 8000aa4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	P_angle.D = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	P_angle.limit = 1000;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a41      	ldr	r2, [pc, #260]	; (8000bbc <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1a4>)
 8000ab6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	float angle = 0;
 8000aba:	f04f 0300 	mov.w	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
	float angle_increment = _2PI / 3;//8192;
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1a8>)
 8000ac2:	60fb      	str	r3, [r7, #12]
	int idx = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
	//calculate various parameters for each encoder position:
	while (1) {
		if (idx == 0) {
 8000ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <_ZN9BLDCMotor22antiCoggingCalibrationEv+0xd6>
			target = 1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ad4:	605a      	str	r2, [r3, #4]
			move(target);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3314      	adds	r3, #20
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	edd2 7a01 	vldr	s15, [r2, #4]
 8000ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	4798      	blx	r3
 8000aec:	e02b      	b.n	8000b46 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x12e>
		}
		else if (idx == 300000) {
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	4a34      	ldr	r2, [pc, #208]	; (8000bc4 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1ac>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10f      	bne.n	8000b16 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0xfe>
			target = 2;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afc:	605a      	str	r2, [r3, #4]
			move(target);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3314      	adds	r3, #20
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	edd2 7a01 	vldr	s15, [r2, #4]
 8000b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	4798      	blx	r3
 8000b14:	e017      	b.n	8000b46 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x12e>
		}
		else if (idx == 600000) {
 8000b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b18:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1b0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d10f      	bne.n	8000b3e <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x126>
			target = 2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b24:	605a      	str	r2, [r3, #4]
			move(target);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3314      	adds	r3, #20
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	edd2 7a01 	vldr	s15, [r2, #4]
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	4798      	blx	r3
 8000b3c:	e003      	b.n	8000b46 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x12e>
		}
		else if (idx == 1000000) {
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1b4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d009      	beq.n	8000b5a <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x142>
			break;
		}
		loopFOC();
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	4798      	blx	r3
		idx++;
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	3301      	adds	r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
		if (idx == 0) {
 8000b58:	e7b6      	b.n	8000ac8 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0xb0>
			break;
 8000b5a:	bf00      	nop
////			prev_Iq = new_Iq;
////		}
//		_delay(5000); //arbitrary value
//	}

	setPhaseVoltage(0,  0, 0);
 8000b5c:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8000bd0 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1b8>
 8000b60:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8000bd0 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1b8>
 8000b64:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000bd0 <_ZN9BLDCMotor22antiCoggingCalibrationEv+0x1b8>
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 fa8d 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
	//set all modified values back:
	P_angle.P = prev_P_angle_P;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a3a      	ldr	r2, [r7, #32]
 8000b72:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	P_angle.I = prev_P_angle_I;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	P_angle.D = prev_P_angle_D;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	P_angle.limit = prev_P_angle_limit;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	controller = requested_controller;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	foc_modulation = requested_modulation;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000b9e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	torque_controller = requested_torque_controller;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000ba8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	return exit_flag;
 8000bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	3c23d70a 	.word	0x3c23d70a
 8000bbc:	447a0000 	.word	0x447a0000
 8000bc0:	40060a92 	.word	0x40060a92
 8000bc4:	000493e0 	.word	0x000493e0
 8000bc8:	000927c0 	.word	0x000927c0
 8000bcc:	000f4240 	.word	0x000f4240
 8000bd0:	00000000 	.word	0x00000000

08000bd4 <_ZN9BLDCMotor7loopFOCEv>:


// Iterative function looping FOC algorithm, setting Uq on the Motor
// The faster it can be run the better
void BLDCMotor::loopFOC() {
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  // if disabled do nothing
  if(!enabled) return;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 810b 	beq.w	8000dfe <_ZN9BLDCMotor7loopFOCEv+0x22a>
  // if open-loop do nothing
  if( controller==MotionControlType::angle_openloop || controller==MotionControlType::velocity_openloop ) return;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	f000 8107 	beq.w	8000e02 <_ZN9BLDCMotor7loopFOCEv+0x22e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	f000 8101 	beq.w	8000e02 <_ZN9BLDCMotor7loopFOCEv+0x22e>

  // shaft angle
  shaft_angle = shaftAngle();
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f8fe 	bl	8002e04 <_ZN8FOCMotor10shaftAngleEv>
 8000c08:	eef0 7a40 	vmov.f32	s15, s0
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	edc3 7a02 	vstr	s15, [r3, #8]
  // electrical angle - need shaftAngle to be called first
  electrical_angle = electricalAngle();
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 f965 	bl	8002ee4 <_ZN8FOCMotor15electricalAngleEv>
 8000c1a:	eef0 7a40 	vmov.f32	s15, s0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edc3 7a03 	vstr	s15, [r3, #12]

  switch (torque_controller) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d072      	beq.n	8000d14 <_ZN9BLDCMotor7loopFOCEv+0x140>
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	f300 80d1 	bgt.w	8000dd6 <_ZN9BLDCMotor7loopFOCEv+0x202>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <_ZN9BLDCMotor7loopFOCEv+0x6a>
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d026      	beq.n	8000c8a <_ZN9BLDCMotor7loopFOCEv+0xb6>
      voltage.d = PID_current_d(-current.d);
      break;
    default:
      // no torque control selected
//      if(monitor_port) monitor_port->println(F("MOT: no torque control selected!"));
      break;
 8000c3c:	e0cb      	b.n	8000dd6 <_ZN9BLDCMotor7loopFOCEv+0x202>
    	current.q = current_sense->getDCCurrent(electrical_angle);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	edd2 7a03 	vldr	s15, [r2, #12]
 8000c56:	eeb0 0a67 	vmov.f32	s0, s15
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	4798      	blx	r3
 8000c5e:	eef0 7a40 	vmov.f32	s15, s0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    	current.q = LPF_current_q(current.q);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000c74:	eeb0 0a67 	vmov.f32	s0, s15
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f002 fbe7 	bl	800344c <_ZN13LowPassFilterclEf>
 8000c7e:	eef0 7a40 	vmov.f32	s15, s0
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      break;
 8000c88:	e0a6      	b.n	8000dd8 <_ZN9BLDCMotor7loopFOCEv+0x204>
      if(!current_sense) return;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80b8 	beq.w	8000e06 <_ZN9BLDCMotor7loopFOCEv+0x232>
      current.q = current_sense->getDCCurrent(electrical_angle);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	edd2 7a03 	vldr	s15, [r2, #12]
 8000cae:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4798      	blx	r3
 8000cb6:	eef0 7a40 	vmov.f32	s15, s0
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      current.q = LPF_current_q(current.q);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f002 fbbb 	bl	800344c <_ZN13LowPassFilterclEf>
 8000cd6:	eef0 7a40 	vmov.f32	s15, s0
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      voltage.q = PID_current_q(current_sp - current.q);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	ed93 7a05 	vldr	s14, [r3, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f002 fc38 	bl	8003570 <_ZN13PIDControllerclEf>
 8000d00:	eef0 7a40 	vmov.f32	s15, s0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      voltage.d = 0;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
      break;
 8000d12:	e061      	b.n	8000dd8 <_ZN9BLDCMotor7loopFOCEv+0x204>
      if(!current_sense) return;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d075      	beq.n	8000e0a <_ZN9BLDCMotor7loopFOCEv+0x236>
      current = current_sense->getFOCCurrents(electrical_angle);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d2a:	687c      	ldr	r4, [r7, #4]
 8000d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d30:	4610      	mov	r0, r2
 8000d32:	f001 fecd 	bl	8002ad0 <_ZN12CurrentSense14getFOCCurrentsEf>
 8000d36:	eeb0 7a40 	vmov.f32	s14, s0
 8000d3a:	eef0 7a60 	vmov.f32	s15, s1
 8000d3e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8000d42:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
      current.q = LPF_current_q(current.q);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	4610      	mov	r0, r2
 8000d58:	f002 fb78 	bl	800344c <_ZN13LowPassFilterclEf>
 8000d5c:	eef0 7a40 	vmov.f32	s15, s0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      current.d = LPF_current_d(current.d);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000d72:	eeb0 0a67 	vmov.f32	s0, s15
 8000d76:	4610      	mov	r0, r2
 8000d78:	f002 fb68 	bl	800344c <_ZN13LowPassFilterclEf>
 8000d7c:	eef0 7a40 	vmov.f32	s15, s0
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      voltage.q = PID_current_q(current_sp - current.q);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000da0:	4610      	mov	r0, r2
 8000da2:	f002 fbe5 	bl	8003570 <_ZN13PIDControllerclEf>
 8000da6:	eef0 7a40 	vmov.f32	s15, s0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      voltage.d = PID_current_d(-current.d);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000dbc:	eef1 7a67 	vneg.f32	s15, s15
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f002 fbd3 	bl	8003570 <_ZN13PIDControllerclEf>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8000dd4:	e000      	b.n	8000dd8 <_ZN9BLDCMotor7loopFOCEv+0x204>
      break;
 8000dd6:	bf00      	nop
  }

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	edd3 6a03 	vldr	s13, [r3, #12]
 8000dea:	eeb0 1a66 	vmov.f32	s2, s13
 8000dee:	eef0 0a47 	vmov.f32	s1, s14
 8000df2:	eeb0 0a67 	vmov.f32	s0, s15
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f946 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>
 8000dfc:	e006      	b.n	8000e0c <_ZN9BLDCMotor7loopFOCEv+0x238>
  if(!enabled) return;
 8000dfe:	bf00      	nop
 8000e00:	e004      	b.n	8000e0c <_ZN9BLDCMotor7loopFOCEv+0x238>
  if( controller==MotionControlType::angle_openloop || controller==MotionControlType::velocity_openloop ) return;
 8000e02:	bf00      	nop
 8000e04:	e002      	b.n	8000e0c <_ZN9BLDCMotor7loopFOCEv+0x238>
      if(!current_sense) return;
 8000e06:	bf00      	nop
 8000e08:	e000      	b.n	8000e0c <_ZN9BLDCMotor7loopFOCEv+0x238>
      if(!current_sense) return;
 8000e0a:	bf00      	nop
}
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
	...

08000e14 <_ZN9BLDCMotor4moveEf>:
// Iterative function running outer loop of the FOC algorithm
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void BLDCMotor::move(float new_target) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	ed87 0a00 	vstr	s0, [r7]
  // if disabled do nothing
  if(!enabled) return;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 811f 	beq.w	800106a <_ZN9BLDCMotor4moveEf+0x256>
  // downsampling (optional)
  if(motion_cnt++ < motion_downsample) return;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000e32:	1c59      	adds	r1, r3, #1
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8000e40:	4293      	cmp	r3, r2
 8000e42:	bf34      	ite	cc
 8000e44:	2301      	movcc	r3, #1
 8000e46:	2300      	movcs	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 810f 	bne.w	800106e <_ZN9BLDCMotor4moveEf+0x25a>
  motion_cnt = 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  // set internal target variable
  if(_isset(new_target)) target = new_target;
 8000e58:	edd7 7a00 	vldr	s15, [r7]
 8000e5c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001080 <_ZN9BLDCMotor4moveEf+0x26c>
 8000e60:	eef4 7a47 	vcmp.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	d002      	beq.n	8000e70 <_ZN9BLDCMotor4moveEf+0x5c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
  // get angular velocity
  shaft_velocity = shaftVelocity();
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 f800 	bl	8002e78 <_ZN8FOCMotor13shaftVelocityEv>
 8000e78:	eef0 7a40 	vmov.f32	s15, s0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edc3 7a04 	vstr	s15, [r3, #16]

  switch (controller) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	f200 80f5 	bhi.w	8001078 <_ZN9BLDCMotor4moveEf+0x264>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <_ZN9BLDCMotor4moveEf+0x80>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000ea9 	.word	0x08000ea9
 8000e98:	08000f99 	.word	0x08000f99
 8000e9c:	08000ef3 	.word	0x08000ef3
 8000ea0:	08001013 	.word	0x08001013
 8000ea4:	0800103f 	.word	0x0800103f
    case MotionControlType::torque:
      if(torque_controller == TorqueControlType::voltage) // if voltage torque control
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d11a      	bne.n	8000ee8 <_ZN9BLDCMotor4moveEf+0xd4>
        if(!_isset(phase_resistance))  voltage.q = target;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000eb8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001080 <_ZN9BLDCMotor4moveEf+0x26c>
 8000ebc:	eef4 7a47 	vcmp.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d104      	bne.n	8000ed0 <_ZN9BLDCMotor4moveEf+0xbc>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
        else voltage.q =  target*phase_resistance;
      else
        current_sp = target; // if current/foc_current torque control
      break;
 8000ece:	e0d3      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
        else voltage.q =  target*phase_resistance;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      break;
 8000ee6:	e0c7      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
        current_sp = target; // if current/foc_current torque control
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
      break;
 8000ef0:	e0c2      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
    case MotionControlType::angle:
      // angle set point
      shaft_angle_sp = target;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	61da      	str	r2, [r3, #28]
      // calculate velocity set point
      shaft_velocity_sp = P_angle( shaft_angle_sp - shaft_angle );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f10:	eeb0 0a67 	vmov.f32	s0, s15
 8000f14:	4610      	mov	r0, r2
 8000f16:	f002 fb2b 	bl	8003570 <_ZN13PIDControllerclEf>
 8000f1a:	eef0 7a40 	vmov.f32	s15, s0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edc3 7a06 	vstr	s15, [r3, #24]
      // calculate the torque command
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if voltage torque control
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f002 fb16 	bl	8003570 <_ZN13PIDControllerclEf>
 8000f44:	eef0 7a40 	vmov.f32	s15, s0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a05 	vstr	s15, [r3, #20]
      // if torque controlled through voltage
      if(torque_controller == TorqueControlType::voltage){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 808c 	bne.w	8001072 <_ZN9BLDCMotor4moveEf+0x25e>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000f60:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001080 <_ZN9BLDCMotor4moveEf+0x26c>
 8000f64:	eef4 7a47 	vcmp.f32	s15, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d104      	bne.n	8000f78 <_ZN9BLDCMotor4moveEf+0x164>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
 8000f76:	e00a      	b.n	8000f8e <_ZN9BLDCMotor4moveEf+0x17a>
        else  voltage.q = current_sp*phase_resistance;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        voltage.d = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
      }
      break;
 8000f96:	e06c      	b.n	8001072 <_ZN9BLDCMotor4moveEf+0x25e>
    case MotionControlType::velocity:
      // velocity set point
      shaft_velocity_sp = target;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
      // calculate the torque command
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if current/foc_current torque control
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f002 fad8 	bl	8003570 <_ZN13PIDControllerclEf>
 8000fc0:	eef0 7a40 	vmov.f32	s15, s0
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edc3 7a05 	vstr	s15, [r3, #20]
      // if torque controlled through voltage control
      if(torque_controller == TorqueControlType::voltage){
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d150      	bne.n	8001076 <_ZN9BLDCMotor4moveEf+0x262>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000fda:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001080 <_ZN9BLDCMotor4moveEf+0x26c>
 8000fde:	eef4 7a47 	vcmp.f32	s15, s14
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d104      	bne.n	8000ff2 <_ZN9BLDCMotor4moveEf+0x1de>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
 8000ff0:	e00a      	b.n	8001008 <_ZN9BLDCMotor4moveEf+0x1f4>
        else  voltage.q = current_sp*phase_resistance;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        voltage.d = 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
      }
      break;
 8001010:	e031      	b.n	8001076 <_ZN9BLDCMotor4moveEf+0x262>
    case MotionControlType::velocity_openloop:
      // velocity control in open loop
      shaft_velocity_sp = target;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
      voltage.q = velocityOpenloop(shaft_velocity_sp); // returns the voltage that is set to the motor
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fb2b 	bl	8001680 <_ZN9BLDCMotor16velocityOpenloopEf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      voltage.d = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
      break;
 800103c:	e01c      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
    case MotionControlType::angle_openloop:
      // angle control in open loop
      shaft_angle_sp = target;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	61da      	str	r2, [r3, #28]
      voltage.q = angleOpenloop(shaft_angle_sp); // returns the voltage that is set to the motor
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	edd3 7a07 	vldr	s15, [r3, #28]
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fb9d 	bl	8001790 <_ZN9BLDCMotor13angleOpenloopEf>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      voltage.d = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
      break;
 8001068:	e006      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
  if(!enabled) return;
 800106a:	bf00      	nop
 800106c:	e004      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
  if(motion_cnt++ < motion_downsample) return;
 800106e:	bf00      	nop
 8001070:	e002      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
      break;
 8001072:	bf00      	nop
 8001074:	e000      	b.n	8001078 <_ZN9BLDCMotor4moveEf+0x264>
      break;
 8001076:	bf00      	nop
  }
}
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	c640e400 	.word	0xc640e400
 8001084:	00000000 	.word	0x00000000

08001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>:
// Function implementing Space Vector PWM and Sine PWM algorithms
//
// Function using sine approximation
// regular sin + cos ~300us    (no memory usaage)
// approx  _sin + _cos ~110us  (400Byte ~ 20% of memory)
void BLDCMotor::setPhaseVoltage(float Uq, float Ud, float angle_el) {
 8001088:	b580      	push	{r7, lr}
 800108a:	ed2d 8b02 	vpush	{d8}
 800108e:	b090      	sub	sp, #64	; 0x40
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	ed87 0a02 	vstr	s0, [r7, #8]
 8001098:	edc7 0a01 	vstr	s1, [r7, #4]
 800109c:	ed87 1a00 	vstr	s2, [r7]

  float center;
  int sector;
  float _ca,_sa;

  switch (foc_modulation)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x2a>
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	f000 80c6 	beq.w	800123c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x1b4>
 80010b0:	e2c4      	b.n	800163c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x5b4>
      // Sinusoidal PWM modulation
      // Inverse Park + Clarke transformation

      // angle normalization in between 0 and 2pi
      // only necessary if using _sin and _cos - approximation functions
      angle_el = _normalizeAngle(angle_el);
 80010b2:	ed97 0a00 	vldr	s0, [r7]
 80010b6:	f002 f947 	bl	8003348 <_Z15_normalizeAnglef>
 80010ba:	ed87 0a00 	vstr	s0, [r7]
      _ca = _cos(angle_el);
 80010be:	ed97 0a00 	vldr	s0, [r7]
 80010c2:	f002 f8e9 	bl	8003298 <_Z4_cosf>
 80010c6:	ed87 0a07 	vstr	s0, [r7, #28]
      _sa = _sin(angle_el);
 80010ca:	ed97 0a00 	vldr	s0, [r7]
 80010ce:	f001 ff9f 	bl	8003010 <_Z4_sinf>
 80010d2:	ed87 0a06 	vstr	s0, [r7, #24]
      // Inverse park transform
      Ualpha =  _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 80010d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80010da:	edd7 7a01 	vldr	s15, [r7, #4]
 80010de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80010e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
      Ubeta =  _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 80010f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001104:	edd7 6a07 	vldr	s13, [r7, #28]
 8001108:	edd7 7a02 	vldr	s15, [r7, #8]
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

      // center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
      center = driver->voltage_limit/2;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001120:	ed93 7a03 	vldr	s14, [r3, #12]
 8001124:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	edc7 7a05 	vstr	s15, [r7, #20]
      // Clarke transform
      Ua = Ualpha + center;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
      Ub = -0.5 * Ualpha  + _SQRT3_2 * Ubeta + center;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800114a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114e:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 8001152:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800115c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001160:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80014e0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x458>
 8001164:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001168:	ee36 6b07 	vadd.f64	d6, d6, d7
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001174:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001178:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
      Uc = -0.5 * Ualpha - _SQRT3_2 * Ubeta + center;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8001188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118c:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 8001190:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800119a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800119e:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 80014e0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x458>
 80011a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140

      if (!modulation_centered) {
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f993 304e 	ldrsb.w	r3, [r3, #78]	; 0x4e
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 8237 	bne.w	800163a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x5b2>
        float Umin = fmin(Ua, fmin(Ub, Uc));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	ed93 8a4e 	vldr	s16, [r3, #312]	; 0x138
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 80011de:	eef0 0a47 	vmov.f32	s1, s14
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f7ff f8ab 	bl	8000340 <_ZSt4fminff>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	eef0 0a67 	vmov.f32	s1, s15
 80011f2:	eeb0 0a48 	vmov.f32	s0, s16
 80011f6:	f7ff f8a3 	bl	8000340 <_ZSt4fminff>
 80011fa:	ed87 0a04 	vstr	s0, [r7, #16]
        Ua -= Umin;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 8001204:	edd7 7a04 	vldr	s15, [r7, #16]
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
        Ub -= Umin;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8001218:	edd7 7a04 	vldr	s15, [r7, #16]
 800121c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
        Uc -= Umin;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 800122c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
      }

      break;
 800123a:	e1fe      	b.n	800163a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x5b2>
      // equivalent to 3) is
      // angle_el = angle_el + atan2(Uq,Ud)

      float Uout;
      // a bit of optitmisation
      if(Ud){ // only if Ud and Uq set
 800123c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001240:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d02b      	beq.n	80012a2 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x21a>
        // _sqrt is an approx of sqrt (3-4% error)
        Uout = _sqrt(Ud*Ud + Uq*Uq) / driver->voltage_limit;
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001252:	edd7 7a02 	vldr	s15, [r7, #8]
 8001256:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800125a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	f002 f8b7 	bl	80033d4 <_Z11_sqrtApproxf>
 8001266:	eef0 6a40 	vmov.f32	s13, s0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001270:	ed93 7a03 	vldr	s14, [r3, #12]
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        // angle normalisation in between 0 and 2pi
        // only necessary if using _sin and _cos - approximation functions
        angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 800127c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001280:	ed97 0a02 	vldr	s0, [r7, #8]
 8001284:	f7ff f838 	bl	80002f8 <_ZSt5atan2ff>
 8001288:	eeb0 7a40 	vmov.f32	s14, s0
 800128c:	edd7 7a00 	vldr	s15, [r7]
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	f002 f856 	bl	8003348 <_Z15_normalizeAnglef>
 800129c:	ed87 0a00 	vstr	s0, [r7]
 80012a0:	e01a      	b.n	80012d8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x250>
      }else{// only Uq available - no need for atan2 and sqrt
        Uout = Uq / driver->voltage_limit;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ac:	edd7 6a02 	vldr	s13, [r7, #8]
 80012b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        // angle normalisation in between 0 and 2pi
        // only necessary if using _sin and _cos - approximation functions
        angle_el = _normalizeAngle(angle_el + _PI_2);
 80012b8:	edd7 7a00 	vldr	s15, [r7]
 80012bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c0:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80014e8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x460>
 80012c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	f002 f83a 	bl	8003348 <_Z15_normalizeAnglef>
 80012d4:	ed87 0a00 	vstr	s0, [r7]
      }
      // find the sector we are in currently
      sector = floor(angle_el / _PI_3) + 1;
 80012d8:	edd7 7a00 	vldr	s15, [r7]
 80012dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80014f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x468>
 80012e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80012e8:	eeb0 0b46 	vmov.f64	d0, d6
 80012ec:	f009 fa9c 	bl	800a828 <floor>
 80012f0:	eeb0 7b40 	vmov.f64	d7, d0
 80012f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001300:	ee17 3a90 	vmov	r3, s15
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
      // calculate the duty cycles
      float T1 = _SQRT3*_sin(sector*_PI_3 - angle_el) * Uout;
 8001306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001310:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80014f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x468>
 8001314:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001318:	edd7 7a00 	vldr	s15, [r7]
 800131c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001320:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001324:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001328:	eeb0 0a67 	vmov.f32	s0, s15
 800132c:	f001 fe70 	bl	8003010 <_Z4_sinf>
 8001330:	eef0 7a40 	vmov.f32	s15, s0
 8001334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001338:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80014f8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x470>
 800133c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001340:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001344:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001348:	ee26 7b07 	vmul.f64	d7, d6, d7
 800134c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001350:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      float T2 = _SQRT3*_sin(angle_el - (sector-1.0)*_PI_3) * Uout;
 8001354:	edd7 7a00 	vldr	s15, [r7]
 8001358:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001366:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800136a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800136e:	ed9f 5b60 	vldr	d5, [pc, #384]	; 80014f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x468>
 8001372:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001376:	ee36 7b47 	vsub.f64	d7, d6, d7
 800137a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	f001 fe45 	bl	8003010 <_Z4_sinf>
 8001386:	eef0 7a40 	vmov.f32	s15, s0
 800138a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80014f8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x470>
 8001392:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001396:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800139a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800139e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013a6:	edc7 7a08 	vstr	s15, [r7, #32]
      // two versions possible
      float T0 = 0; // pulled to 0 - better for low power supply voltage
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if (modulation_centered) {
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f993 304e 	ldrsb.w	r3, [r3, #78]	; 0x4e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x34a>
        T0 = 1 - T1 - T2; //modulation_centered around driver->voltage_limit/2
 80013ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80013d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d4:	3b01      	subs	r3, #1
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	f200 8101 	bhi.w	80015de <_ZN9BLDCMotor15setPhaseVoltageEfff+0x556>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x35c>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001491 	.word	0x08001491
 80013f0:	08001501 	.word	0x08001501
 80013f4:	0800154b 	.word	0x0800154b
 80013f8:	08001595 	.word	0x08001595

      // calculate the duty cycles(times)
      float Ta,Tb,Tc;
      switch(sector){
        case 1:
          Ta = T1 + T2 + T0/2;
 80013fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001400:	edd7 7a08 	vldr	s15, [r7, #32]
 8001404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001408:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800140c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001410:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T2 + T0/2;
 800141c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001420:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	ed97 7a08 	vldr	s14, [r7, #32]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T0/2;
 8001434:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001438:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800143c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001440:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 8001444:	e0d4      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
        case 2:
          Ta = T1 +  T0/2;
 8001446:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800144a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T1 + T2 + T0/2;
 800145e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001462:	edd7 7a08 	vldr	s15, [r7, #32]
 8001466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800146e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001472:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T0/2;
 800147e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001482:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 800148e:	e0af      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
        case 3:
          Ta = T0/2;
 8001490:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001494:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T1 + T2 + T0/2;
 80014a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80014b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80014b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T2 + T0/2;
 80014c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 80014d8:	e08a      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	e857b07f 	.word	0xe857b07f
 80014e4:	3febb67a 	.word	0x3febb67a
 80014e8:	5443d6f4 	.word	0x5443d6f4
 80014ec:	3ff921fb 	.word	0x3ff921fb
 80014f0:	382daf40 	.word	0x382daf40
 80014f4:	3ff0c152 	.word	0x3ff0c152
 80014f8:	e858606b 	.word	0xe858606b
 80014fc:	3ffbb67a 	.word	0x3ffbb67a
        case 4:
          Ta = T0/2;
 8001500:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001504:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T1+ T0/2;
 8001510:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001514:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T1 + T2 + T0/2;
 8001528:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800152c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001538:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800153c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001544:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 8001548:	e052      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
        case 5:
          Ta = T2 + T0/2;
 800154a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800154e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001556:	ed97 7a08 	vldr	s14, [r7, #32]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T0/2;
 8001562:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T1 + T2 + T0/2;
 8001572:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001576:	edd7 7a08 	vldr	s15, [r7, #32]
 800157a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001582:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001586:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 8001592:	e02d      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
        case 6:
          Ta = T1 + T2 + T0/2;
 8001594:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001598:	edd7 7a08 	vldr	s15, [r7, #32]
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80015a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80015a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          Tb = T0/2;
 80015b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          Tc = T1 + T0/2;
 80015c4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          break;
 80015dc:	e008      	b.n	80015f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x568>
        default:
         // possible error state
          Ta = 0;
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
          Tb = 0;
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
          Tc = 0;
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      // calculate the phase voltages and center
      Ua = Ta*driver->voltage_limit;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80015fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
      Ub = Tb*driver->voltage_limit;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800160e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001612:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
      Uc = Tc*driver->voltage_limit;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001626:	ed93 7a03 	vldr	s14, [r3, #12]
 800162a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
      break;
 8001638:	e000      	b.n	800163c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x5b4>
      break;
 800163a:	bf00      	nop

  }

  // set the voltages in driver
  driver->setPwm(Ua, Ub, Uc);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	330c      	adds	r3, #12
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	edd2 7a4e 	vldr	s15, [r2, #312]	; 0x138
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	ed92 7a4f 	vldr	s14, [r2, #316]	; 0x13c
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	edd2 6a50 	vldr	s13, [r2, #320]	; 0x140
 8001660:	eeb0 1a66 	vmov.f32	s2, s13
 8001664:	eef0 0a47 	vmov.f32	s1, s14
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	4608      	mov	r0, r1
 800166e:	4798      	blx	r3
}
 8001670:	bf00      	nop
 8001672:	3740      	adds	r7, #64	; 0x40
 8001674:	46bd      	mov	sp, r7
 8001676:	ecbd 8b02 	vpop	{d8}
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0000      	movs	r0, r0
	...

08001680 <_ZN9BLDCMotor16velocityOpenloopEf>:


// Function (iterative) generating open loop movement for target velocity
// - target_velocity - rad/s
// it uses voltage_limit variable
float BLDCMotor::velocityOpenloop(float target_velocity){
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	ed87 0a00 	vstr	s0, [r7]
  // get current timestamp
  unsigned long now_us = _micros();
 800168c:	f002 f895 	bl	80037ba <_Z7_microsv>
 8001690:	60f8      	str	r0, [r7, #12]
  // calculate the sample time from last call
  float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016a6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001778 <_ZN9BLDCMotor16velocityOpenloopEf+0xf8>
 80016aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016b2:	edc7 7a05 	vstr	s15, [r7, #20]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 80016b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d908      	bls.n	80016d6 <_ZN9BLDCMotor16velocityOpenloopEf+0x56>
 80016c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd01      	ble.n	80016da <_ZN9BLDCMotor16velocityOpenloopEf+0x5a>
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <_ZN9BLDCMotor16velocityOpenloopEf+0x100>)
 80016d8:	617b      	str	r3, [r7, #20]

  // calculate the necessary angle to achieve target velocity
  shaft_angle = _normalizeAngle(shaft_angle + target_velocity*Ts);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80016e0:	edd7 6a00 	vldr	s13, [r7]
 80016e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f001 fe28 	bl	8003348 <_Z15_normalizeAnglef>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edc3 7a02 	vstr	s15, [r3, #8]
  // for display purposes
  shaft_velocity = target_velocity;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	611a      	str	r2, [r3, #16]

  // use voltage limit or current limit
  float Uq = voltage_limit;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	613b      	str	r3, [r7, #16]
  if(_isset(phase_resistance)) Uq =  current_limit*phase_resistance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001714:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001784 <_ZN9BLDCMotor16velocityOpenloopEf+0x104>
 8001718:	eef4 7a47 	vcmp.f32	s15, s14
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	d009      	beq.n	8001736 <_ZN9BLDCMotor16velocityOpenloopEf+0xb6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	edc7 7a04 	vstr	s15, [r7, #16]

  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a02 	vldr	s15, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	4618      	mov	r0, r3
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	f001 fe2f 	bl	80033a8 <_Z16_electricalAnglefi>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	eeb0 1a67 	vmov.f32	s2, s15
 8001752:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001788 <_ZN9BLDCMotor16velocityOpenloopEf+0x108>
 8001756:	ed97 0a04 	vldr	s0, [r7, #16]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fc94 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>

  // save timestamp for next call
  open_loop_timestamp = now_us;
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  return Uq;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	ee07 3a90 	vmov	s15, r3
}
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	a0b5ed8d 	.word	0xa0b5ed8d
 800177c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001780:	3a83126f 	.word	0x3a83126f
 8001784:	c640e400 	.word	0xc640e400
	...

08001790 <_ZN9BLDCMotor13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float BLDCMotor::angleOpenloop(float target_angle){
 8001790:	b580      	push	{r7, lr}
 8001792:	ed2d 8b02 	vpush	{d8}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	ed87 0a00 	vstr	s0, [r7]
  // get current timestamp
  unsigned long now_us = _micros();
 80017a0:	f002 f80b 	bl	80037ba <_Z7_microsv>
 80017a4:	60f8      	str	r0, [r7, #12]
  // calculate the sample time from last call
  float Ts = (now_us - open_loop_timestamp) * 1e-6;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017ba:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001930 <_ZN9BLDCMotor13angleOpenloopEf+0x1a0>
 80017be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c6:	edc7 7a05 	vstr	s15, [r7, #20]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 80017ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d908      	bls.n	80017ea <_ZN9BLDCMotor13angleOpenloopEf+0x5a>
 80017d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	dd01      	ble.n	80017ee <_ZN9BLDCMotor13angleOpenloopEf+0x5e>
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <_ZN9BLDCMotor13angleOpenloopEf+0x1a8>)
 80017ec:	617b      	str	r3, [r7, #20]

  // calculate the necessary angle to move from current position towards target angle
  // with maximal velocity (velocity_limit)
  if(abs( target_angle - shaft_angle ) > abs(velocity_limit*Ts)){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f4:	ed97 7a00 	vldr	s14, [r7]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	f7fe fd6a 	bl	80002d8 <_ZSt3absf>
 8001804:	eeb0 8a40 	vmov.f32	s16, s0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800180e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f7fe fd5d 	bl	80002d8 <_ZSt3absf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
 8001822:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	bfcc      	ite	gt
 800182c:	2301      	movgt	r3, #1
 800182e:	2300      	movle	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03b      	beq.n	80018ae <_ZN9BLDCMotor13angleOpenloopEf+0x11e>
    shaft_angle += _sign(target_angle - shaft_angle) * abs( velocity_limit )*Ts;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a02 	vldr	s15, [r3, #8]
 800183c:	ed97 7a00 	vldr	s14, [r7]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	d502      	bpl.n	8001854 <_ZN9BLDCMotor13angleOpenloopEf+0xc4>
 800184e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8001852:	e010      	b.n	8001876 <_ZN9BLDCMotor13angleOpenloopEf+0xe6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	edd3 7a02 	vldr	s15, [r3, #8]
 800185a:	ed97 7a00 	vldr	s14, [r7]
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd02      	ble.n	8001872 <_ZN9BLDCMotor13angleOpenloopEf+0xe2>
 800186c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001870:	e001      	b.n	8001876 <_ZN9BLDCMotor13angleOpenloopEf+0xe6>
 8001872:	ed9f 8a32 	vldr	s16, [pc, #200]	; 800193c <_ZN9BLDCMotor13angleOpenloopEf+0x1ac>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800187c:	eeb0 0a67 	vmov.f32	s0, s15
 8001880:	f7fe fd2a 	bl	80002d8 <_ZSt3absf>
 8001884:	eef0 7a40 	vmov.f32	s15, s0
 8001888:	ee28 7a27 	vmul.f32	s14, s16, s15
 800188c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a02 	vldr	s15, [r3, #8]
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a02 	vstr	s15, [r3, #8]
    shaft_velocity = velocity_limit;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	e006      	b.n	80018bc <_ZN9BLDCMotor13angleOpenloopEf+0x12c>
  }else{
    shaft_angle = target_angle;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	609a      	str	r2, [r3, #8]
    shaft_velocity = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  }

  // use voltage limit or current limit
  float Uq = voltage_limit;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	613b      	str	r3, [r7, #16]
  if(_isset(phase_resistance)) Uq =  current_limit*phase_resistance;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80018c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001940 <_ZN9BLDCMotor13angleOpenloopEf+0x1b0>
 80018cc:	eef4 7a47 	vcmp.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d009      	beq.n	80018ea <_ZN9BLDCMotor13angleOpenloopEf+0x15a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	edc7 7a04 	vstr	s15, [r7, #16]
  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	4618      	mov	r0, r3
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f001 fd55 	bl	80033a8 <_Z16_electricalAnglefi>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	eeb0 1a67 	vmov.f32	s2, s15
 8001906:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800193c <_ZN9BLDCMotor13angleOpenloopEf+0x1ac>
 800190a:	ed97 0a04 	vldr	s0, [r7, #16]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fbba 	bl	8001088 <_ZN9BLDCMotor15setPhaseVoltageEfff>

  // save timestamp for next call
  open_loop_timestamp = now_us;
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  return Uq;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	ee07 3a90 	vmov	s15, r3
}
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	ecbd 8b02 	vpop	{d8}
 800192e:	bd80      	pop	{r7, pc}
 8001930:	a0b5ed8d 	.word	0xa0b5ed8d
 8001934:	3eb0c6f7 	.word	0x3eb0c6f7
 8001938:	3a83126f 	.word	0x3a83126f
 800193c:	00000000 	.word	0x00000000
 8001940:	c640e400 	.word	0xc640e400

08001944 <_writeDutyCycle3PWM>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// function setting the pwm duty cycle to the hardware
// - BLDC motor - 3PWM setting
//- hardware specific
void _writeDutyCycle3PWM(float dc_a,  float dc_b, float dc_c, int pinA, int pinB, int pinC){
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	ed87 0a05 	vstr	s0, [r7, #20]
 800194e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001952:	ed87 1a03 	vstr	s2, [r7, #12]
 8001956:	60b8      	str	r0, [r7, #8]
 8001958:	6079      	str	r1, [r7, #4]
 800195a:	603a      	str	r2, [r7, #0]
	int pwm_range = htim1.Instance->ARR;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <_writeDutyCycle3PWM+0x8c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	61fb      	str	r3, [r7, #28]
	htim1.Instance->CCR1 = (int)(dc_a * pwm_range);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_writeDutyCycle3PWM+0x8c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	ee17 2a90 	vmov	r2, s15
 8001982:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = (int)(dc_c * pwm_range);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <_writeDutyCycle3PWM+0x8c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	ee17 2a90 	vmov	r2, s15
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR4 = (int)(dc_b * pwm_range);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <_writeDutyCycle3PWM+0x8c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	ee17 2a90 	vmov	r2, s15
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019c4:	bf00      	nop
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	24000164 	.word	0x24000164

080019d4 <_readADCVoltage_pinA>:

// function reading an ADC value and returning the read voltage
float _readADCVoltage_pinA(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <_readADCVoltage_pinA+0x3c>)
 80019dc:	f003 fcc0 	bl	8005360 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <_readADCVoltage_pinA+0x3c>)
 80019e6:	f003 fdb9 	bl	800555c <HAL_ADC_PollForConversion>
	int raw_reading = HAL_ADC_GetValue(&hadc1);
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <_readADCVoltage_pinA+0x3c>)
 80019ec:	f003 fea2 	bl	8005734 <HAL_ADC_GetValue>
 80019f0:	4603      	mov	r3, r0
 80019f2:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <_readADCVoltage_pinA+0x3c>)
 80019f6:	f003 fd7d 	bl	80054f4 <HAL_ADC_Stop>
	return raw_reading;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//	for (int i = 0; i < 3; i++) {
//		sum += HAL_ADC_GetValue(&hadc1);
//	}
//	return sum / 3;

}
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2400009c 	.word	0x2400009c

08001a14 <_readADCVoltage_pinB>:

float _readADCVoltage_pinB(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <_readADCVoltage_pinB+0x3c>)
 8001a1c:	f003 fca0 	bl	8005360 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <_readADCVoltage_pinB+0x3c>)
 8001a26:	f003 fd99 	bl	800555c <HAL_ADC_PollForConversion>
	int raw_reading = HAL_ADC_GetValue(&hadc3);
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <_readADCVoltage_pinB+0x3c>)
 8001a2c:	f003 fe82 	bl	8005734 <HAL_ADC_GetValue>
 8001a30:	4603      	mov	r3, r0
 8001a32:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <_readADCVoltage_pinB+0x3c>)
 8001a36:	f003 fd5d 	bl	80054f4 <HAL_ADC_Stop>
	return raw_reading;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//
//	for (int i = 0; i < 3; i++) {
//		sum += HAL_ADC_GetValue(&hadc1);
//	}
//	return sum / 3;
}
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	24000100 	.word	0x24000100
 8001a54:	00000000 	.word	0x00000000

08001a58 <_calibrate_phaseA>:

int _calibrate_phaseA(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	int sum = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
	//calibration process, the calculated calibration value (offset) should be automatically applied
	//during subsequent conversions
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8001a62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a6a:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <_calibrate_phaseA+0x80>)
 8001a6c:	f004 fc78 	bl	8006360 <HAL_ADCEx_Calibration_Start>
	for (int i = 0; i < 100; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b63      	cmp	r3, #99	; 0x63
 8001a78:	dc15      	bgt.n	8001aa6 <_calibrate_phaseA+0x4e>
		HAL_ADC_Start(&hadc1);
 8001a7a:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <_calibrate_phaseA+0x80>)
 8001a7c:	f003 fc70 	bl	8005360 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <_calibrate_phaseA+0x80>)
 8001a86:	f003 fd69 	bl	800555c <HAL_ADC_PollForConversion>
		sum += HAL_ADC_GetValue(&hadc1);
 8001a8a:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <_calibrate_phaseA+0x80>)
 8001a8c:	f003 fe52 	bl	8005734 <HAL_ADC_GetValue>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	607b      	str	r3, [r7, #4]
		HAL_ADC_Stop(&hadc1);
 8001a98:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <_calibrate_phaseA+0x80>)
 8001a9a:	f003 fd2b 	bl	80054f4 <HAL_ADC_Stop>
	for (int i = 0; i < 100; i++) {
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	e7e6      	b.n	8001a74 <_calibrate_phaseA+0x1c>
	}
	return (float)(sum/100.0);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ab0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001ad0 <_calibrate_phaseA+0x78>
 8001ab4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40590000 	.word	0x40590000
 8001ad8:	2400009c 	.word	0x2400009c

08001adc <_calibrate_phaseB>:

int _calibrate_phaseB(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	int sum = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
	//calibration process, the calculated calibration value (offset) should be automatically applied
	//during subsequent conversions
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8001ae6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <_calibrate_phaseB+0x74>)
 8001af0:	f004 fc36 	bl	8006360 <HAL_ADCEx_Calibration_Start>
	for (int i = 0; i < 100; i++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b63      	cmp	r3, #99	; 0x63
 8001afc:	dc15      	bgt.n	8001b2a <_calibrate_phaseB+0x4e>
		HAL_ADC_Start(&hadc3);
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <_calibrate_phaseB+0x74>)
 8001b00:	f003 fc2e 	bl	8005360 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	4811      	ldr	r0, [pc, #68]	; (8001b50 <_calibrate_phaseB+0x74>)
 8001b0a:	f003 fd27 	bl	800555c <HAL_ADC_PollForConversion>
		sum += HAL_ADC_GetValue(&hadc3);
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <_calibrate_phaseB+0x74>)
 8001b10:	f003 fe10 	bl	8005734 <HAL_ADC_GetValue>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
		HAL_ADC_Stop(&hadc3);
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <_calibrate_phaseB+0x74>)
 8001b1e:	f003 fce9 	bl	80054f4 <HAL_ADC_Stop>
	for (int i = 0; i < 100; i++) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	e7e6      	b.n	8001af8 <_calibrate_phaseB+0x1c>
	}
	return (float)(sum/100);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <_calibrate_phaseB+0x78>)
 8001b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b32:	1152      	asrs	r2, r2, #5
 8001b34:	17db      	asrs	r3, r3, #31
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	ee17 3a90 	vmov	r3, s15
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24000100 	.word	0x24000100
 8001b54:	51eb851f 	.word	0x51eb851f

08001b58 <main>:
  * @brief  The application entry point.
  * @retval int
  */
int loopIdx = 10000;
int main(void)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001b5e:	f002 ff55 	bl	8004a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f8c3 	bl	8001cec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f000 fb6f 	bl	8002248 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001b6a:	f000 f9af 	bl	8001ecc <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8001b6e:	f000 fa35 	bl	8001fdc <_ZL12MX_ADC3_Initv>
  MX_TIM1_Init();
 8001b72:	f000 faa3 	bl	80020bc <_ZL12MX_TIM1_Initv>
//  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001b76:	4851      	ldr	r0, [pc, #324]	; (8001cbc <main+0x164>)
 8001b78:	f007 ff42 	bl	8009a00 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start(&htim4);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	484f      	ldr	r0, [pc, #316]	; (8001cbc <main+0x164>)
 8001b80:	f007 ffc4 	bl	8009b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b84:	2104      	movs	r1, #4
 8001b86:	484d      	ldr	r0, [pc, #308]	; (8001cbc <main+0x164>)
 8001b88:	f007 ffc0 	bl	8009b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b8c:	210c      	movs	r1, #12
 8001b8e:	484b      	ldr	r0, [pc, #300]	; (8001cbc <main+0x164>)
 8001b90:	f007 ffbc 	bl	8009b0c <HAL_TIM_PWM_Start>
//  motor.controller = MotionControlType::velocity_openloop;
//  //init motor hardware
//  motor.init();

    //closed loop velocity example:
  encoder.init();
 8001b94:	484a      	ldr	r0, [pc, #296]	; (8001cc0 <main+0x168>)
 8001b96:	f002 fedf 	bl	8004958 <_ZN7Encoder4initEv>
  //link the motor to the sensor:
  motor.linkSensor(&encoder);
 8001b9a:	4949      	ldr	r1, [pc, #292]	; (8001cc0 <main+0x168>)
 8001b9c:	4849      	ldr	r0, [pc, #292]	; (8001cc4 <main+0x16c>)
 8001b9e:	f001 f913 	bl	8002dc8 <_ZN8FOCMotor10linkSensorEP6Sensor>
  //driver config:
  driver.voltage_power_supply = 24;
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <main+0x170>)
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <main+0x174>)
 8001ba6:	609a      	str	r2, [r3, #8]
  driver.init();
 8001ba8:	4847      	ldr	r0, [pc, #284]	; (8001cc8 <main+0x170>)
 8001baa:	f002 fb85 	bl	80042b8 <_ZN14BLDCDriver3PWM4initEv>
  //link the motor and the driver:
  motor.linkDriver(&driver);
 8001bae:	4946      	ldr	r1, [pc, #280]	; (8001cc8 <main+0x170>)
 8001bb0:	4844      	ldr	r0, [pc, #272]	; (8001cc4 <main+0x16c>)
 8001bb2:	f7fe fbfd 	bl	80003b0 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>
  //aligning the voltage [V]
 // motor.voltage_sensor_align = 2;
  //index search velocity [rad/s]
  motor.velocity_index_search = 0.1; //needs to be low otherwise index search fails.
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <main+0x16c>)
 8001bb8:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <main+0x178>)
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
  //set motion control loop to be used
  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;//SinePWM;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <main+0x16c>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  motor.controller = MotionControlType::angle;//angle;//velocity;//torque;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <main+0x16c>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  motor.torque_controller = TorqueControlType::voltage;//voltage;//foc_current;//dc_current;//voltage;
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <main+0x16c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
//  motor.P_angle.P = 10;
//  motor.P_angle.I = 0.005;
//  motor.P_angle.D = 0.05;

	//---now set wanted values: - from cogging calibration
	motor.P_angle.P = 1;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <main+0x16c>)
 8001bd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bda:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
//	motor.P_angle.I = 0.01;
//	motor.P_angle.D = 0;
//	motor.P_angle.limit = 1000;

  motor.PID_velocity.P = 0.05;//0.5;
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <main+0x16c>)
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <main+0x17c>)
 8001be2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  motor.PID_velocity.I = 1;//10;
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <main+0x16c>)
 8001be8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  motor.PID_velocity.D = 0;
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <main+0x16c>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  //velocity PI controller parameters
//  motor.PID_velocity.P = 0.01;//0.2;//0.05;
//  motor.PID_velocity.I = 0;//20;
//  motor.PID_velocity.D = 0;
  //default voltage_power_supply
  motor.voltage_limit = 4;//12;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <main+0x16c>)
 8001bfc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
  //jerk control using voltage voltage ramp
  //default value is 300 volts per sec, ~0.3V/millisec
 // motor.PID_velocity.output_ramp = 1000;
  //velocity low pass filtering time constant
  motor.LPF_velocity.Tf = 0.01; //0.01;
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <main+0x16c>)
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <main+0x180>)
 8001c06:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
//  //angle loop controller
//  motor.P_angle.P = 20;
//  //angle loop velocity limit
//  motor.velocity_limit = 20;
  //current sense init and linking
  current_sense.gain_b *=-1;
 8001c0a:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <main+0x184>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	425b      	negs	r3, r3
 8001c10:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <main+0x184>)
 8001c12:	60d3      	str	r3, [r2, #12]
  // skip alignment
  current_sense.skip_align = true;
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <main+0x184>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	711a      	strb	r2, [r3, #4]


  current_sense.init();
 8001c1a:	4830      	ldr	r0, [pc, #192]	; (8001cdc <main+0x184>)
 8001c1c:	f001 fe48 	bl	80038b0 <_ZN18InlineCurrentSense4initEv>
  motor.linkCurrentSense(&current_sense);
 8001c20:	492e      	ldr	r1, [pc, #184]	; (8001cdc <main+0x184>)
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <main+0x16c>)
 8001c24:	f001 f8df 	bl	8002de6 <_ZN8FOCMotor16linkCurrentSenseEP12CurrentSense>

  //10th May, 2021:
  /* fix current measurement calculations.
   * Why does motor 'click' and current steps high to low?
   */
  motor.anti_cogging = false;
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <main+0x16c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c


  //initialise motor
  motor.init();
 8001c30:	4824      	ldr	r0, [pc, #144]	; (8001cc4 <main+0x16c>)
 8001c32:	f7fe fbcd 	bl	80003d0 <_ZN9BLDCMotor4initEv>
  //align sensor and start FOC
  motor.initFOC();
 8001c36:	2101      	movs	r1, #1
 8001c38:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001ce0 <main+0x188>
 8001c3c:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <main+0x16c>)
 8001c3e:	f7fe fc9d 	bl	800057c <_ZN9BLDCMotor7initFOCEf9Direction>

  _delay(100);
 8001c42:	2064      	movs	r0, #100	; 0x64
 8001c44:	f001 fdae 	bl	80037a4 <_Z6_delaym>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor.target = 1;//2;//0.6;//3;//0.5;// 0.25;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <main+0x16c>)
 8001c4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c4e:	605a      	str	r2, [r3, #4]
 // motor.controller = MotionControlType::velocity;//angle;//velocity;//torque;
  float targets[] = {0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1};
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <main+0x18c>)
 8001c52:	463c      	mov	r4, r7
 8001c54:	461d      	mov	r5, r3
 8001c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int i = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  int idx = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//		  float voltage_adc1 = ((float)(raw - cal_value1) * 3.3) / 65536;
//		  voltage_adc2 = voltage_adc1;
//
//	  //angular set point example for PID tuning
	  motor.loopFOC();
 8001c6e:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <main+0x16c>)
 8001c70:	f7fe ffb0 	bl	8000bd4 <_ZN9BLDCMotor7loopFOCEv>
	  motor.move();
 8001c74:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001ce0 <main+0x188>
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <main+0x16c>)
 8001c7a:	f7ff f8cb 	bl	8000e14 <_ZN9BLDCMotor4moveEf>

//	 //   PhaseCurrent_s currents = current_sense.getPhaseCurrents();
//	//  current_magnitude = current_sense.getDCCurrent();
//	  motor.loopFOC();
//	  motor.move();
	  if (idx % loopIdx == 0) {
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <main+0x190>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c88:	fb02 f201 	mul.w	r2, r2, r1
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10b      	bne.n	8001caa <main+0x152>
		  motor.target = targets[i];
 8001c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b38      	subs	r3, #56	; 0x38
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <main+0x16c>)
 8001ca2:	6053      	str	r3, [r2, #4]
		  i++;
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
		 // i = i % 12;
	  }
	  if (i >= 12) {
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	dd01      	ble.n	8001cb4 <main+0x15c>
		  i = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
	  }
	  idx++;
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
	  motor.loopFOC();
 8001cba:	e7d8      	b.n	8001c6e <main+0x116>
 8001cbc:	24000164 	.word	0x24000164
 8001cc0:	24000330 	.word	0x24000330
 8001cc4:	240001b0 	.word	0x240001b0
 8001cc8:	24000304 	.word	0x24000304
 8001ccc:	41c00000 	.word	0x41c00000
 8001cd0:	3dcccccd 	.word	0x3dcccccd
 8001cd4:	3d4ccccd 	.word	0x3d4ccccd
 8001cd8:	3c23d70a 	.word	0x3c23d70a
 8001cdc:	24000378 	.word	0x24000378
 8001ce0:	c640e400 	.word	0xc640e400
 8001ce4:	0800b030 	.word	0x0800b030
 8001ce8:	24000000 	.word	0x24000000

08001cec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0cc      	sub	sp, #304	; 0x130
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cf6:	224c      	movs	r2, #76	; 0x4c
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f009 f93e 	bl	800af7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d04:	2220      	movs	r2, #32
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f009 f937 	bl	800af7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4618      	mov	r0, r3
 8001d14:	23bc      	movs	r3, #188	; 0xbc
 8001d16:	461a      	mov	r2, r3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f009 f92f 	bl	800af7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f004 ff68 	bl	8006bf4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <_Z18SystemClock_Configv+0x1d4>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4a64      	ldr	r2, [pc, #400]	; (8001ec0 <_Z18SystemClock_Configv+0x1d4>)
 8001d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d34:	6193      	str	r3, [r2, #24]
 8001d36:	4b62      	ldr	r3, [pc, #392]	; (8001ec0 <_Z18SystemClock_Configv+0x1d4>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <_Z18SystemClock_Configv+0x1d8>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	4a5f      	ldr	r2, [pc, #380]	; (8001ec4 <_Z18SystemClock_Configv+0x1d8>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <_Z18SystemClock_Configv+0x1d8>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <_Z18SystemClock_Configv+0x1d4>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d000      	beq.n	8001d78 <_Z18SystemClock_Configv+0x8c>
 8001d76:	e7f2      	b.n	8001d5e <_Z18SystemClock_Configv+0x72>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <_Z18SystemClock_Configv+0x1dc>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f023 0303 	bic.w	r3, r3, #3
 8001d80:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <_Z18SystemClock_Configv+0x1dc>)
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001da8:	2378      	movs	r3, #120	; 0x78
 8001daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001db4:	2314      	movs	r3, #20
 8001db6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 ff46 	bl	8006c68 <HAL_RCC_OscConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001dec:	f000 fb60 	bl	80024b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df0:	233f      	movs	r3, #63	; 0x3f
 8001df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e02:	2308      	movs	r3, #8
 8001e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e0e:	2340      	movs	r3, #64	; 0x40
 8001e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e1c:	2340      	movs	r3, #64	; 0x40
 8001e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e26:	2104      	movs	r1, #4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fb2d 	bl	8007488 <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 8001e3e:	f000 fb37 	bl	80024b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e4a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2201      	movs	r2, #1
 8001e52:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	2213      	movs	r2, #19
 8001e5a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	2202      	movs	r2, #2
 8001e62:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	2202      	movs	r2, #2
 8001e6a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	2202      	movs	r2, #2
 8001e72:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	22c0      	movs	r2, #192	; 0xc0
 8001e7a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2220      	movs	r2, #32
 8001e82:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fe54 	bl	8007b48 <HAL_RCCEx_PeriphCLKConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <_Z18SystemClock_Configv+0x1c8>
  {
    Error_Handler();
 8001eb0:	f000 fafe 	bl	80024b0 <Error_Handler>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	58024800 	.word	0x58024800
 8001ec4:	58000400 	.word	0x58000400
 8001ec8:	58024400 	.word	0x58024400

08001ecc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ede:	463b      	mov	r3, r7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001ef2:	4a38      	ldr	r2, [pc, #224]	; (8001fd4 <_ZL12MX_ADC1_Initv+0x108>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;//DISABLE;
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;//ADC_EXTERNALTRIG_T1_TRGO;//ADC_SOFTWARE_START;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//ADC_EXTERNALTRIGCONVEDGE_RISING;//ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;//ADC_OVR_DATA_PRESERVED;
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f4e:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f50:	f003 f866 	bl	8005020 <HAL_ADC_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001f64:	f000 faa4 	bl	80024b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4817      	ldr	r0, [pc, #92]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001f74:	f004 fa58 	bl	8006428 <HAL_ADCEx_MultiModeConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001f88:	f000 fa92 	bl	80024b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <_ZL12MX_ADC1_Initv+0x10c>)
 8001f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f90:	2306      	movs	r3, #6
 8001f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001f94:	2307      	movs	r3, #7
 8001f96:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <_ZL12MX_ADC1_Initv+0x104>)
 8001fb0:	f003 fbce 	bl	8005750 <HAL_ADC_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8001fc4:	f000 fa74 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	2400009c 	.word	0x2400009c
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	3ef08000 	.word	0x3ef08000

08001fdc <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]
 8001ff2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <_ZL12MX_ADC3_Initv+0xd8>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 800200e:	2204      	movs	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002014:	2200      	movs	r2, #0
 8002016:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;//DISABLE;
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 800201a:	2201      	movs	r2, #1
 800201c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002020:	2201      	movs	r2, #1
 8002022:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002026:	2200      	movs	r2, #0
 8002028:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002038:	2200      	movs	r2, #0
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;//ADC_OVR_DATA_PRESERVED;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 800203e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002052:	4817      	ldr	r0, [pc, #92]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002054:	f002 ffe4 	bl	8005020 <HAL_ADC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZL12MX_ADC3_Initv+0x90>
  {
    Error_Handler();
 8002068:	f000 fa22 	bl	80024b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <_ZL12MX_ADC3_Initv+0xdc>)
 800206e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002070:	2306      	movs	r3, #6
 8002072:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8002074:	2307      	movs	r3, #7
 8002076:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002078:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800207c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800207e:	2304      	movs	r3, #4
 8002080:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <_ZL12MX_ADC3_Initv+0xd4>)
 8002090:	f003 fb5e 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZL12MX_ADC3_Initv+0xcc>
  {
    Error_Handler();
 80020a4:	f000 fa04 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24000100 	.word	0x24000100
 80020b4:	58026000 	.word	0x58026000
 80020b8:	04300002 	.word	0x04300002

080020bc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b096      	sub	sp, #88	; 0x58
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	615a      	str	r2, [r3, #20]
 80020e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	222c      	movs	r2, #44	; 0x2c
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f008 ff47 	bl	800af7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ee:	4b54      	ldr	r3, [pc, #336]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <_ZL12MX_TIM1_Initv+0x188>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 80020fc:	2260      	movs	r2, #96	; 0x60
 80020fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800;
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002102:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002106:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800211a:	4849      	ldr	r0, [pc, #292]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 800211c:	f007 fc9e 	bl	8009a5c <HAL_TIM_PWM_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002130:	f000 f9be 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;//TIM_TRGO_UPDATE;//TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002140:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002144:	4619      	mov	r1, r3
 8002146:	483e      	ldr	r0, [pc, #248]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002148:	f008 fa50 	bl	800a5ec <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 800215c:	f000 f9a8 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2; //TIM_OCMODE_PWM1;
 8002160:	2370      	movs	r3, #112	; 0x70
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800216c:	2300      	movs	r3, #0
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	482e      	ldr	r0, [pc, #184]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002186:	f007 fd93 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800219a:	f000 f989 	bl	80024b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a2:	2204      	movs	r2, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4826      	ldr	r0, [pc, #152]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 80021a8:	f007 fd82 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 80021bc:	f000 f978 	bl	80024b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c4:	220c      	movs	r2, #12
 80021c6:	4619      	mov	r1, r3
 80021c8:	481d      	ldr	r0, [pc, #116]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 80021ca:	f007 fd71 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <_ZL12MX_TIM1_Initv+0x126>
  {
	  Error_Handler();
 80021de:	f000 f967 	bl	80024b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	480a      	ldr	r0, [pc, #40]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002218:	f008 fa70 	bl	800a6fc <HAL_TIMEx_ConfigBreakDeadTime>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 800222c:	f000 f940 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <_ZL12MX_TIM1_Initv+0x184>)
 8002232:	f000 fa55 	bl	80026e0 <HAL_TIM_MspPostInit>

}
 8002236:	bf00      	nop
 8002238:	3758      	adds	r7, #88	; 0x58
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	24000164 	.word	0x24000164
 8002244:	40010000 	.word	0x40010000

08002248 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	4b7d      	ldr	r3, [pc, #500]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002264:	4a7b      	ldr	r2, [pc, #492]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800226e:	4b79      	ldr	r3, [pc, #484]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	4a74      	ldr	r2, [pc, #464]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800229a:	4b6e      	ldr	r3, [pc, #440]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a6c      	ldr	r2, [pc, #432]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c8:	4b62      	ldr	r3, [pc, #392]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fa:	4a56      	ldr	r2, [pc, #344]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002312:	4b50      	ldr	r3, [pc, #320]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002322:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002330:	4b48      	ldr	r3, [pc, #288]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002336:	4a47      	ldr	r2, [pc, #284]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002340:	4b44      	ldr	r3, [pc, #272]	; (8002454 <_ZL12MX_GPIO_Initv+0x20c>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_Pin8_GPIO_Port, Enable_Pin8_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2108      	movs	r1, #8
 8002352:	4841      	ldr	r0, [pc, #260]	; (8002458 <_ZL12MX_GPIO_Initv+0x210>)
 8002354:	f004 fc1a 	bl	8006b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	f244 0101 	movw	r1, #16385	; 0x4001
 800235e:	483f      	ldr	r0, [pc, #252]	; (800245c <_ZL12MX_GPIO_Initv+0x214>)
 8002360:	f004 fc14 	bl	8006b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2102      	movs	r1, #2
 8002368:	483d      	ldr	r0, [pc, #244]	; (8002460 <_ZL12MX_GPIO_Initv+0x218>)
 800236a:	f004 fc0f 	bl	8006b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800236e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002380:	4619      	mov	r1, r3
 8002382:	4838      	ldr	r0, [pc, #224]	; (8002464 <_ZL12MX_GPIO_Initv+0x21c>)
 8002384:	f004 fa3a 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Pin8_Pin */
  GPIO_InitStruct.Pin = Enable_Pin8_Pin;
 8002388:	2308      	movs	r3, #8
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Enable_Pin8_GPIO_Port, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	482e      	ldr	r0, [pc, #184]	; (8002458 <_ZL12MX_GPIO_Initv+0x210>)
 80023a0:	f004 fa2c 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80023a4:	f244 0301 	movw	r3, #16385	; 0x4001
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ba:	4619      	mov	r1, r3
 80023bc:	4827      	ldr	r0, [pc, #156]	; (800245c <_ZL12MX_GPIO_Initv+0x214>)
 80023be:	f004 fa1d 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderAU_Pin3_Pin */
  GPIO_InitStruct.Pin = EncoderAU_Pin3_Pin;
 80023c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <_ZL12MX_GPIO_Initv+0x220>)
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EncoderAU_Pin3_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4822      	ldr	r0, [pc, #136]	; (8002460 <_ZL12MX_GPIO_Initv+0x218>)
 80023d8:	f004 fa10 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBV_Pin2_Pin */
  GPIO_InitStruct.Pin = EncoderBV_Pin2_Pin;
 80023dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <_ZL12MX_GPIO_Initv+0x220>)
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EncoderBV_Pin2_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4619      	mov	r1, r3
 80023f0:	481e      	ldr	r0, [pc, #120]	; (800246c <_ZL12MX_GPIO_Initv+0x224>)
 80023f2:	f004 fa03 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderIW_Pin11_Pin */
  GPIO_InitStruct.Pin = EncoderIW_Pin11_Pin;
 80023f6:	2320      	movs	r3, #32
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <_ZL12MX_GPIO_Initv+0x220>)
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EncoderIW_Pin11_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <_ZL12MX_GPIO_Initv+0x214>)
 800240a:	f004 f9f7 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800240e:	2302      	movs	r3, #2
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	4619      	mov	r1, r3
 8002424:	480e      	ldr	r0, [pc, #56]	; (8002460 <_ZL12MX_GPIO_Initv+0x218>)
 8002426:	f004 f9e9 	bl	80067fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2028      	movs	r0, #40	; 0x28
 8002430:	f004 f9af 	bl	8006792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002434:	2028      	movs	r0, #40	; 0x28
 8002436:	f004 f9c6 	bl	80067c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	2017      	movs	r0, #23
 8002440:	f004 f9a7 	bl	8006792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002444:	2017      	movs	r0, #23
 8002446:	f004 f9be 	bl	80067c6 <HAL_NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3738      	adds	r7, #56	; 0x38
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400
 8002458:	58021400 	.word	0x58021400
 800245c:	58020400 	.word	0x58020400
 8002460:	58021000 	.word	0x58021000
 8002464:	58020800 	.word	0x58020800
 8002468:	11310000 	.word	0x11310000
 800246c:	58021800 	.word	0x58021800

08002470 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EncoderAU_Pin3_Pin) {
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002480:	d102      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0x18>
		encoder.handleA();
 8002482:	480a      	ldr	r0, [pc, #40]	; (80024ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8002484:	f002 f898 	bl	80045b8 <_ZN7Encoder7handleAEv>
	}
	if (GPIO_Pin == EncoderBV_Pin2_Pin) {
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248e:	d102      	bne.n	8002496 <HAL_GPIO_EXTI_Callback+0x26>
		encoder.handleB();
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8002492:	f002 f8c5 	bl	8004620 <_ZN7Encoder7handleBEv>
	}
	if (GPIO_Pin == EncoderIW_Pin11_Pin) {
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b20      	cmp	r3, #32
 800249a:	d102      	bne.n	80024a2 <HAL_GPIO_EXTI_Callback+0x32>
		encoder.handleIndex();
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <HAL_GPIO_EXTI_Callback+0x3c>)
 800249e:	f002 f8f3 	bl	8004688 <_ZN7Encoder11handleIndexEv>
	}
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	24000330 	.word	0x24000330

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <Error_Handler+0x8>
	...

080024bc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d124      	bne.n	8002516 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11f      	bne.n	8002516 <_Z41__static_initialization_and_destruction_0ii+0x5a>
BLDCMotor motor = BLDCMotor(7);//,0.039);//,0.039); //(pp,phase_resistance)
 80024d6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002520 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80024da:	2107      	movs	r1, #7
 80024dc:	4811      	ldr	r0, [pc, #68]	; (8002524 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80024de:	f7fd ff43 	bl	8000368 <_ZN9BLDCMotorC1Eif>
BLDCDriver3PWM driver = BLDCDriver3PWM(5, 9, 6, 8);
 80024e2:	2308      	movs	r3, #8
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2306      	movs	r3, #6
 80024e8:	2209      	movs	r2, #9
 80024ea:	2105      	movs	r1, #5
 80024ec:	480e      	ldr	r0, [pc, #56]	; (8002528 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80024ee:	f001 fe7b 	bl	80041e8 <_ZN14BLDCDriver3PWMC1Eiiii>
Encoder encoder = Encoder(2, 3, 2048, 11);//, 11);//, 4); //these pins, and values are actually hardcoded
 80024f2:	230b      	movs	r3, #11
 80024f4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800252c <_Z41__static_initialization_and_destruction_0ii+0x70>
 80024f8:	2203      	movs	r2, #3
 80024fa:	2102      	movs	r1, #2
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80024fe:	f002 f80d 	bl	800451c <_ZN7EncoderC1Eiifi>
InlineCurrentSense current_sense = InlineCurrentSense(0.01, 50.0, phaseA, phaseB); //pins are hardcoded
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002504:	2202      	movs	r2, #2
 8002506:	2101      	movs	r1, #1
 8002508:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002538 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 800250c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800253c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002512:	f001 f971 	bl	80037f8 <_ZN18InlineCurrentSenseC1Effiii>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	c640e400 	.word	0xc640e400
 8002524:	240001b0 	.word	0x240001b0
 8002528:	24000304 	.word	0x24000304
 800252c:	45000000 	.word	0x45000000
 8002530:	24000330 	.word	0x24000330
 8002534:	ffffcfc7 	.word	0xffffcfc7
 8002538:	42480000 	.word	0x42480000
 800253c:	3c23d70a 	.word	0x3c23d70a
 8002540:	24000378 	.word	0x24000378

08002544 <_GLOBAL__sub_I_hadc1>:
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
 8002548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ffb5 	bl	80024bc <_Z41__static_initialization_and_destruction_0ii>
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_MspInit+0x30>)
 800255c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_MspInit+0x30>)
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_MspInit+0x30>)
 800256c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	58024400 	.word	0x58024400

08002588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_ADC_MspInit+0xd4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12a      	bne.n	8002600 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025b2:	f043 0320 	orr.w	r3, r3, #32
 80025b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 80025da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = Current_PhaseB_A0_Pin;
 80025e6:	2308      	movs	r3, #8
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ea:	2303      	movs	r3, #3
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Current_PhaseB_A0_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	481a      	ldr	r0, [pc, #104]	; (8002664 <HAL_ADC_MspInit+0xdc>)
 80025fa:	f004 f8ff 	bl	80067fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80025fe:	e028      	b.n	8002652 <HAL_ADC_MspInit+0xca>
  else if(hadc->Instance==ADC3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_ADC_MspInit+0xe0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d123      	bne.n	8002652 <HAL_ADC_MspInit+0xca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_ADC_MspInit+0xd8>)
 800263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002646:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800264a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800264e:	f002 fa9f 	bl	8004b90 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002652:	bf00      	nop
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	58024400 	.word	0x58024400
 8002664:	58020000 	.word	0x58020000
 8002668:	58026000 	.word	0x58026000

0800266c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_PWM_MspInit+0x68>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10f      	bne.n	800269e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800269c:	e013      	b.n	80026c6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM4)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_TIM_PWM_MspInit+0x70>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10e      	bne.n	80026c6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80026aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80026ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	58024400 	.word	0x58024400
 80026dc:	40000800 	.word	0x40000800

080026e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_TIM_MspPostInit+0xa4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d128      	bne.n	8002754 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14    ------> TIM1_CH4
    */
    //NAT - added interrupts for timer 1
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	2019      	movs	r0, #25
 8002726:	f004 f834 	bl	8006792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800272a:	2019      	movs	r0, #25
 800272c:	f004 f84b 	bl	80067c6 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = PWMC_Pin6_Pin|PWMB_Pin5_Pin|PWMA_Pin9_Pin;
 8002730:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002742:	2301      	movs	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	480f      	ldr	r0, [pc, #60]	; (800278c <HAL_TIM_MspPostInit+0xac>)
 800274e:	f004 f855 	bl	80067fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002752:	e013      	b.n	800277c <HAL_TIM_MspPostInit+0x9c>
  else if(htim->Instance==TIM4)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_TIM_MspPostInit+0xb0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_TIM_MspPostInit+0x9c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_TIM_MspPostInit+0xa8>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010000 	.word	0x40010000
 8002788:	58024400 	.word	0x58024400
 800278c:	58021000 	.word	0x58021000
 8002790:	40000800 	.word	0x40000800

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <NMI_Handler+0x4>

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <MemManage_Handler+0x4>

080027a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <BusFault_Handler+0x4>

080027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <UsageFault_Handler+0x4>

080027b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e0:	f002 f986 	bl	8004af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027f0:	f004 f9e5 	bl	8006bbe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80027f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027f8:	f004 f9e1 	bl	8006bbe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002804:	2020      	movs	r0, #32
 8002806:	f004 f9da 	bl	8006bbe <HAL_GPIO_EXTI_IRQHandler>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}

0800280e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
	return 1;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_kill>:

int _kill(int pid, int sig)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002828:	f008 fb7e 	bl	800af28 <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	2216      	movs	r2, #22
 8002830:	601a      	str	r2, [r3, #0]
	return -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_exit>:

void _exit (int status)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002846:	f04f 31ff 	mov.w	r1, #4294967295
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffe7 	bl	800281e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002850:	e7fe      	b.n	8002850 <_exit+0x12>
	...

08002854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <SystemInit+0xec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <SystemInit+0xec>)
 8002860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <SystemInit+0xf0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	2b06      	cmp	r3, #6
 8002872:	d807      	bhi.n	8002884 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <SystemInit+0xf0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 030f 	bic.w	r3, r3, #15
 800287c:	4a31      	ldr	r2, [pc, #196]	; (8002944 <SystemInit+0xf0>)
 800287e:	f043 0307 	orr.w	r3, r3, #7
 8002882:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <SystemInit+0xf4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <SystemInit+0xf4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <SystemInit+0xf4>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <SystemInit+0xf4>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	492b      	ldr	r1, [pc, #172]	; (8002948 <SystemInit+0xf4>)
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <SystemInit+0xf8>)
 800289e:	4013      	ands	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <SystemInit+0xf0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <SystemInit+0xf0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 030f 	bic.w	r3, r3, #15
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <SystemInit+0xf0>)
 80028b8:	f043 0307 	orr.w	r3, r3, #7
 80028bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <SystemInit+0xf4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <SystemInit+0xf4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <SystemInit+0xf4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <SystemInit+0xf4>)
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <SystemInit+0xfc>)
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <SystemInit+0xf4>)
 80028d8:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <SystemInit+0x100>)
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <SystemInit+0xf4>)
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <SystemInit+0x104>)
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <SystemInit+0xf4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <SystemInit+0xf4>)
 80028ea:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <SystemInit+0x104>)
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <SystemInit+0xf4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <SystemInit+0xf4>)
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <SystemInit+0x104>)
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <SystemInit+0xf4>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <SystemInit+0xf4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a10      	ldr	r2, [pc, #64]	; (8002948 <SystemInit+0xf4>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <SystemInit+0xf4>)
 800290e:	2200      	movs	r2, #0
 8002910:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <SystemInit+0x108>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SystemInit+0x10c>)
 8002918:	4013      	ands	r3, r2
 800291a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291e:	d202      	bcs.n	8002926 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <SystemInit+0x110>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <SystemInit+0x114>)
 8002928:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800292c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SystemInit+0xec>)
 8002930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002934:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	52002000 	.word	0x52002000
 8002948:	58024400 	.word	0x58024400
 800294c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002950:	02020200 	.word	0x02020200
 8002954:	01ff0000 	.word	0x01ff0000
 8002958:	01010280 	.word	0x01010280
 800295c:	5c001000 	.word	0x5c001000
 8002960:	ffff0000 	.word	0xffff0000
 8002964:	51008108 	.word	0x51008108
 8002968:	52004000 	.word	0x52004000
 800296c:	00000000 	.word	0x00000000

08002970 <_ZN12CurrentSense12getDCCurrentEf>:


// get current magnitude
//   - absolute  - if no electrical_angle provided
//   - signed    - if angle provided
float CurrentSense::getDCCurrent(float motor_electrical_angle){
 8002970:	b580      	push	{r7, lr}
 8002972:	ed2d 8b02 	vpush	{d8}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	ed87 0a00 	vstr	s0, [r7]
    // read current phase currents
    PhaseCurrent_s current = getPhaseCurrents();
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	eef0 6a40 	vmov.f32	s13, s0
 8002990:	eeb0 7a60 	vmov.f32	s14, s1
 8002994:	eef0 7a41 	vmov.f32	s15, s2
 8002998:	edc7 6a02 	vstr	s13, [r7, #8]
 800299c:	ed87 7a03 	vstr	s14, [r7, #12]
 80029a0:	edc7 7a04 	vstr	s15, [r7, #16]
    // currnet sign - if motor angle not provided the magnitude is always positive
    float sign = 1;
 80029a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029a8:	61fb      	str	r3, [r7, #28]

    // calculate clarke transform
    float i_alpha, i_beta;
    if(!current.c){
 80029aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	d118      	bne.n	80029ea <_ZN12CurrentSense12getDCCurrentEf+0x7a>
        // if only two measured currents
        i_alpha = current.a;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        i_beta = _1_SQRT3 * current.a + _2_SQRT3 * current.b;
 80029bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029c4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002ab8 <_ZN12CurrentSense12getDCCurrentEf+0x148>
 80029c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029d4:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002ac0 <_ZN12CurrentSense12getDCCurrentEf+0x150>
 80029d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80029e8:	e021      	b.n	8002a2e <_ZN12CurrentSense12getDCCurrentEf+0xbe>
    }else{
        i_alpha = 2*(current.a - (current.b - current.c))/3.0;
 80029ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80029ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80029f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a02:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0a:	edc7 7a06 	vstr	s15, [r7, #24]
        i_beta = _2_SQRT3 *( current.b  - current.c );
 8002a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002ac0 <_ZN12CurrentSense12getDCCurrentEf+0x150>
 8002a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a2a:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // if motor angle provided function returns signed value of the current
    // determine the sign of the current
    // sign(atan2(current.q, current.d)) is the same as c.q > 0 ? 1 : -1
    if(motor_electrical_angle)
 8002a2e:	edd7 7a00 	vldr	s15, [r7]
 8002a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3a:	d01f      	beq.n	8002a7c <_ZN12CurrentSense12getDCCurrentEf+0x10c>
        sign = (i_beta * _cos(motor_electrical_angle) - i_alpha*_sin(motor_electrical_angle)) > 0 ? 1 : -1;
 8002a3c:	ed97 0a00 	vldr	s0, [r7]
 8002a40:	f000 fc2a 	bl	8003298 <_Z4_cosf>
 8002a44:	eeb0 7a40 	vmov.f32	s14, s0
 8002a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a4c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002a50:	ed97 0a00 	vldr	s0, [r7]
 8002a54:	f000 fadc 	bl	8003010 <_Z4_sinf>
 8002a58:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a64:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	dd02      	ble.n	8002a78 <_ZN12CurrentSense12getDCCurrentEf+0x108>
 8002a72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a76:	e000      	b.n	8002a7a <_ZN12CurrentSense12getDCCurrentEf+0x10a>
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <_ZN12CurrentSense12getDCCurrentEf+0x158>)
 8002a7a:	61fb      	str	r3, [r7, #28]
    // return current magnitude
    return sign*_sqrt(i_alpha*i_alpha + i_beta*i_beta);
 8002a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	eeb0 0a67 	vmov.f32	s0, s15
 8002a94:	f000 fc9e 	bl	80033d4 <_Z11_sqrtApproxf>
 8002a98:	eeb0 7a40 	vmov.f32	s14, s0
 8002a9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	ecbd 8b02 	vpop	{d8}
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	45904047 	.word	0x45904047
 8002abc:	3fe279a7 	.word	0x3fe279a7
 8002ac0:	45904047 	.word	0x45904047
 8002ac4:	3ff279a7 	.word	0x3ff279a7
 8002ac8:	bf800000 	.word	0xbf800000
 8002acc:	00000000 	.word	0x00000000

08002ad0 <_ZN12CurrentSense14getFOCCurrentsEf>:

// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
DQCurrent_s CurrentSense::getFOCCurrents(float angle_el){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b090      	sub	sp, #64	; 0x40
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	ed87 0a02 	vstr	s0, [r7, #8]
    // read current phase currents
    PhaseCurrent_s current = getPhaseCurrents();
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	4798      	blx	r3
 8002ae8:	eef0 6a40 	vmov.f32	s13, s0
 8002aec:	eeb0 7a60 	vmov.f32	s14, s1
 8002af0:	eef0 7a41 	vmov.f32	s15, s2
 8002af4:	edc7 6a07 	vstr	s13, [r7, #28]
 8002af8:	ed87 7a08 	vstr	s14, [r7, #32]
 8002afc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // calculate clarke transform
    float i_alpha, i_beta;
    if(!current.c){
 8002b00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	d118      	bne.n	8002b40 <_ZN12CurrentSense14getFOCCurrentsEf+0x70>
        // if only two measured currents
        i_alpha = current.a;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        i_beta = _1_SQRT3 * current.a + _2_SQRT3 * current.b;
 8002b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002c10 <_ZN12CurrentSense14getFOCCurrentsEf+0x140>
 8002b1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b22:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b2a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8002c18 <_ZN12CurrentSense14getFOCCurrentsEf+0x148>
 8002b2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8002b3e:	e023      	b.n	8002b88 <_ZN12CurrentSense14getFOCCurrentsEf+0xb8>
    }else{
        i_alpha = 0.6666667*(current.a - (current.b - current.c));
 8002b40:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b44:	edd7 6a08 	vldr	s13, [r7, #32]
 8002b48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b58:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8002c20 <_ZN12CurrentSense14getFOCCurrentsEf+0x150>
 8002b5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b64:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        i_beta = _2_SQRT3 *( current.b  - current.c );
 8002b68:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b78:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8002c18 <_ZN12CurrentSense14getFOCCurrentsEf+0x148>
 8002b7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b84:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }

    // calculate park transform
    float ct = _cos(angle_el);
 8002b88:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b8c:	f000 fb84 	bl	8003298 <_Z4_cosf>
 8002b90:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    float st = _sin(angle_el);
 8002b94:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b98:	f000 fa3a 	bl	8003010 <_Z4_sinf>
 8002b9c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    DQCurrent_s return_current;
    return_current.d = i_alpha * ct + i_beta * st;
 8002ba0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ba4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002bb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	edc7 7a05 	vstr	s15, [r7, #20]
    return_current.q = i_beta * ct - i_alpha * st;
 8002bc0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002bc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bcc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002bd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bdc:	edc7 7a06 	vstr	s15, [r7, #24]
    return return_current;
 8002be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be4:	f107 0214 	add.w	r2, r7, #20
 8002be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bec:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	ee07 2a10 	vmov	s14, r2
 8002bf8:	ee07 3a90 	vmov	s15, r3
}
 8002bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002c00:	eef0 0a67 	vmov.f32	s1, s15
 8002c04:	3740      	adds	r7, #64	; 0x40
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w
 8002c10:	45904047 	.word	0x45904047
 8002c14:	3fe279a7 	.word	0x3fe279a7
 8002c18:	45904047 	.word	0x45904047
 8002c1c:	3ff279a7 	.word	0x3ff279a7
 8002c20:	673aa1bc 	.word	0x673aa1bc
 8002c24:	3fe55555 	.word	0x3fe55555

08002c28 <_ZN8FOCMotorC1Ev>:

#include "FOCMotor.hpp"
/**
 * Default constructor - setting all variables to default values
 */
FOCMotor::FOCMotor()
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <_ZN8FOCMotorC1Ev+0x170>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3354      	adds	r3, #84	; 0x54
 8002c4a:	eeb3 2a08 	vmov.f32	s4, #56	; 0x41c00000  24.0
 8002c4e:	eddf 1a53 	vldr	s3, [pc, #332]	; 8002d9c <_ZN8FOCMotorC1Ev+0x174>
 8002c52:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002c56:	eddf 0a53 	vldr	s1, [pc, #332]	; 8002da4 <_ZN8FOCMotorC1Ev+0x17c>
 8002c5a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fc52 	bl	8003508 <_ZN13PIDControllerC1Efffff>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3378      	adds	r3, #120	; 0x78
 8002c68:	eeb3 2a08 	vmov.f32	s4, #56	; 0x41c00000  24.0
 8002c6c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8002d9c <_ZN8FOCMotorC1Ev+0x174>
 8002c70:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002c74:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002da4 <_ZN8FOCMotorC1Ev+0x17c>
 8002c78:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fc43 	bl	8003508 <_ZN13PIDControllerC1Efffff>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	339c      	adds	r3, #156	; 0x9c
 8002c86:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002da8 <_ZN8FOCMotorC1Ev+0x180>
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fbc6 	bl	800341c <_ZN13LowPassFilterC1Ef>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	33a8      	adds	r3, #168	; 0xa8
 8002c94:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8002da8 <_ZN8FOCMotorC1Ev+0x180>
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fbbf 	bl	800341c <_ZN13LowPassFilterC1Ef>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	33b4      	adds	r3, #180	; 0xb4
 8002ca2:	eeb3 2a08 	vmov.f32	s4, #56	; 0x41c00000  24.0
 8002ca6:	eddf 1a41 	vldr	s3, [pc, #260]	; 8002dac <_ZN8FOCMotorC1Ev+0x184>
 8002caa:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002cae:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002cb2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fc26 	bl	8003508 <_ZN13PIDControllerC1Efffff>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	33d8      	adds	r3, #216	; 0xd8
 8002cc0:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8002cc4:	eddf 1a3a 	vldr	s3, [pc, #232]	; 8002db0 <_ZN8FOCMotorC1Ev+0x188>
 8002cc8:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002ccc:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002cd0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fc17 	bl	8003508 <_ZN13PIDControllerC1Efffff>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	33fc      	adds	r3, #252	; 0xfc
 8002cde:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002da8 <_ZN8FOCMotorC1Ev+0x180>
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fb9a 	bl	800341c <_ZN13LowPassFilterC1Ef>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002cee:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002da0 <_ZN8FOCMotorC1Ev+0x178>
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fb92 	bl	800341c <_ZN13LowPassFilterC1Ef>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <_ZN8FOCMotorC1Ev+0x18c>)
 8002d0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <_ZN8FOCMotorC1Ev+0x190>)
 8002d14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
{
  // maximum angular velocity to be used for positioning
  velocity_limit = DEF_VEL_LIM;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <_ZN8FOCMotorC1Ev+0x194>)
 8002d26:	649a      	str	r2, [r3, #72]	; 0x48
  // maximum voltage to be set to the motor
  voltage_limit = DEF_POWER_SUPPLY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <_ZN8FOCMotorC1Ev+0x198>)
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  // not set on the beginning
  current_limit = DEF_CURRENT_LIM;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44

  // index search velocity
  velocity_index_search = DEF_INDEX_SEARCH_TARGET_VELOCITY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
  // sensor and motor align voltage
  voltage_sensor_align = DEF_VOLTAGE_SENSOR_ALIGN;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <_ZN8FOCMotorC1Ev+0x19c>)
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30

  // default modulation is SinePWM
  foc_modulation = FOCModulationType::SinePWM;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  // default target value
  target = 0;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
  voltage.d = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  voltage.q = 0;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
  // current target values
  current_sp = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
  current.q = 0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  current.d = 0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28

//  //monitor_port
//  monitor_port = nullptr;
  //sensor
  sensor = nullptr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  //current sensor
  current_sense = nullptr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0800b0b4 	.word	0x0800b0b4
 8002d9c:	51ba43b7 	.word	0x51ba43b7
 8002da0:	00000000 	.word	0x00000000
 8002da4:	43960000 	.word	0x43960000
 8002da8:	3ba3d70a 	.word	0x3ba3d70a
 8002dac:	447a0000 	.word	0x447a0000
 8002db0:	501502f9 	.word	0x501502f9
 8002db4:	c640e400 	.word	0xc640e400
 8002db8:	ffffcfc7 	.word	0xffffcfc7
 8002dbc:	41a00000 	.word	0x41a00000
 8002dc0:	41c00000 	.word	0x41c00000
 8002dc4:	40400000 	.word	0x40400000

08002dc8 <_ZN8FOCMotor10linkSensorEP6Sensor>:


/**
	Sensor linking method
*/
void FOCMotor::linkSensor(Sensor* _sensor) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  sensor = _sensor;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_ZN8FOCMotor16linkCurrentSenseEP12CurrentSense>:

/**
	CurrentSense linking method
*/
void FOCMotor::linkCurrentSense(CurrentSense* _current_sense) {
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  current_sense = _current_sense;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_ZN8FOCMotor10shaftAngleEv>:

// shaft angle calculation
float FOCMotor::shaftAngle() {
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	ed2d 8b02 	vpush	{d8}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_angle;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <_ZN8FOCMotor10shaftAngleEv+0x1e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e20:	e023      	b.n	8002e6a <_ZN8FOCMotor10shaftAngleEv+0x66>
  return sensor_direction*LPF_angle(sensor->getAngle()) - sensor_offset;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4610      	mov	r0, r2
 8002e48:	4798      	blx	r3
 8002e4a:	eef0 7a40 	vmov.f32	s15, s0
 8002e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 fafa 	bl	800344c <_ZN13LowPassFilterclEf>
 8002e58:	eef0 7a40 	vmov.f32	s15, s0
 8002e5c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	ecbd 8b02 	vpop	{d8}
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <_ZN8FOCMotor13shaftVelocityEv>:
// shaft velocity calculation
float FOCMotor::shaftVelocity() {
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	ed2d 8b02 	vpush	{d8}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_velocity;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <_ZN8FOCMotor13shaftVelocityEv+0x1e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e94:	e01f      	b.n	8002ed6 <_ZN8FOCMotor13shaftVelocityEv+0x5e>
  return sensor_direction*LPF_velocity(sensor->getVelocity());
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4798      	blx	r3
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 fabf 	bl	800344c <_ZN13LowPassFilterclEf>
 8002ece:	eef0 7a40 	vmov.f32	s15, s0
 8002ed2:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8002ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	ecbd 8b02 	vpop	{d8}
 8002ee2:	bd90      	pop	{r4, r7, pc}

08002ee4 <_ZN8FOCMotor15electricalAngleEv>:

float FOCMotor::electricalAngle(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return _normalizeAngle((shaft_angle + sensor_offset) * pole_pairs - zero_electric_angle);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 8002ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1a:	f000 fa15 	bl	8003348 <_Z15_normalizeAnglef>
 8002f1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZN6Sensor11needsSearchEv>:
 /**
 * returns 0 if it does need search for absolute zero
 * 0 - magnetic sensor (& encoder with index which is found)
 * 1 - encoder with index (with index not found yet)
 */
int Sensor::needsSearch(){
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	0000      	movs	r0, r0
 8002f44:	0000      	movs	r0, r0
	...

08002f48 <_ZN6Sensor11getVelocityEv>:

 /** get current angular velocity (rad/s)*/
float Sensor::getVelocity(){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

    // calculate sample time
    unsigned long now_us = _micros();
 8002f50:	f000 fc33 	bl	80037ba <_Z7_microsv>
 8002f54:	6138      	str	r0, [r7, #16]
    float Ts = (now_us - velocity_calc_timestamp)*1e-6;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f68:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002fe0 <_ZN6Sensor11getVelocityEv+0x98>
 8002f6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f74:	edc7 7a05 	vstr	s15, [r7, #20]
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 8002f78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d908      	bls.n	8002f98 <_ZN6Sensor11getVelocityEv+0x50>
 8002f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	dd01      	ble.n	8002f9c <_ZN6Sensor11getVelocityEv+0x54>
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <_ZN6Sensor11getVelocityEv+0xa0>)
 8002f9a:	617b      	str	r3, [r7, #20]

    // current angle
    float angle_c = getAngle();
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	ed87 0a03 	vstr	s0, [r7, #12]
    // velocity calculation
    float vel = (angle_c - angle_prev)/Ts;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fb4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc0:	edc7 7a02 	vstr	s15, [r7, #8]

    // save variables for future pass
    angle_prev = angle_c;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
    velocity_calc_timestamp = now_us;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
    return vel;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	ee07 3a90 	vmov	s15, r3
}
 8002fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002fe4:	3eb0c6f7 	.word	0x3eb0c6f7
 8002fe8:	3a83126f 	.word	0x3a83126f

08002fec <_ZN6Sensor8setAngleEf>:

void Sensor::setAngle(float angle_value) {
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	ed87 0a00 	vstr	s0, [r7]
	angle_prev = angle_value;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	0000      	movs	r0, r0
 800300c:	0000      	movs	r0, r0
	...

08003010 <_Z4_sinf>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a){
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
  if(a < _PI_2){
 800301a:	edd7 7a01 	vldr	s15, [r7, #4]
 800301e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003022:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8003260 <_Z4_sinf+0x250>
 8003026:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	d539      	bpl.n	80030a4 <_Z4_sinf+0x94>
    //return sine_array[(int)(199.0*( a / (_PI/2.0)))];
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001*sine_array[_round(126.6873* a)];      // int array optimized
 8003030:	edd7 7a01 	vldr	s15, [r7, #4]
 8003034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003038:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8003268 <_Z4_sinf+0x258>
 800303c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003040:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	db0e      	blt.n	8003068 <_Z4_sinf+0x58>
 800304a:	edd7 7a01 	vldr	s15, [r7, #4]
 800304e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003052:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8003268 <_Z4_sinf+0x258>
 8003056:	ee27 7b06 	vmul.f64	d7, d7, d6
 800305a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800305e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003062:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003066:	e00d      	b.n	8003084 <_Z4_sinf+0x74>
 8003068:	edd7 7a01 	vldr	s15, [r7, #4]
 800306c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003070:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8003268 <_Z4_sinf+0x258>
 8003074:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003078:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800307c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003080:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003084:	4b82      	ldr	r3, [pc, #520]	; (8003290 <_Z4_sinf+0x280>)
 8003086:	ee17 2a90 	vmov	r2, s15
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003096:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003270 <_Z4_sinf+0x260>
 800309a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800309e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030a2:	e0d4      	b.n	800324e <_Z4_sinf+0x23e>
  }else if(a < _PI){
 80030a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80030a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ac:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003278 <_Z4_sinf+0x268>
 80030b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	d53f      	bpl.n	800313a <_Z4_sinf+0x12a>
    // return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001*sine_array[398 - _round(126.6873*a)];     // int array optimized
 80030ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80030be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8003268 <_Z4_sinf+0x258>
 80030c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	db12      	blt.n	80030fa <_Z4_sinf+0xea>
 80030d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80030d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030dc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003268 <_Z4_sinf+0x258>
 80030e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030e4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80030e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80030f0:	ee17 3a90 	vmov	r3, s15
 80030f4:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80030f8:	e011      	b.n	800311e <_Z4_sinf+0x10e>
 80030fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003102:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003268 <_Z4_sinf+0x258>
 8003106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800310a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800310e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003112:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003116:	ee17 3a90 	vmov	r3, s15
 800311a:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800311e:	4a5c      	ldr	r2, [pc, #368]	; (8003290 <_Z4_sinf+0x280>)
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800312c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8003270 <_Z4_sinf+0x260>
 8003130:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003134:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003138:	e089      	b.n	800324e <_Z4_sinf+0x23e>
  }else if(a < _3PI_2){
 800313a:	edd7 7a01 	vldr	s15, [r7, #4]
 800313e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003142:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003280 <_Z4_sinf+0x270>
 8003146:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	d53f      	bpl.n	80031d0 <_Z4_sinf+0x1c0>
    // return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[-398 + _round(126.6873*a)];      // int array optimized
 8003150:	edd7 7a01 	vldr	s15, [r7, #4]
 8003154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003158:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8003268 <_Z4_sinf+0x258>
 800315c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003160:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	db12      	blt.n	8003190 <_Z4_sinf+0x180>
 800316a:	edd7 7a01 	vldr	s15, [r7, #4]
 800316e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003172:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8003268 <_Z4_sinf+0x258>
 8003176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800317a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800317e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003182:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003186:	ee17 3a90 	vmov	r3, s15
 800318a:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 800318e:	e011      	b.n	80031b4 <_Z4_sinf+0x1a4>
 8003190:	edd7 7a01 	vldr	s15, [r7, #4]
 8003194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003198:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8003268 <_Z4_sinf+0x258>
 800319c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80031a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80031ac:	ee17 3a90 	vmov	r3, s15
 80031b0:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 80031b4:	4a36      	ldr	r2, [pc, #216]	; (8003290 <_Z4_sinf+0x280>)
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80031c2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003288 <_Z4_sinf+0x278>
 80031c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031ce:	e03e      	b.n	800324e <_Z4_sinf+0x23e>
  } else {
    // return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001*sine_array[796 - _round(126.6873*a)];      // int array optimized
 80031d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031d8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003268 <_Z4_sinf+0x258>
 80031dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	db12      	blt.n	8003210 <_Z4_sinf+0x200>
 80031ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8003268 <_Z4_sinf+0x258>
 80031f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80031fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003202:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003206:	ee17 3a90 	vmov	r3, s15
 800320a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800320e:	e011      	b.n	8003234 <_Z4_sinf+0x224>
 8003210:	edd7 7a01 	vldr	s15, [r7, #4]
 8003214:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003218:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003268 <_Z4_sinf+0x258>
 800321c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003220:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003228:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <_Z4_sinf+0x280>)
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003242:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8003288 <_Z4_sinf+0x278>
 8003246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800324a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
  }
}
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	f3af 8000 	nop.w
 8003260:	5443d6f4 	.word	0x5443d6f4
 8003264:	3ff921fb 	.word	0x3ff921fb
 8003268:	b923a29c 	.word	0xb923a29c
 800326c:	405fabfc 	.word	0x405fabfc
 8003270:	eb1c432d 	.word	0xeb1c432d
 8003274:	3f1a36e2 	.word	0x3f1a36e2
 8003278:	54442eea 	.word	0x54442eea
 800327c:	400921fb 	.word	0x400921fb
 8003280:	7f330d32 	.word	0x7f330d32
 8003284:	4012d97c 	.word	0x4012d97c
 8003288:	eb1c432d 	.word	0xeb1c432d
 800328c:	bf1a36e2 	.word	0xbf1a36e2
 8003290:	0800b0e4 	.word	0x0800b0e4
 8003294:	00000000 	.word	0x00000000

08003298 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a){
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 80032a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032aa:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8003308 <_Z4_cosf+0x70>
 80032ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032b6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80032ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80032be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032c2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003310 <_Z4_cosf+0x78>
 80032c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	dd0a      	ble.n	80032e6 <_Z4_cosf+0x4e>
 80032d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032d8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003310 <_Z4_cosf+0x78>
 80032dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032e4:	e001      	b.n	80032ea <_Z4_cosf+0x52>
 80032e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ea:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 80032ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80032f2:	f7ff fe8d 	bl	8003010 <_Z4_sinf>
 80032f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80032fa:	eeb0 0a67 	vmov.f32	s0, s15
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	f3af 8000 	nop.w
 8003308:	5443d6f4 	.word	0x5443d6f4
 800330c:	3ff921fb 	.word	0x3ff921fb
 8003310:	54442eea 	.word	0x54442eea
 8003314:	401921fb 	.word	0x401921fb

08003318 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003322:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8003326:	edd7 7a03 	vldr	s15, [r7, #12]
 800332a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800332e:	ed97 1b00 	vldr	d1, [r7]
 8003332:	eeb0 0b47 	vmov.f64	d0, d7
 8003336:	f007 fb33 	bl	800a9a0 <fmod>
 800333a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800333e:	eeb0 0b47 	vmov.f64	d0, d7
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_Z15_normalizeAnglef>:


// normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle){
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8003352:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80033a0 <_Z15_normalizeAnglef+0x58>
 8003356:	ed97 0a01 	vldr	s0, [r7, #4]
 800335a:	f7ff ffdd 	bl	8003318 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800335e:	eeb0 7b40 	vmov.f64	d7, d0
 8003362:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003366:	edc7 7a03 	vstr	s15, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800336a:	edd7 7a03 	vldr	s15, [r7, #12]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	db02      	blt.n	800337e <_Z15_normalizeAnglef+0x36>
 8003378:	edd7 7a03 	vldr	s15, [r7, #12]
 800337c:	e009      	b.n	8003392 <_Z15_normalizeAnglef+0x4a>
 800337e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003382:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003386:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80033a0 <_Z15_normalizeAnglef+0x58>
 800338a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800338e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8003392:	eeb0 0a67 	vmov.f32	s0, s15
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f3af 8000 	nop.w
 80033a0:	54442eea 	.word	0x54442eea
 80033a4:	401921fb 	.word	0x401921fb

080033a8 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80033b2:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033be:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80033c6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number) {//low in fat
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	ed87 0a01 	vstr	s0, [r7, #4]
  float y;
  // float x;
  // const float f = 1.5F; // better precision

  // x = number * 0.5F;
  y = number;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60bb      	str	r3, [r7, #8]
  i = * ( long * ) &y;
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  i = 0x5f375a86 - ( i >> 1 );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	105a      	asrs	r2, r3, #1
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <_Z11_sqrtApproxf+0x44>)
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  y = * ( float * ) &i;
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
  // y = y * ( f - ( x * y * y ) ); // better precision
  return number * y;
 80033fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003400:	edd7 7a01 	vldr	s15, [r7, #4]
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	5f375a86 	.word	0x5f375a86

0800341c <_ZN13LowPassFilterC1Ef>:
 *  Ported from: https://github.com/simplefoc/Arduino-FOC/blob/v2.1/src/common/lowpass_filter.cpp
 */

#include "lowpass_filter.hpp"

LowPassFilter::LowPassFilter(float time_constant)
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
    , y_prev(0.0f)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = _micros();
 8003436:	f000 f9c0 	bl	80037ba <_Z7_microsv>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	605a      	str	r2, [r3, #4]
}
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = _micros();
 8003458:	f000 f9af 	bl	80037ba <_Z7_microsv>
 800345c:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003500 <_ZN13LowPassFilterclEf+0xb4>
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003476:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt <= 0.0f || dt > 0.5f) //FIXME, without equals sign at dt < 0.0f the algo won't start.
 800347a:	edd7 7a05 	vldr	s15, [r7, #20]
 800347e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003486:	d908      	bls.n	800349a <_ZN13LowPassFilterclEf+0x4e>
 8003488:	edd7 7a05 	vldr	s15, [r7, #20]
 800348c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	dd01      	ble.n	800349e <_ZN13LowPassFilterclEf+0x52>
        dt = 1e-3f;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <_ZN13LowPassFilterclEf+0xb8>)
 800349c:	617b      	str	r3, [r7, #20]

    float alpha = Tf/(Tf + dt);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 6a00 	vldr	s13, [r3]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b6:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80034c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034d4:	edd7 7a00 	vldr	s15, [r7]
 80034d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e0:	edc7 7a02 	vstr	s15, [r7, #8]

    y_prev = y;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]
    return y;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	ee07 3a90 	vmov	s15, r3
}
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	358637bd 	.word	0x358637bd
 8003504:	3a83126f 	.word	0x3a83126f

08003508 <_ZN13PIDControllerC1Efffff>:
 *  Ported from: https://github.com/simplefoc/Arduino-FOC/blob/v2.1/src/common/pid.cpp
 */

#include "pid.hpp"

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6178      	str	r0, [r7, #20]
 8003510:	ed87 0a04 	vstr	s0, [r7, #16]
 8003514:	edc7 0a03 	vstr	s1, [r7, #12]
 8003518:	ed87 1a02 	vstr	s2, [r7, #8]
 800351c:	edc7 1a01 	vstr	s3, [r7, #4]
 8003520:	ed87 2a00 	vstr	s4, [r7]
    , D(D)
    , output_ramp(ramp)    // output derivative limit [volts/second]
    , limit(limit)         // output supply limit     [volts]
    , integral_prev(0.0)
    , error_prev(0.0)
    , output_prev(0.0)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
{
    timestamp_prev = _micros();
 800355a:	f000 f92e 	bl	80037ba <_Z7_microsv>
 800355e:	4602      	mov	r2, r0
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	61da      	str	r2, [r3, #28]
}
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <_ZN13PIDControllerclEf>:

// PID controller function
float PIDController::operator() (float error){
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = _micros();
 800357c:	f000 f91d 	bl	80037ba <_Z7_microsv>
 8003580:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003592:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8003798 <_ZN13PIDControllerclEf+0x228>
 8003596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800359a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800359e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 80035a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	d908      	bls.n	80035c2 <_ZN13PIDControllerclEf+0x52>
 80035b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c0:	dd01      	ble.n	80035c6 <_ZN13PIDControllerclEf+0x56>
 80035c2:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <_ZN13PIDControllerclEf+0x230>)
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ed97 7a00 	vldr	s14, [r7]
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5*(error + error_prev);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	edd3 7a05 	vldr	s15, [r3, #20]
 80035de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80035e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035f4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80035f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8003602:	edd7 7a00 	vldr	s15, [r7]
 8003606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800360a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800360e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003612:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800361a:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	edd3 7a04 	vldr	s15, [r3, #16]
 8003624:	eef1 7a67 	vneg.f32	s15, s15
 8003628:	ed97 7a05 	vldr	s14, [r7, #20]
 800362c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	d505      	bpl.n	8003642 <_ZN13PIDControllerclEf+0xd2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	edd3 7a04 	vldr	s15, [r3, #16]
 800363c:	eef1 7a67 	vneg.f32	s15, s15
 8003640:	e00f      	b.n	8003662 <_ZN13PIDControllerclEf+0xf2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	edd3 7a04 	vldr	s15, [r3, #16]
 8003648:	ed97 7a05 	vldr	s14, [r7, #20]
 800364c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	dd03      	ble.n	800365e <_ZN13PIDControllerclEf+0xee>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	edd3 7a04 	vldr	s15, [r3, #16]
 800365c:	e001      	b.n	8003662 <_ZN13PIDControllerclEf+0xf2>
 800365e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003662:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	ed93 7a02 	vldr	s14, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003672:	edd7 6a00 	vldr	s13, [r7]
 8003676:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800367a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800367e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003686:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800368a:	ed97 7a06 	vldr	s14, [r7, #24]
 800368e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	ed97 7a04 	vldr	s14, [r7, #16]
 800369a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369e:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80036a8:	eef1 7a67 	vneg.f32	s15, s15
 80036ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80036b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	d505      	bpl.n	80036c6 <_ZN13PIDControllerclEf+0x156>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036c0:	eef1 7a67 	vneg.f32	s15, s15
 80036c4:	e00f      	b.n	80036e6 <_ZN13PIDControllerclEf+0x176>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80036cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80036d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d8:	dd03      	ble.n	80036e2 <_ZN13PIDControllerclEf+0x172>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036e0:	e001      	b.n	80036e6 <_ZN13PIDControllerclEf+0x176>
 80036e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80036e6:	edc7 7a08 	vstr	s15, [r7, #32]

    // limit the acceleration by ramping the output
    float output_rate = (output - output_prev)/Ts;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80036f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80036f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80036f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	edc7 7a03 	vstr	s15, [r7, #12]
    if (output_rate > output_ramp)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	edd3 7a03 	vldr	s15, [r3, #12]
 800370a:	ed97 7a03 	vldr	s14, [r7, #12]
 800370e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	dd0e      	ble.n	8003736 <_ZN13PIDControllerclEf+0x1c6>
        output = output_prev + output_ramp*Ts;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	ed93 7a08 	vldr	s14, [r3, #32]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	edd3 6a03 	vldr	s13, [r3, #12]
 8003724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003730:	edc7 7a08 	vstr	s15, [r7, #32]
 8003734:	e019      	b.n	800376a <_ZN13PIDControllerclEf+0x1fa>
    else if (output_rate < -output_ramp)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	edd3 7a03 	vldr	s15, [r3, #12]
 800373c:	eef1 7a67 	vneg.f32	s15, s15
 8003740:	ed97 7a03 	vldr	s14, [r7, #12]
 8003744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	d50d      	bpl.n	800376a <_ZN13PIDControllerclEf+0x1fa>
        output = output_prev - output_ramp*Ts;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	ed93 7a08 	vldr	s14, [r3, #32]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	edd3 6a03 	vldr	s13, [r3, #12]
 800375a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800375e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003766:	edc7 7a08 	vstr	s15, [r7, #32]

    // saving for the next pass
    integral_prev = integral;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	615a      	str	r2, [r3, #20]
    output_prev = output;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	621a      	str	r2, [r3, #32]
    error_prev = error;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	619a      	str	r2, [r3, #24]
    timestamp_prev = timestamp_now;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	61da      	str	r2, [r3, #28]
    return output;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	ee07 3a90 	vmov	s15, r3
}
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	3728      	adds	r7, #40	; 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
 8003798:	a0b5ed8d 	.word	0xa0b5ed8d
 800379c:	3eb0c6f7 	.word	0x3eb0c6f7
 80037a0:	3a83126f 	.word	0x3a83126f

080037a4 <_Z6_delaym>:

#include "time_utils.h"
#include "stm32h7xx_hal.h"

// function buffering delay()
void _delay(unsigned long ms){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 f9bf 	bl	8004b30 <HAL_Delay>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_Z7_microsv>:

// function buffering _micros()
unsigned long _micros(void){
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0
	return HAL_GetTick()*1000; //get microseconds
 80037be:	f001 f9ab 	bl	8004b18 <HAL_GetTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZN12CurrentSenseC1Ev>:

/**
 *  Current sensing abstract class definition
 * Each current sensoring implementation needs to extend this interface
 */
class CurrentSense{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <_ZN12CurrentSenseC1Ev+0x24>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	711a      	strb	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	0800b098 	.word	0x0800b098

080037f8 <_ZN18InlineCurrentSenseC1Effiii>:
//  - shunt_resistor  - shunt resistor value
//  - gain  - current-sense op-amp gain
//  - phA   - A phase adc pin
//  - phB   - B phase adc pin
//  - phC   - C phase adc pin (optional)
InlineCurrentSense::InlineCurrentSense(float _shunt_resistor, float _gain, int _pinA, int _pinB, int _pinC){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6178      	str	r0, [r7, #20]
 8003800:	ed87 0a04 	vstr	s0, [r7, #16]
 8003804:	edc7 0a03 	vstr	s1, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ffdd 	bl	80037d0 <_ZN12CurrentSenseC1Ev>
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <_ZN18InlineCurrentSenseC1Effiii+0xb4>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]
    pinA = _pinA;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	615a      	str	r2, [r3, #20]
    pinB = _pinB;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	619a      	str	r2, [r3, #24]
    pinC = _pinC;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	61da      	str	r2, [r3, #28]

    shunt_resistor = _shunt_resistor;
 800382e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	ed83 7b08 	vstr	d7, [r3, #32]
    amp_gain  = _gain;
 800383c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    volts_to_amps_ratio = 1.0 /_shunt_resistor / _gain; // volts to amps
 800384a:	edd7 7a04 	vldr	s15, [r7, #16]
 800384e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003852:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003856:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800385a:	edd7 7a03 	vldr	s15, [r7, #12]
 800385e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003862:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
    // gains for each phase
    gain_a = volts_to_amps_ratio;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003872:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003876:	ee17 2a90 	vmov	r2, s15
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	609a      	str	r2, [r3, #8]
    gain_b = volts_to_amps_ratio;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003884:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003888:	ee17 2a90 	vmov	r2, s15
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	60da      	str	r2, [r3, #12]
    gain_c = volts_to_amps_ratio;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800389a:	ee17 2a90 	vmov	r2, s15
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	611a      	str	r2, [r3, #16]
}
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	0800b40c 	.word	0x0800b40c

080038b0 <_ZN18InlineCurrentSense4initEv>:

// Inline sensor init function
void InlineCurrentSense::init(){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
//    // configure ADC variables
//    _configureADC(pinA,pinB);
    // calibrate zero offsets
    calibrateOffsets();
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f804 	bl	80038c6 <_ZN18InlineCurrentSense16calibrateOffsetsEv>

}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_ZN18InlineCurrentSense16calibrateOffsetsEv>:
// Function finding zero offsets of the ADC
void InlineCurrentSense::calibrateOffsets(){
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
    // find adc offset = zero current voltage
    offset_ia = 0;
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    offset_ib = 0;
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    offset_ic = 0;
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    // call built-in ADC calibration function:
    offset_ia = _ADCValueToVoltage(_calibrate_phaseA());
 80038f8:	f7fe f8ae 	bl	8001a58 <_calibrate_phaseA>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fc46 	bl	8004190 <_Z18_ADCValueToVoltagei>
 8003904:	eef0 7a40 	vmov.f32	s15, s0
 8003908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
    offset_ib = _ADCValueToVoltage(_calibrate_phaseB());
 8003912:	f7fe f8e3 	bl	8001adc <_calibrate_phaseB>
 8003916:	4603      	mov	r3, r0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc39 	bl	8004190 <_Z18_ADCValueToVoltagei>
 800391e:	eef0 7a40 	vmov.f32	s15, s0
 8003922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZN18InlineCurrentSense16getPhaseCurrentsEv>:

// read all three phase currents (if possible 2 or 3)
PhaseCurrent_s InlineCurrentSense::getPhaseCurrents(){
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	; 0x38
 8003938:	af00      	add	r7, sp, #0
 800393a:	6178      	str	r0, [r7, #20]
    PhaseCurrent_s current;
    float tmp = _readADCVoltage(pinA);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fbf5 	bl	8004130 <_Z15_readADCVoltagei>
 8003946:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

    current.a = (tmp - offset_ia)*gain_a;// amps
 800394a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800394e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003958:	ee36 6b47 	vsub.f64	d6, d6, d7
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003968:	ee26 7b07 	vmul.f64	d7, d6, d7
 800396c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003970:	edc7 7a07 	vstr	s15, [r7, #28]
    tmp = _readADCVoltage(pinB);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fbd9 	bl	8004130 <_Z15_readADCVoltagei>
 800397e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    current.b = (tmp - offset_ib)*gain_b;// amps
 8003982:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003986:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003990:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80039a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039a8:	edc7 7a08 	vstr	s15, [r7, #32]
    current.c = (!_isset(pinC)) ? 0 : (_readADCVoltage(pinC) - offset_ic)*gain_c; // amps
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <_ZN18InlineCurrentSense16getPhaseCurrentsEv+0xf0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <_ZN18InlineCurrentSense16getPhaseCurrentsEv+0xb4>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fbb8 	bl	8004130 <_Z15_readADCVoltagei>
 80039c0:	eef0 7a40 	vmov.f32	s15, s0
 80039c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80039ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80039e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039e6:	e001      	b.n	80039ec <_ZN18InlineCurrentSense16getPhaseCurrentsEv+0xb8>
 80039e8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003a28 <_ZN18InlineCurrentSense16getPhaseCurrentsEv+0xf4>
 80039ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return current;
 80039f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f4:	f107 021c 	add.w	r2, r7, #28
 80039f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	ee06 1a90 	vmov	s13, r1
 8003a08:	ee07 2a10 	vmov	s14, r2
 8003a0c:	ee07 3a90 	vmov	s15, r3
}
 8003a10:	eeb0 0a66 	vmov.f32	s0, s13
 8003a14:	eef0 0a47 	vmov.f32	s1, s14
 8003a18:	eeb0 1a67 	vmov.f32	s2, s15
 8003a1c:	3738      	adds	r7, #56	; 0x38
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	ffffcfc7 	.word	0xffffcfc7
 8003a28:	00000000 	.word	0x00000000

08003a2c <_ZN18InlineCurrentSense10driverSyncEP10BLDCDriver>:
// Function synchronizing current sense with motor driver.
// for in-line sensing no such thing is necessary
int InlineCurrentSense::driverSync(BLDCDriver *driver){
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    return 1;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	0000      	movs	r0, r0
	...

08003a48 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf>:
// 0 - fail
// 1 - success and nothing changed
// 2 - success but pins reconfigured
// 3 - success but gains inverted
// 4 - success but pins reconfigured and gains inverted
int InlineCurrentSense::driverAlign(BLDCDriver *driver, float voltage){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b09c      	sub	sp, #112	; 0x70
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	ed87 0a01 	vstr	s0, [r7, #4]
    int exit_flag = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    if(skip_align) return exit_flag;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x1e>
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	e360      	b.n	8004128 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6e0>
    PhaseCurrent_s c;
    float ab_ratio = 0;
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    float ac_ratio = 0;
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	65bb      	str	r3, [r7, #88]	; 0x58
    // set phase A active and phases B and C down
    while (1) {
		driver->setPwm(3, 0, 0);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003a7e:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003a82:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003a86:	68b8      	ldr	r0, [r7, #8]
 8003a88:	4798      	blx	r3
		_delay(200);
 8003a8a:	20c8      	movs	r0, #200	; 0xc8
 8003a8c:	f7ff fe8a 	bl	80037a4 <_Z6_delaym>
		c = getPhaseCurrents();
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	4798      	blx	r3
 8003a9c:	eef0 6a40 	vmov.f32	s13, s0
 8003aa0:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa4:	eef0 7a41 	vmov.f32	s15, s2
 8003aa8:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8003aac:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8003ab0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_delay(200);
 8003ab4:	20c8      	movs	r0, #200	; 0xc8
 8003ab6:	f7ff fe75 	bl	80037a4 <_Z6_delaym>

		// read the current 100 times ( arbitrary number )
		for (int i = 0; i < 100; i++) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac0:	2b63      	cmp	r3, #99	; 0x63
 8003ac2:	dc5a      	bgt.n	8003b7a <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x132>
			PhaseCurrent_s c1 = getPhaseCurrents();
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	4798      	blx	r3
 8003ad0:	eef0 6a40 	vmov.f32	s13, s0
 8003ad4:	eeb0 7a60 	vmov.f32	s14, s1
 8003ad8:	eef0 7a41 	vmov.f32	s15, s2
 8003adc:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8003ae0:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8003ae4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			c.a = c.a*0.6 + 0.4*c1.a;
 8003ae8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003af0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8003d28 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e0>
 8003af4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003af8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b00:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8003d30 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e8>
 8003b04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			c.b = c.b*0.6 + 0.4*c1.b;
 8003b14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b1c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8003d28 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e0>
 8003b20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003b24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b2c:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8003d30 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e8>
 8003b30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b3c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			c.c = c.c*0.6 + 0.4*c1.c;
 8003b40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b48:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8003d28 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e0>
 8003b4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003b50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b58:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8003d30 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2e8>
 8003b5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			_delay(3);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f7ff fe19 	bl	80037a4 <_Z6_delaym>
		for (int i = 0; i < 100; i++) {
 8003b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b74:	3301      	adds	r3, #1
 8003b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b78:	e7a1      	b.n	8003abe <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x76>
		}
		driver->setPwm(0, 0, 0);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003b86:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003b8a:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003b8e:	68b8      	ldr	r0, [r7, #8]
 8003b90:	4798      	blx	r3
		// align phase A
//		float ab_ratio = fabs(c.a / c.b);
//		float ac_ratio = c.c ? fabs(c.a / c.c) : 0;
		ab_ratio = fabs(c.a / c.b);
 8003b92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b96:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b9e:	eeb0 0a66 	vmov.f32	s0, s13
 8003ba2:	f7fc fbbd 	bl	8000320 <_ZSt4fabsf>
 8003ba6:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ac_ratio = c.c ? fabs(c.a / c.c) : 0;
 8003baa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	d00c      	beq.n	8003bd2 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x18a>
 8003bb8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc4:	eeb0 0a66 	vmov.f32	s0, s13
 8003bc8:	f7fc fbaa 	bl	8000320 <_ZSt4fabsf>
 8003bcc:	eef0 7a40 	vmov.f32	s15, s0
 8003bd0:	e001      	b.n	8003bd6 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x18e>
 8003bd2:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003bd6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		if (ab_ratio > 1.5 || ab_ratio < 0.7) {
 8003bda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003bde:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bea:	dc0b      	bgt.n	8003c04 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x1bc>
 8003bec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8003d38 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2f0>
 8003bf8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d400      	bmi.n	8003c04 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x1bc>
			break;
		}
    }
 8003c02:	e736      	b.n	8003a72 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2a>


    if( ab_ratio > 1.5 ){ // should be ~2
 8003c04:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003c08:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	dd1a      	ble.n	8003c4c <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x204>
        gain_a *= _sign(c.a);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	d502      	bpl.n	8003c2e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x1e6>
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	e009      	b.n	8003c42 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x1fa>
 8003c2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	bfcc      	ite	gt
 8003c3c:	2201      	movgt	r2, #1
 8003c3e:	2200      	movle	r2, #0
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	fb03 f202 	mul.w	r2, r3, r2
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	e07d      	b.n	8003d48 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x300>
    }else if( ab_ratio < 0.7 ){ // should be ~0.5
 8003c4c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c54:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8003d38 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2f0>
 8003c58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	d526      	bpl.n	8003cb0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x268>
        // switch phase A and B
        int tmp_pinA = pinA;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	653b      	str	r3, [r7, #80]	; 0x50
        pinA = pinB;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	615a      	str	r2, [r3, #20]
        pinB = tmp_pinA;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c74:	619a      	str	r2, [r3, #24]
        gain_a *= _sign(c.b);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d502      	bpl.n	8003c8e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x246>
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	e009      	b.n	8003ca2 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x25a>
 8003c8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	bfcc      	ite	gt
 8003c9c:	2201      	movgt	r2, #1
 8003c9e:	2200      	movle	r2, #0
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	fb03 f202 	mul.w	r2, r3, r2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
        exit_flag = 2; // signal that pins have been switched
 8003caa:	2302      	movs	r3, #2
 8003cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cae:	e04b      	b.n	8003d48 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x300>
    }else if(_isset(pinC) &&  ac_ratio < 0.7 ){ // should be ~0.5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2f8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2d6>
 8003cba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8003d38 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2f0>
 8003cc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d526      	bpl.n	8003d1e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2d6>
        // switch phase A and C
        int tmp_pinA = pinA;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
        pinA = pinC;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	615a      	str	r2, [r3, #20]
        pinC= tmp_pinA;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce2:	61da      	str	r2, [r3, #28]
        gain_a *= _sign(c.c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf4:	d502      	bpl.n	8003cfc <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2b4>
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	e009      	b.n	8003d10 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2c8>
 8003cfc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	bfcc      	ite	gt
 8003d0a:	2201      	movgt	r2, #1
 8003d0c:	2200      	movle	r2, #0
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	fb03 f202 	mul.w	r2, r3, r2
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
        exit_flag = 2;// signal that pins have been switched
 8003d18:	2302      	movs	r3, #2
 8003d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1c:	e014      	b.n	8003d48 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x300>
    }else{
        // error in current sense - phase either not measured or bad connection
        return 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e202      	b.n	8004128 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6e0>
 8003d22:	bf00      	nop
 8003d24:	f3af 8000 	nop.w
 8003d28:	33333333 	.word	0x33333333
 8003d2c:	3fe33333 	.word	0x3fe33333
 8003d30:	9999999a 	.word	0x9999999a
 8003d34:	3fd99999 	.word	0x3fd99999
 8003d38:	66666666 	.word	0x66666666
 8003d3c:	3fe66666 	.word	0x3fe66666
 8003d40:	ffffcfc7 	.word	0xffffcfc7
 8003d44:	00000000 	.word	0x00000000
    }

    // set phase B active and phases A and C down
    float ba_ratio = 0;
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    float bc_ratio = 0;
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48

    while (1) {
		driver->setPwm(0,3,0);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	ed1f 1a07 	vldr	s2, [pc, #-28]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003d60:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003d64:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8003d44 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x2fc>
 8003d68:	68b8      	ldr	r0, [r7, #8]
 8003d6a:	4798      	blx	r3
		_delay(200);
 8003d6c:	20c8      	movs	r0, #200	; 0xc8
 8003d6e:	f7ff fd19 	bl	80037a4 <_Z6_delaym>
		c = getPhaseCurrents();
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	4798      	blx	r3
 8003d7e:	eef0 6a40 	vmov.f32	s13, s0
 8003d82:	eeb0 7a60 	vmov.f32	s14, s1
 8003d86:	eef0 7a41 	vmov.f32	s15, s2
 8003d8a:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8003d8e:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8003d92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		// read the current 100 times
		for (int i = 0; i < 100; i++) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	667b      	str	r3, [r7, #100]	; 0x64
 8003d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9c:	2b63      	cmp	r3, #99	; 0x63
 8003d9e:	dc5a      	bgt.n	8003e56 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x40e>
			PhaseCurrent_s c1 = getPhaseCurrents();
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	4798      	blx	r3
 8003dac:	eef0 6a40 	vmov.f32	s13, s0
 8003db0:	eeb0 7a60 	vmov.f32	s14, s1
 8003db4:	eef0 7a41 	vmov.f32	s15, s2
 8003db8:	edc7 6a07 	vstr	s13, [r7, #28]
 8003dbc:	ed87 7a08 	vstr	s14, [r7, #32]
 8003dc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			c.a = c.a*0.6 + 0.4*c1.a;
 8003dc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dcc:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 80040c8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x680>
 8003dd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003dd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ddc:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 80040d0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x688>
 8003de0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003de4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003de8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			c.b = c.b*0.6 + 0.4*c1.b;
 8003df0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003df4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003df8:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 80040c8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x680>
 8003dfc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e00:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e08:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 80040d0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x688>
 8003e0c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003e10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			c.c = c.c*0.6 + 0.4*c1.c;
 8003e1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e24:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80040c8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x680>
 8003e28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e34:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 80040d0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x688>
 8003e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003e3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			_delay(3);
 8003e48:	2003      	movs	r0, #3
 8003e4a:	f7ff fcab 	bl	80037a4 <_Z6_delaym>
		for (int i = 0; i < 100; i++) {
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e50:	3301      	adds	r3, #1
 8003e52:	667b      	str	r3, [r7, #100]	; 0x64
 8003e54:	e7a1      	b.n	8003d9a <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x352>
		}
		driver->setPwm(0, 0, 0);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 8003e62:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 8003e66:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	4798      	blx	r3
	//    float ba_ratio = fabs(c.b/c.a);
	//    float bc_ratio = c.c ? fabs(c.b / c.c) : 0;
		ba_ratio = fabs(c.b / c.a);
 8003e6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003e72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e7a:	eeb0 0a66 	vmov.f32	s0, s13
 8003e7e:	f7fc fa4f 	bl	8000320 <_ZSt4fabsf>
 8003e82:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		bc_ratio = c.c ? fabs(c.b / c.c) : 0;
 8003e86:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e92:	d00c      	beq.n	8003eae <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x466>
 8003e94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003e98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8003ea4:	f7fc fa3c 	bl	8000320 <_ZSt4fabsf>
 8003ea8:	eef0 7a40 	vmov.f32	s15, s0
 8003eac:	e001      	b.n	8003eb2 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x46a>
 8003eae:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 8003eb2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		if (ba_ratio > 1.5 || ba_ratio < 0.7) {
 8003eb6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003eba:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	dc0b      	bgt.n	8003ee0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x498>
 8003ec8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003ecc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ed0:	ed9f 6b81 	vldr	d6, [pc, #516]	; 80040d8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x690>
 8003ed4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	d400      	bmi.n	8003ee0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x498>
			break;
		}
    }
 8003ede:	e739      	b.n	8003d54 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x30c>

     if( ba_ratio > 1.5 ){ // should be ~2
 8003ee0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003ee4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	dd1a      	ble.n	8003f28 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x4e0>
        gain_b *= _sign(c.b);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	d502      	bpl.n	8003f0a <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x4c2>
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	e009      	b.n	8003f1e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x4d6>
 8003f0a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	bfcc      	ite	gt
 8003f18:	2201      	movgt	r2, #1
 8003f1a:	2200      	movle	r2, #0
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	fb03 f202 	mul.w	r2, r3, r2
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e06a      	b.n	8003ffe <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5b6>
    }else if( ba_ratio < 0.7 ){ // it should be ~0.5
 8003f28:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80040d8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x690>
 8003f34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d526      	bpl.n	8003f8c <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x544>
        // switch phase A and B
        int tmp_pinB = pinB;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
        pinB = pinA;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	619a      	str	r2, [r3, #24]
        pinA = tmp_pinB;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f50:	615a      	str	r2, [r3, #20]
        gain_b *= _sign(c.a);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	d502      	bpl.n	8003f6a <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x522>
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	e009      	b.n	8003f7e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x536>
 8003f6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f76:	bfcc      	ite	gt
 8003f78:	2201      	movgt	r2, #1
 8003f7a:	2200      	movle	r2, #0
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	fb03 f202 	mul.w	r2, r3, r2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	60da      	str	r2, [r3, #12]
        exit_flag = 2; // signal that pins have been switched
 8003f86:	2302      	movs	r3, #2
 8003f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f8a:	e038      	b.n	8003ffe <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5b6>
    }else if(_isset(pinC) && bc_ratio < 0.7 ){ // should be ~0.5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x69c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5b2>
 8003f96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80040d8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x690>
 8003fa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	d526      	bpl.n	8003ffa <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5b2>
        // switch phase A and C
        int tmp_pinB = pinB;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	647b      	str	r3, [r7, #68]	; 0x44
        pinB = pinC;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	619a      	str	r2, [r3, #24]
        pinC = tmp_pinB;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fbe:	61da      	str	r2, [r3, #28]
        gain_b *= _sign(c.c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d502      	bpl.n	8003fd8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x590>
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	e009      	b.n	8003fec <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5a4>
 8003fd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe4:	bfcc      	ite	gt
 8003fe6:	2201      	movgt	r2, #1
 8003fe8:	2200      	movle	r2, #0
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	fb03 f202 	mul.w	r2, r3, r2
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	60da      	str	r2, [r3, #12]
        exit_flag = 2; // signal that pins have been switched
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff8:	e001      	b.n	8003ffe <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x5b6>
    }else{
        // error in current sense - phase either not measured or bad connection
        return 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e094      	b.n	8004128 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6e0>
    }

    // if phase C measured
    if(_isset(pinC)){
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x69c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d07f      	beq.n	8004108 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6c0>
        // set phase B active and phases A and C down
    	driver->setPwm(0, 0, voltage);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	ed97 1a01 	vldr	s2, [r7, #4]
 8004014:	eddf 0a32 	vldr	s1, [pc, #200]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 8004018:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 800401c:	68b8      	ldr	r0, [r7, #8]
 800401e:	4798      	blx	r3
        _delay(200);
 8004020:	20c8      	movs	r0, #200	; 0xc8
 8004022:	f7ff fbbf 	bl	80037a4 <_Z6_delaym>
        c = getPhaseCurrents();
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	4798      	blx	r3
 8004032:	eef0 6a40 	vmov.f32	s13, s0
 8004036:	eeb0 7a60 	vmov.f32	s14, s1
 800403a:	eef0 7a41 	vmov.f32	s15, s2
 800403e:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8004042:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8004046:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        // read the adc voltage 500 times ( arbitrary number )
        for (int i = 0; i < 50; i++) {
 800404a:	2300      	movs	r3, #0
 800404c:	663b      	str	r3, [r7, #96]	; 0x60
 800404e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004050:	2b31      	cmp	r3, #49	; 0x31
 8004052:	dc21      	bgt.n	8004098 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x650>
            PhaseCurrent_s c1 = getPhaseCurrents();
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	4798      	blx	r3
 8004060:	eef0 6a40 	vmov.f32	s13, s0
 8004064:	eeb0 7a60 	vmov.f32	s14, s1
 8004068:	eef0 7a41 	vmov.f32	s15, s2
 800406c:	edc7 6a04 	vstr	s13, [r7, #16]
 8004070:	ed87 7a05 	vstr	s14, [r7, #20]
 8004074:	edc7 7a06 	vstr	s15, [r7, #24]
            c.c = (c.c+c1.c)/50.0;
 8004078:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800407c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004084:	eddf 6a18 	vldr	s13, [pc, #96]	; 80040e8 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6a0>
 8004088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800408c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        for (int i = 0; i < 50; i++) {
 8004090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004092:	3301      	adds	r3, #1
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
 8004096:	e7da      	b.n	800404e <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x606>
        }
        driver->setPwm(0, 0, 0);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 80040a4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 80040a8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80040e0 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x698>
 80040ac:	68b8      	ldr	r0, [r7, #8]
 80040ae:	4798      	blx	r3
        gain_c *= _sign(c.c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	d514      	bpl.n	80040ec <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6a4>
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	e01b      	b.n	8004100 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6b8>
 80040c8:	33333333 	.word	0x33333333
 80040cc:	3fe33333 	.word	0x3fe33333
 80040d0:	9999999a 	.word	0x9999999a
 80040d4:	3fd99999 	.word	0x3fd99999
 80040d8:	66666666 	.word	0x66666666
 80040dc:	3fe66666 	.word	0x3fe66666
 80040e0:	00000000 	.word	0x00000000
 80040e4:	ffffcfc7 	.word	0xffffcfc7
 80040e8:	42480000 	.word	0x42480000
 80040ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f8:	bfcc      	ite	gt
 80040fa:	2201      	movgt	r2, #1
 80040fc:	2200      	movle	r2, #0
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	fb03 f202 	mul.w	r2, r3, r2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	611a      	str	r2, [r3, #16]
    }

    if(gain_a < 0 || gain_b < 0 || gain_c < 0) exit_flag +=2;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db07      	blt.n	8004120 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6d8>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	db03      	blt.n	8004120 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6d8>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da02      	bge.n	8004126 <_ZN18InlineCurrentSense11driverAlignEP10BLDCDriverf+0x6de>
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	3302      	adds	r3, #2
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
    // 0 - fail
    // 1 - success and nothing changed
    // 2 - success but pins reconfigured
    // 3 - success but gains inverted
    // 4 - success but pins reconfigured and gains inverted
    return exit_flag;
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004128:	4618      	mov	r0, r3
 800412a:	3770      	adds	r7, #112	; 0x70
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <_Z15_readADCVoltagei>:
// adc counts to voltage conversion ratio
// some optimizing for faster execution
#define _ADC_CONV ( (_ADC_VOLTAGE) / (_ADC_RESOLUTION) )

// function reading an ADC value and returning the read voltage
float _readADCVoltage(const int pin){
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	int raw_adc;
	if (pin == phaseA) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d108      	bne.n	8004150 <_Z15_readADCVoltagei+0x20>
		raw_adc = _readADCVoltage_pinA();
 800413e:	f7fd fc49 	bl	80019d4 <_readADCVoltage_pinA>
 8004142:	eef0 7a40 	vmov.f32	s15, s0
 8004146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414a:	ee17 3a90 	vmov	r3, s15
 800414e:	60fb      	str	r3, [r7, #12]
	}
	if (pin == phaseB) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d108      	bne.n	8004168 <_Z15_readADCVoltagei+0x38>
		raw_adc = _readADCVoltage_pinB();
 8004156:	f7fd fc5d 	bl	8001a14 <_readADCVoltage_pinB>
 800415a:	eef0 7a40 	vmov.f32	s15, s0
 800415e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004162:	ee17 3a90 	vmov	r3, s15
 8004166:	60fb      	str	r3, [r7, #12]
	}
  return raw_adc * _ADC_CONV;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004172:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004188 <_Z15_readADCVoltagei+0x58>
 8004176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800417a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800417e:	eeb0 0a67 	vmov.f32	s0, s15
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	66666666 	.word	0x66666666
 800418c:	3f0a6666 	.word	0x3f0a6666

08004190 <_Z18_ADCValueToVoltagei>:

float _ADCValueToVoltage(int raw_adc) {
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	return raw_adc * _ADC_CONV;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80041a2:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80041c0 <_Z18_ADCValueToVoltagei+0x30>
 80041a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80041ae:	eeb0 0a67 	vmov.f32	s0, s15
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	f3af 8000 	nop.w
 80041c0:	66666666 	.word	0x66666666
 80041c4:	3f0a6666 	.word	0x3f0a6666

080041c8 <_ZN10BLDCDriverC1Ev>:

#ifndef BLDCDRIVER_HPP_
#define BLDCDRIVER_HPP_


class BLDCDriver{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <_ZN10BLDCDriverC1Ev+0x1c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	0800b440 	.word	0x0800b440

080041e8 <_ZN14BLDCDriver3PWMC1Eiiii>:


#include "BLDCDriver3PWM.hpp"
#include "main.h"

BLDCDriver3PWM::BLDCDriver3PWM(int phA, int phB, int phC, int en1) {//, int en2, int en3){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ffe5 	bl	80041c8 <_ZN10BLDCDriverC1Ev>
 80041fe:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <_ZN14BLDCDriver3PWMC1Eiiii+0x4c>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]
  // Pin initialization
  pwmA = phA;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	61da      	str	r2, [r3, #28]
  pwmB = phB;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]
  pwmC = phC;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

  // enable_pin pin
  enableA_pin = en1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
//  enableB_pin = en2;
//  enableC_pin = en3;

  // default power-supply value
  voltage_power_supply = DEF_POWER_SUPPLY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a06      	ldr	r2, [pc, #24]	; (8004238 <_ZN14BLDCDriver3PWMC1Eiiii+0x50>)
 8004220:	609a      	str	r2, [r3, #8]
  voltage_limit = NOT_SET;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <_ZN14BLDCDriver3PWMC1Eiiii+0x54>)
 8004226:	60da      	str	r2, [r3, #12]

}
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	0800b428 	.word	0x0800b428
 8004238:	41c00000 	.word	0x41c00000
 800423c:	c640e400 	.word	0xc640e400

08004240 <_ZN14BLDCDriver3PWM6enableEv>:

// enable motor driver
void  BLDCDriver3PWM::enable(){
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    // enable_pin the driver - if enable_pin pin available
	HAL_GPIO_WritePin(Enable_Pin8_GPIO_Port, Enable_Pin8_Pin, GPIO_PIN_SET);
 8004248:	2201      	movs	r2, #1
 800424a:	2108      	movs	r1, #8
 800424c:	4809      	ldr	r0, [pc, #36]	; (8004274 <_ZN14BLDCDriver3PWM6enableEv+0x34>)
 800424e:	f002 fc9d 	bl	8006b8c <HAL_GPIO_WritePin>
    // set zero to PWM
    setPwm(0,0,0);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8004278 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 800425e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8004278 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 8004262:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004278 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	58021400 	.word	0x58021400
 8004278:	00000000 	.word	0x00000000

0800427c <_ZN14BLDCDriver3PWM7disableEv>:

// disable motor driver
void BLDCDriver3PWM::disable()
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  // set zero to PWM
	setPwm(0, 0, 0);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80042b0 <_ZN14BLDCDriver3PWM7disableEv+0x34>
 8004290:	eddf 0a07 	vldr	s1, [pc, #28]	; 80042b0 <_ZN14BLDCDriver3PWM7disableEv+0x34>
 8004294:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80042b0 <_ZN14BLDCDriver3PWM7disableEv+0x34>
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
	// disable the driver - if enable_pin pin available
	HAL_GPIO_WritePin(Enable_Pin8_GPIO_Port, Enable_Pin8_Pin, GPIO_PIN_RESET);
 800429c:	2200      	movs	r2, #0
 800429e:	2108      	movs	r1, #8
 80042a0:	4804      	ldr	r0, [pc, #16]	; (80042b4 <_ZN14BLDCDriver3PWM7disableEv+0x38>)
 80042a2:	f002 fc73 	bl	8006b8c <HAL_GPIO_WritePin>

}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	00000000 	.word	0x00000000
 80042b4:	58021400 	.word	0x58021400

080042b8 <_ZN14BLDCDriver3PWM4initEv>:

// init hardware pins
int BLDCDriver3PWM::init() {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	  // a bit of separation
	  _delay(1000);
 80042c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042c4:	f7ff fa6e 	bl	80037a4 <_Z6_delaym>
	//  pinMode(pwmC, OUTPUT);
	//  if( _isset(enableA_pin)) pinMode(enableA_pin, OUTPUT);


	  // sanity check for the voltage limit configuration
	  if(voltage_limit == NOT_SET || voltage_limit > voltage_power_supply) voltage_limit =  voltage_power_supply;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80042ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004304 <_ZN14BLDCDriver3PWM4initEv+0x4c>
 80042d2:	eef4 7a47 	vcmp.f32	s15, s14
 80042d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042da:	d00a      	beq.n	80042f2 <_ZN14BLDCDriver3PWM4initEv+0x3a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	ed93 7a03 	vldr	s14, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	dd03      	ble.n	80042fa <_ZN14BLDCDriver3PWM4initEv+0x42>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]

	  // Set the pwm frequency to the pins
	  // hardware specific function - depending on driver and mcu
	 // _configure3PWM(pwm_frequency, pwmA, pwmB, pwmC);
	  return 0;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	c640e400 	.word	0xc640e400

08004308 <_ZN14BLDCDriver3PWM6setPwmEfff>:
//    digitalWrite(enableC_pin, sc == _HIGH_IMPEDANCE ? LOW : HIGH);
//  }
//}

// Set voltage to the pwm pin
void BLDCDriver3PWM::setPwm(float Ua, float Ub, float Uc) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	ed87 0a02 	vstr	s0, [r7, #8]
 8004314:	edc7 0a01 	vstr	s1, [r7, #4]
 8004318:	ed87 1a00 	vstr	s2, [r7]

  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0, voltage_limit);
 800431c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	d502      	bpl.n	8004330 <_ZN14BLDCDriver3PWM6setPwmEfff+0x28>
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e00d      	b.n	800434c <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	edd3 7a03 	vldr	s15, [r3, #12]
 8004336:	ed97 7a02 	vldr	s14, [r7, #8]
 800433a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	dd02      	ble.n	800434a <_ZN14BLDCDriver3PWM6setPwmEfff+0x42>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	e000      	b.n	800434c <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	60bb      	str	r3, [r7, #8]
  Ub = _constrain(Ub, 0.0, voltage_limit);
 800434e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	d502      	bpl.n	8004362 <_ZN14BLDCDriver3PWM6setPwmEfff+0x5a>
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e00d      	b.n	800437e <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	edd3 7a03 	vldr	s15, [r3, #12]
 8004368:	ed97 7a01 	vldr	s14, [r7, #4]
 800436c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	dd02      	ble.n	800437c <_ZN14BLDCDriver3PWM6setPwmEfff+0x74>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	e000      	b.n	800437e <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	607b      	str	r3, [r7, #4]
  Uc = _constrain(Uc, 0.0, voltage_limit);
 8004380:	edd7 7a00 	vldr	s15, [r7]
 8004384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	d502      	bpl.n	8004394 <_ZN14BLDCDriver3PWM6setPwmEfff+0x8c>
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e00d      	b.n	80043b0 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	edd3 7a03 	vldr	s15, [r3, #12]
 800439a:	ed97 7a00 	vldr	s14, [r7]
 800439e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	dd02      	ble.n	80043ae <_ZN14BLDCDriver3PWM6setPwmEfff+0xa6>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	e000      	b.n	80043b0 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	603b      	str	r3, [r7, #0]
  // calculate duty cycle
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0 , 1.0 );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80043b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d502      	bpl.n	80043d0 <_ZN14BLDCDriver3PWM6setPwmEfff+0xc8>
 80043ca:	eddf 7a47 	vldr	s15, [pc, #284]	; 80044e8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1e0>
 80043ce:	e017      	b.n	8004400 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80043d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80043da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	dd02      	ble.n	80043f2 <_ZN14BLDCDriver3PWM6setPwmEfff+0xea>
 80043ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80043f0:	e006      	b.n	8004400 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80043f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	edc3 7a04 	vstr	s15, [r3, #16]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0 , 1.0 );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	ed93 7a02 	vldr	s14, [r3, #8]
 800440c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	d502      	bpl.n	8004424 <_ZN14BLDCDriver3PWM6setPwmEfff+0x11c>
 800441e:	eddf 7a32 	vldr	s15, [pc, #200]	; 80044e8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1e0>
 8004422:	e017      	b.n	8004454 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	ed93 7a02 	vldr	s14, [r3, #8]
 800442a:	edd7 6a01 	vldr	s13, [r7, #4]
 800442e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	dd02      	ble.n	8004446 <_ZN14BLDCDriver3PWM6setPwmEfff+0x13e>
 8004440:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004444:	e006      	b.n	8004454 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	ed93 7a02 	vldr	s14, [r3, #8]
 800444c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	edc3 7a05 	vstr	s15, [r3, #20]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0 , 1.0 );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004460:	edd7 6a00 	vldr	s13, [r7]
 8004464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004470:	d502      	bpl.n	8004478 <_ZN14BLDCDriver3PWM6setPwmEfff+0x170>
 8004472:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80044e8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1e0>
 8004476:	e017      	b.n	80044a8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	ed93 7a02 	vldr	s14, [r3, #8]
 800447e:	edd7 6a00 	vldr	s13, [r7]
 8004482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800448a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	dd02      	ble.n	800449a <_ZN14BLDCDriver3PWM6setPwmEfff+0x192>
 8004494:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004498:	e006      	b.n	80044a8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	ed93 7a02 	vldr	s14, [r3, #8]
 80044a0:	edd7 6a00 	vldr	s13, [r7]
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	edc3 7a06 	vstr	s15, [r3, #24]

  // hardware specific writing
  // hardware specific function - depending on driver and mcu
  _writeDutyCycle3PWM(dc_a, dc_b, dc_c, pwmA, pwmB, pwmC);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	69d8      	ldr	r0, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a19      	ldr	r1, [r3, #32]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	461a      	mov	r2, r3
 80044ce:	eeb0 1a66 	vmov.f32	s2, s13
 80044d2:	eef0 0a47 	vmov.f32	s1, s14
 80044d6:	eeb0 0a67 	vmov.f32	s0, s15
 80044da:	f7fd fa33 	bl	8001944 <_writeDutyCycle3PWM>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00000000 	.word	0x00000000

080044ec <_ZN6SensorC1Ev>:

/**
 *  Sensor abstract class definition
 * Each sensor needs to have these functions implemented
 */
class Sensor{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	4a08      	ldr	r2, [pc, #32]	; (8004518 <_ZN6SensorC1Ev+0x2c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	0800b0d4 	.word	0x0800b0d4

0800451c <_ZN7EncoderC1Eiifi>:
  - encA, encB    - encoder A and B pins
  - cpr           - counts per rotation number (cpm=ppm*4)
  - index pin     - (optional input)
*/

Encoder::Encoder(int _encA, int _encB , float _ppr, int _index){
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6178      	str	r0, [r7, #20]
 8004524:	6139      	str	r1, [r7, #16]
 8004526:	60fa      	str	r2, [r7, #12]
 8004528:	ed87 0a02 	vstr	s0, [r7, #8]
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ffdb 	bl	80044ec <_ZN6SensorC1Ev>
 8004536:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <_ZN7EncoderC1Eiifi+0x98>)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  // Encoder measurement structure init
  // hardware pins
  pinA = _encA;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	60da      	str	r2, [r3, #12]
  pinB = _encB;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	611a      	str	r2, [r3, #16]
  // counter setup
  pulse_counter = 0;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	621a      	str	r2, [r3, #32]
  pulse_timestamp = 0;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

  cpr = _ppr;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	61da      	str	r2, [r3, #28]
  A_active = 0;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
  B_active = 0;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	62da      	str	r2, [r3, #44]	; 0x2c
  I_active = 0;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  // index pin
  index_pin = _index; // its 0 if not used
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	615a      	str	r2, [r3, #20]

  // velocity calculation variables
  prev_Th = 0;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  pulse_per_second = 0;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c
  prev_pulse_counter = 0;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
  prev_timestamp_us = _micros();
 8004590:	f7ff f913 	bl	80037ba <_Z7_microsv>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44

  // extern pullup as default
  pullup = Pullup::EXTERN;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2201      	movs	r2, #1
 80045a0:	761a      	strb	r2, [r3, #24]
  // enable quadrature encoder by default
  quadrature = Quadrature::ON;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	765a      	strb	r2, [r3, #25]
}
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	0800b458 	.word	0x0800b458

080045b8 <_ZN7Encoder7handleAEv>:

//  Encoder interrupt callback functions
// A channel
void Encoder::handleA() {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	unsigned short A = HAL_GPIO_ReadPin(EncoderAU_Pin3_GPIO_Port, EncoderAU_Pin3_Pin);
 80045c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045c4:	4815      	ldr	r0, [pc, #84]	; (800461c <_ZN7Encoder7handleAEv+0x64>)
 80045c6:	f002 fac9 	bl	8006b5c <HAL_GPIO_ReadPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	81fb      	strh	r3, [r7, #14]

	if (A != A_active) {
 80045ce:	89fa      	ldrh	r2, [r7, #14]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <_ZN7Encoder7handleAEv+0x5a>
		pulse_counter += (A_active == B_active) ? 1 : -1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d101      	bne.n	80045f2 <_ZN7Encoder7handleAEv+0x3a>
 80045ee:	2201      	movs	r2, #1
 80045f0:	e001      	b.n	80045f6 <_ZN7Encoder7handleAEv+0x3e>
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]
		pulse_timestamp = _micros();
 8004600:	f7ff f8db 	bl	80037ba <_Z7_microsv>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
		A_active = A;
 800460c:	89fa      	ldrh	r2, [r7, #14]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	58021000 	.word	0x58021000

08004620 <_ZN7Encoder7handleBEv>:
// B channel
void Encoder::handleB() {
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	unsigned short B = HAL_GPIO_ReadPin(EncoderBV_Pin2_GPIO_Port, EncoderBV_Pin2_Pin);
 8004628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800462c:	4815      	ldr	r0, [pc, #84]	; (8004684 <_ZN7Encoder7handleBEv+0x64>)
 800462e:	f002 fa95 	bl	8006b5c <HAL_GPIO_ReadPin>
 8004632:	4603      	mov	r3, r0
 8004634:	81fb      	strh	r3, [r7, #14]

	if (B != B_active) {
 8004636:	89fa      	ldrh	r2, [r7, #14]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	429a      	cmp	r2, r3
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d017      	beq.n	800467a <_ZN7Encoder7handleBEv+0x5a>
		pulse_counter += (A_active != B_active) ? 1 : -1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	429a      	cmp	r2, r3
 8004654:	d001      	beq.n	800465a <_ZN7Encoder7handleBEv+0x3a>
 8004656:	2201      	movs	r2, #1
 8004658:	e001      	b.n	800465e <_ZN7Encoder7handleBEv+0x3e>
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	441a      	add	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	621a      	str	r2, [r3, #32]
		pulse_timestamp = _micros();
 8004668:	f7ff f8a7 	bl	80037ba <_Z7_microsv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
		B_active = B;
 8004674:	89fa      	ldrh	r2, [r7, #14]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	58021800 	.word	0x58021800

08004688 <_ZN7Encoder11handleIndexEv>:

// I channel (index)
void Encoder::handleIndex() {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	if (hasIndex()) {
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f941 	bl	8004918 <_ZN7Encoder8hasIndexEv>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d044      	beq.n	8004730 <_ZN7Encoder11handleIndexEv+0xa8>
		unsigned short I = HAL_GPIO_ReadPin(EncoderIW_Pin11_GPIO_Port, EncoderIW_Pin11_Pin);
 80046a6:	2120      	movs	r1, #32
 80046a8:	4823      	ldr	r0, [pc, #140]	; (8004738 <_ZN7Encoder11handleIndexEv+0xb0>)
 80046aa:	f002 fa57 	bl	8006b5c <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	81fb      	strh	r3, [r7, #14]

		if (I && !I_active) {
 80046b2:	89fb      	ldrh	r3, [r7, #14]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <_ZN7Encoder11handleIndexEv+0x3c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <_ZN7Encoder11handleIndexEv+0x3c>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <_ZN7Encoder11handleIndexEv+0x3e>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02f      	beq.n	800472a <_ZN7Encoder11handleIndexEv+0xa2>
			index_found = 1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			//align encoder on each index
			long tmp = pulse_counter;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	60bb      	str	r3, [r7, #8]
			//current counter value
			pulse_counter = round((double)pulse_counter / (double)cpr)*cpr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	ee07 3a90 	vmov	s15, r3
 80046e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80046ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046ee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80046f2:	eeb0 0b45 	vmov.f64	d0, d5
 80046f6:	f006 f90b 	bl	800a910 <round>
 80046fa:	eeb0 6b40 	vmov.f64	d6, d0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	edd3 7a07 	vldr	s15, [r3, #28]
 8004704:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004708:	ee26 7b07 	vmul.f64	d7, d6, d7
 800470c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004710:	ee17 2a90 	vmov	r2, s15
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	621a      	str	r2, [r3, #32]
			//preserve relative speed
			prev_pulse_counter += pulse_counter - tmp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
		}
		I_active = I;
 800472a:	89fa      	ldrh	r2, [r7, #14]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	58020400 	.word	0x58020400
 800473c:	00000000 	.word	0x00000000

08004740 <_ZN7Encoder8getAngleEv>:
//}

/*
	Shaft angle calculation
*/
float Encoder::getAngle(){
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  return  _2PI * (pulse_counter) / ((float)cpr);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004754:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004780 <_ZN7Encoder8getAngleEv+0x40>
 8004758:	ee27 5b06 	vmul.f64	d5, d7, d6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004762:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004766:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800476a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800476e:	eeb0 0a67 	vmov.f32	s0, s15
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	f3af 8000 	nop.w
 8004780:	54442eea 	.word	0x54442eea
 8004784:	401921fb 	.word	0x401921fb

08004788 <_ZN7Encoder11getVelocityEv>:
/*
  Shaft velocity calculation
  function using mixed time and frequency measurement technique
*/
float Encoder::getVelocity(){
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  // timestamp
  long timestamp_us = _micros();
 8004790:	f7ff f813 	bl	80037ba <_Z7_microsv>
 8004794:	4603      	mov	r3, r0
 8004796:	61bb      	str	r3, [r7, #24]
  // sampling time calculation
  float Ts = (timestamp_us - prev_timestamp_us) * 1e-6;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047a8:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80048c8 <_ZN7Encoder11getVelocityEv+0x140>
 80047ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80047b4:	edc7 7a07 	vstr	s15, [r7, #28]
  // quick fix for strange cases (micros overflow)
  if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 80047b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80047bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d908      	bls.n	80047d8 <_ZN7Encoder11getVelocityEv+0x50>
 80047c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80047ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	dd01      	ble.n	80047dc <_ZN7Encoder11getVelocityEv+0x54>
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <_ZN7Encoder11getVelocityEv+0x158>)
 80047da:	61fb      	str	r3, [r7, #28]

  // time from last impulse
  float Th = (timestamp_us - pulse_timestamp) * 1e-6;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047ec:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80048c8 <_ZN7Encoder11getVelocityEv+0x140>
 80047f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80047f8:	edc7 7a05 	vstr	s15, [r7, #20]
  long dN = pulse_counter - prev_pulse_counter;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	613b      	str	r3, [r7, #16]
  // dN - impulses received
  // Ts - sampling time - time in between function calls
  // Th - time from last impulse
  // Th_1 - time form last impulse of the previous call
  // only increment if some impulses received
  float dt = Ts + prev_Th - Th;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800480e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004816:	edd7 7a05 	vldr	s15, [r7, #20]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	edc7 7a03 	vstr	s15, [r7, #12]
  pulse_per_second = (dN != 0 && dt > Ts/2) ? dN / dt : pulse_per_second;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d016      	beq.n	8004856 <_ZN7Encoder11getVelocityEv+0xce>
 8004828:	ed97 7a07 	vldr	s14, [r7, #28]
 800482c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004834:	ed97 7a03 	vldr	s14, [r7, #12]
 8004838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	dd09      	ble.n	8004856 <_ZN7Encoder11getVelocityEv+0xce>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800484c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004854:	e002      	b.n	800485c <_ZN7Encoder11getVelocityEv+0xd4>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // if more than 0.05 passed in between impulses
  if ( Th > 0.1) pulse_per_second = 0;
 8004862:	edd7 7a05 	vldr	s15, [r7, #20]
 8004866:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800486a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80048d0 <_ZN7Encoder11getVelocityEv+0x148>
 800486e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	dd03      	ble.n	8004880 <_ZN7Encoder11getVelocityEv+0xf8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c

  // velocity calculation
  float velocity = pulse_per_second / ((float)cpr) * (_2PI);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	ed93 7a07 	vldr	s14, [r3, #28]
 800488c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004894:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80048d8 <_ZN7Encoder11getVelocityEv+0x150>
 8004898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800489c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048a0:	edc7 7a02 	vstr	s15, [r7, #8]

  // save variables for next pass
  prev_timestamp_us = timestamp_us;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
  // save velocity calculation variables
  prev_Th = Th;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
  prev_pulse_counter = pulse_counter;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
  return velocity;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	ee07 3a90 	vmov	s15, r3
}
 80048be:	eeb0 0a67 	vmov.f32	s0, s15
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80048cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80048d0:	9999999a 	.word	0x9999999a
 80048d4:	3fb99999 	.word	0x3fb99999
 80048d8:	54442eea 	.word	0x54442eea
 80048dc:	401921fb 	.word	0x401921fb
 80048e0:	3a83126f 	.word	0x3a83126f

080048e4 <_ZN7Encoder11needsSearchEv>:

// getter for index pin
// return -1 if no index
int Encoder::needsSearch(){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return hasIndex() && !index_found;
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f813 	bl	8004918 <_ZN7Encoder8hasIndexEv>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <_ZN7Encoder11needsSearchEv+0x2a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f083 0301 	eor.w	r3, r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <_ZN7Encoder11needsSearchEv+0x2a>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <_ZN7Encoder11needsSearchEv+0x2c>
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <_ZN7Encoder8hasIndexEv>:

// private function used to determine if encoder has index
int Encoder::hasIndex(){
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  return index_pin != 0;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <_ZN7Encoder8setAngleEf>:

void Encoder::setAngle(float pulse_value) {
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	ed87 0a00 	vstr	s0, [r7]
	pulse_counter = 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_ZN7Encoder4initEv>:

// encoder initialisation of the hardware pins
// and calculation variables
void Encoder::init(){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  // counter setup
  pulse_counter = 0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	621a      	str	r2, [r3, #32]
  pulse_timestamp = _micros();
 8004966:	f7fe ff28 	bl	80037ba <_Z7_microsv>
 800496a:	4603      	mov	r3, r0
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
  // velocity calculation variables
  prev_Th = 0;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
  pulse_per_second = 0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c
  prev_pulse_counter = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
  prev_timestamp_us = _micros();
 8004988:	f7fe ff17 	bl	80037ba <_Z7_microsv>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	645a      	str	r2, [r3, #68]	; 0x44

  // initial cpr = PPR
  // change it if the mode is quadrature
  if(quadrature == Quadrature::ON) cpr = 4*cpr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7e5b      	ldrb	r3, [r3, #25]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <_ZN7Encoder4initEv+0x58>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	edd3 7a07 	vldr	s15, [r3, #28]
 80049a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80049a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80049bc:	f7fd ff4a 	bl	8002854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049c2:	e003      	b.n	80049cc <LoopCopyDataInit>

080049c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80049c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049ca:	3104      	adds	r1, #4

080049cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049cc:	480a      	ldr	r0, [pc, #40]	; (80049f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80049d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049d4:	d3f6      	bcc.n	80049c4 <CopyDataInit>
  ldr  r2, =_sbss
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80049d8:	e002      	b.n	80049e0 <LoopFillZerobss>

080049da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049dc:	f842 3b04 	str.w	r3, [r2], #4

080049e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049e0:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80049e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049e4:	d3f9      	bcc.n	80049da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049e6:	f006 faa5 	bl	800af34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049ea:	f7fd f8b5 	bl	8001b58 <main>
  bx  lr    
 80049ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80049f4:	0800b4bc 	.word	0x0800b4bc
  ldr  r0, =_sdata
 80049f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80049fc:	24000080 	.word	0x24000080
  ldr  r2, =_sbss
 8004a00:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8004a04:	240003d0 	.word	0x240003d0

08004a08 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a08:	e7fe      	b.n	8004a08 <ADC3_IRQHandler>
	...

08004a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a12:	2003      	movs	r0, #3
 8004a14:	f001 feb2 	bl	800677c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a18:	f002 feec 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_Init+0x68>)
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	4913      	ldr	r1, [pc, #76]	; (8004a78 <HAL_Init+0x6c>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_Init+0x68>)
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	; (8004a78 <HAL_Init+0x6c>)
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_Init+0x70>)
 8004a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <HAL_Init+0x74>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a56:	2000      	movs	r0, #0
 8004a58:	f000 f814 	bl	8004a84 <HAL_InitTick>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e002      	b.n	8004a6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a66:	f7fd fd75 	bl	8002554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	58024400 	.word	0x58024400
 8004a78:	0800b080 	.word	0x0800b080
 8004a7c:	24000008 	.word	0x24000008
 8004a80:	24000004 	.word	0x24000004

08004a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_InitTick+0x60>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e021      	b.n	8004adc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_InitTick+0x64>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <HAL_InitTick+0x60>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 fe97 	bl	80067e2 <HAL_SYSTICK_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00e      	b.n	8004adc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d80a      	bhi.n	8004ada <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	f001 fe61 	bl	8006792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <HAL_InitTick+0x68>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	24000010 	.word	0x24000010
 8004ae8:	24000004 	.word	0x24000004
 8004aec:	2400000c 	.word	0x2400000c

08004af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	24000010 	.word	0x24000010
 8004b14:	240003c8 	.word	0x240003c8

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	240003c8 	.word	0x240003c8

08004b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff ffee 	bl	8004b18 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d005      	beq.n	8004b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_Delay+0x44>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b56:	bf00      	nop
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f7      	bhi.n	8004b58 <HAL_Delay+0x28>
  {
  }
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	24000010 	.word	0x24000010

08004b78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_GetREVID+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0c1b      	lsrs	r3, r3, #16
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	5c001000 	.word	0x5c001000

08004b90 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	4904      	ldr	r1, [pc, #16]	; (8004bb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58000400 	.word	0x58000400

08004bbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3360      	adds	r3, #96	; 0x60
 8004c36:	461a      	mov	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	611a      	str	r2, [r3, #16]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3360      	adds	r3, #96	; 0x60
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	601a      	str	r2, [r3, #0]
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3330      	adds	r3, #48	; 0x30
 8004d02:	461a      	mov	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	4413      	add	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	211f      	movs	r1, #31
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	f003 011f 	and.w	r1, r3, #31
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	0e5b      	lsrs	r3, r3, #25
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	4413      	add	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	0d1b      	lsrs	r3, r3, #20
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2107      	movs	r1, #7
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	401a      	ands	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	0d1b      	lsrs	r3, r3, #20
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0318 	and.w	r3, r3, #24
 8004dc2:	4908      	ldr	r1, [pc, #32]	; (8004de4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dc4:	40d9      	lsrs	r1, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	400b      	ands	r3, r1
 8004dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	000fffff 	.word	0x000fffff

08004de8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 031f 	and.w	r3, r3, #31
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6093      	str	r3, [r2, #8]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	5fffffc0 	.word	0x5fffffc0

08004e44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e58:	d101      	bne.n	8004e5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <LL_ADC_EnableInternalRegulator+0x24>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	6fffffc0 	.word	0x6fffffc0

08004e94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea8:	d101      	bne.n	8004eae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <LL_ADC_Enable+0x24>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	f043 0201 	orr.w	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	7fffffc0 	.word	0x7fffffc0

08004ee4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <LL_ADC_Disable+0x24>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	f043 0202 	orr.w	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	7fffffc0 	.word	0x7fffffc0

08004f0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <LL_ADC_IsEnabled+0x18>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <LL_ADC_IsEnabled+0x1a>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d101      	bne.n	8004f4a <LL_ADC_IsDisableOngoing+0x18>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <LL_ADC_IsDisableOngoing+0x1a>
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <LL_ADC_REG_StartConversion+0x24>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	7fffffc0 	.word	0x7fffffc0

08004f80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <LL_ADC_REG_StopConversion+0x24>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	f043 0210 	orr.w	r2, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	7fffffc0 	.word	0x7fffffc0

08004fa8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d101      	bne.n	8004fc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <LL_ADC_INJ_StopConversion+0x24>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	7fffffc0 	.word	0x7fffffc0

08004ff8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d101      	bne.n	8005010 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e18e      	b.n	8005358 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fd fa9d 	bl	8002588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff feef 	bl	8004e44 <LL_ADC_IsDeepPowerDownEnabled>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fed5 	bl	8004e20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff0a 	bl	8004e94 <LL_ADC_IsInternalRegulatorEnabled>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d113      	bne.n	80050ae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff feee 	bl	8004e6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005090:	4b9a      	ldr	r3, [pc, #616]	; (80052fc <HAL_ADC_Init+0x2dc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	099b      	lsrs	r3, r3, #6
 8005096:	4a9a      	ldr	r2, [pc, #616]	; (8005300 <HAL_ADC_Init+0x2e0>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	099b      	lsrs	r3, r3, #6
 800509e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050a0:	e002      	b.n	80050a8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f9      	bne.n	80050a2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff feee 	bl	8004e94 <LL_ADC_IsInternalRegulatorEnabled>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0210 	orr.w	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ff62 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 80050e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 8129 	bne.w	8005346 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 8125 	bne.w	8005346 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005104:	f043 0202 	orr.w	r2, r3, #2
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fefb 	bl	8004f0c <LL_ADC_IsEnabled>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d136      	bne.n	800518a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a78      	ldr	r2, [pc, #480]	; (8005304 <HAL_ADC_Init+0x2e4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_ADC_Init+0x110>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a77      	ldr	r2, [pc, #476]	; (8005308 <HAL_ADC_Init+0x2e8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10e      	bne.n	800514e <HAL_ADC_Init+0x12e>
 8005130:	4874      	ldr	r0, [pc, #464]	; (8005304 <HAL_ADC_Init+0x2e4>)
 8005132:	f7ff feeb 	bl	8004f0c <LL_ADC_IsEnabled>
 8005136:	4604      	mov	r4, r0
 8005138:	4873      	ldr	r0, [pc, #460]	; (8005308 <HAL_ADC_Init+0x2e8>)
 800513a:	f7ff fee7 	bl	8004f0c <LL_ADC_IsEnabled>
 800513e:	4603      	mov	r3, r0
 8005140:	4323      	orrs	r3, r4
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e008      	b.n	8005160 <HAL_ADC_Init+0x140>
 800514e:	486f      	ldr	r0, [pc, #444]	; (800530c <HAL_ADC_Init+0x2ec>)
 8005150:	f7ff fedc 	bl	8004f0c <LL_ADC_IsEnabled>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a66      	ldr	r2, [pc, #408]	; (8005304 <HAL_ADC_Init+0x2e4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_ADC_Init+0x158>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a65      	ldr	r2, [pc, #404]	; (8005308 <HAL_ADC_Init+0x2e8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_ADC_Init+0x15c>
 8005178:	4a65      	ldr	r2, [pc, #404]	; (8005310 <HAL_ADC_Init+0x2f0>)
 800517a:	e000      	b.n	800517e <HAL_ADC_Init+0x15e>
 800517c:	4a65      	ldr	r2, [pc, #404]	; (8005314 <HAL_ADC_Init+0x2f4>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7ff fd19 	bl	8004bbc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800518a:	f7ff fcf5 	bl	8004b78 <HAL_GetREVID>
 800518e:	4603      	mov	r3, r0
 8005190:	f241 0203 	movw	r2, #4099	; 0x1003
 8005194:	4293      	cmp	r3, r2
 8005196:	d914      	bls.n	80051c2 <HAL_ADC_Init+0x1a2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d110      	bne.n	80051c2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7d5b      	ldrb	r3, [r3, #21]
 80051a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7f1b      	ldrb	r3, [r3, #28]
 80051b6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80051b8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051ba:	f043 030c 	orr.w	r3, r3, #12
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e00d      	b.n	80051de <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7d5b      	ldrb	r3, [r3, #21]
 80051c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7f1b      	ldrb	r3, [r3, #28]
 80051d8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7f1b      	ldrb	r3, [r3, #28]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d106      	bne.n	80051f4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	045b      	lsls	r3, r3, #17
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4b40      	ldr	r3, [pc, #256]	; (8005318 <HAL_ADC_Init+0x2f8>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	430b      	orrs	r3, r1
 8005222:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff febd 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 800522e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fedf 	bl	8004ff8 <LL_ADC_INJ_IsConversionOngoing>
 800523a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d14a      	bne.n	80052d8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d147      	bne.n	80052d8 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7d1b      	ldrb	r3, [r3, #20]
 800524c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	4b2f      	ldr	r3, [pc, #188]	; (800531c <HAL_ADC_Init+0x2fc>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	430b      	orrs	r3, r1
 8005268:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005270:	2b01      	cmp	r3, #1
 8005272:	d11b      	bne.n	80052ac <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_ADC_Init+0x300>)
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005288:	3a01      	subs	r2, #1
 800528a:	0411      	lsls	r1, r2, #16
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005290:	4311      	orrs	r1, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005296:	4311      	orrs	r1, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800529c:	430a      	orrs	r2, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	e007      	b.n	80052bc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fee0 	bl	8006098 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d121      	bne.n	8005324 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f023 010f 	bic.w	r1, r3, #15
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
 80052f8:	e01c      	b.n	8005334 <HAL_ADC_Init+0x314>
 80052fa:	bf00      	nop
 80052fc:	24000004 	.word	0x24000004
 8005300:	053e2d63 	.word	0x053e2d63
 8005304:	40022000 	.word	0x40022000
 8005308:	40022100 	.word	0x40022100
 800530c:	58026000 	.word	0x58026000
 8005310:	40022300 	.word	0x40022300
 8005314:	58026300 	.word	0x58026300
 8005318:	fff0c003 	.word	0xfff0c003
 800531c:	ffffbffc 	.word	0xffffbffc
 8005320:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 020f 	bic.w	r2, r2, #15
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f023 0303 	bic.w	r3, r3, #3
 800533c:	f043 0201 	orr.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
 8005344:	e007      	b.n	8005356 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f043 0210 	orr.w	r2, r3, #16
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005356:	7ffb      	ldrb	r3, [r7, #31]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3724      	adds	r7, #36	; 0x24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <HAL_ADC_Start+0x180>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <HAL_ADC_Start+0x1c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a5b      	ldr	r2, [pc, #364]	; (80054e4 <HAL_ADC_Start+0x184>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d101      	bne.n	8005380 <HAL_ADC_Start+0x20>
 800537c:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_ADC_Start+0x188>)
 800537e:	e000      	b.n	8005382 <HAL_ADC_Start+0x22>
 8005380:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <HAL_ADC_Start+0x18c>)
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fd30 	bl	8004de8 <LL_ADC_GetMultimode>
 8005388:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fe0a 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 809a 	bne.w	80054d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_ADC_Start+0x4a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e095      	b.n	80054d6 <HAL_ADC_Start+0x176>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd94 	bl	8005ee0 <ADC_Enable>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 8081 	bne.w	80054c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053c8:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <HAL_ADC_Start+0x190>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a42      	ldr	r2, [pc, #264]	; (80054e4 <HAL_ADC_Start+0x184>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d002      	beq.n	80053e4 <HAL_ADC_Start+0x84>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	e000      	b.n	80053e6 <HAL_ADC_Start+0x86>
 80053e4:	4b3e      	ldr	r3, [pc, #248]	; (80054e0 <HAL_ADC_Start+0x180>)
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d002      	beq.n	80053f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d106      	bne.n	800541c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f023 0206 	bic.w	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	; 0x58
 800541a:	e002      	b.n	8005422 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	221c      	movs	r2, #28
 8005428:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <HAL_ADC_Start+0x184>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d002      	beq.n	8005442 <HAL_ADC_Start+0xe2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	e000      	b.n	8005444 <HAL_ADC_Start+0xe4>
 8005442:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_ADC_Start+0x180>)
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	4293      	cmp	r3, r2
 800544a:	d008      	beq.n	800545e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b05      	cmp	r3, #5
 8005456:	d002      	beq.n	800545e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b09      	cmp	r3, #9
 800545c:	d114      	bne.n	8005488 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005474:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fd69 	bl	8004f58 <LL_ADC_REG_StartConversion>
 8005486:	e025      	b.n	80054d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_ADC_Start+0x184>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d002      	beq.n	80054a4 <HAL_ADC_Start+0x144>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	e000      	b.n	80054a6 <HAL_ADC_Start+0x146>
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <HAL_ADC_Start+0x180>)
 80054a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00f      	beq.n	80054d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
 80054c4:	e006      	b.n	80054d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80054ce:	e001      	b.n	80054d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40022100 	.word	0x40022100
 80054e8:	40022300 	.word	0x40022300
 80054ec:	58026300 	.word	0x58026300
 80054f0:	fffff0fe 	.word	0xfffff0fe

080054f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_ADC_Stop+0x16>
 8005506:	2302      	movs	r3, #2
 8005508:	e021      	b.n	800554e <HAL_ADC_Stop+0x5a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005512:	2103      	movs	r1, #3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fc2f 	bl	8005d78 <ADC_ConversionStop>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fd5f 	bl	8005fe8 <ADC_Disable>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_ADC_Stop+0x64>)
 800553a:	4013      	ands	r3, r2
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	ffffeefe 	.word	0xffffeefe

0800555c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6e      	ldr	r2, [pc, #440]	; (8005724 <HAL_ADC_PollForConversion+0x1c8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_ADC_PollForConversion+0x1e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6c      	ldr	r2, [pc, #432]	; (8005728 <HAL_ADC_PollForConversion+0x1cc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_ADC_PollForConversion+0x22>
 800557a:	4b6c      	ldr	r3, [pc, #432]	; (800572c <HAL_ADC_PollForConversion+0x1d0>)
 800557c:	e000      	b.n	8005580 <HAL_ADC_PollForConversion+0x24>
 800557e:	4b6c      	ldr	r3, [pc, #432]	; (8005730 <HAL_ADC_PollForConversion+0x1d4>)
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fc31 	bl	8004de8 <LL_ADC_GetMultimode>
 8005586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d102      	bne.n	8005596 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005590:	2308      	movs	r3, #8
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e037      	b.n	8005606 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d002      	beq.n	80055a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	d111      	bne.n	80055cc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0aa      	b.n	800571c <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80055c6:	2304      	movs	r3, #4
 80055c8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80055ca:	e01c      	b.n	8005606 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a54      	ldr	r2, [pc, #336]	; (8005724 <HAL_ADC_PollForConversion+0x1c8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_ADC_PollForConversion+0x84>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a53      	ldr	r2, [pc, #332]	; (8005728 <HAL_ADC_PollForConversion+0x1cc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_ADC_PollForConversion+0x88>
 80055e0:	4b52      	ldr	r3, [pc, #328]	; (800572c <HAL_ADC_PollForConversion+0x1d0>)
 80055e2:	e000      	b.n	80055e6 <HAL_ADC_PollForConversion+0x8a>
 80055e4:	4b52      	ldr	r3, [pc, #328]	; (8005730 <HAL_ADC_PollForConversion+0x1d4>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fc0c 	bl	8004e04 <LL_ADC_GetMultiDMATransfer>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e08c      	b.n	800571c <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005602:	2304      	movs	r3, #4
 8005604:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005606:	f7ff fa87 	bl	8004b18 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800560c:	e01a      	b.n	8005644 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d016      	beq.n	8005644 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005616:	f7ff fa7f 	bl	8004b18 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <HAL_ADC_PollForConversion+0xd0>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005630:	f043 0204 	orr.w	r2, r3, #4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e06b      	b.n	800571c <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0dd      	beq.n	800560e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fb32 	bl	8004ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01c      	beq.n	80056a8 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7d5b      	ldrb	r3, [r3, #21]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d118      	bne.n	80056a8 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d111      	bne.n	80056a8 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_ADC_PollForConversion+0x1cc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d002      	beq.n	80056b8 <HAL_ADC_PollForConversion+0x15c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	e000      	b.n	80056ba <HAL_ADC_PollForConversion+0x15e>
 80056b8:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HAL_ADC_PollForConversion+0x1c8>)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	4293      	cmp	r3, r2
 80056c0:	d008      	beq.n	80056d4 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	d002      	beq.n	80056d4 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	d104      	bne.n	80056de <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e00c      	b.n	80056f8 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a11      	ldr	r2, [pc, #68]	; (8005728 <HAL_ADC_PollForConversion+0x1cc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d002      	beq.n	80056ee <HAL_ADC_PollForConversion+0x192>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	e000      	b.n	80056f0 <HAL_ADC_PollForConversion+0x194>
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <HAL_ADC_PollForConversion+0x1c8>)
 80056f0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d104      	bne.n	8005708 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2208      	movs	r2, #8
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e008      	b.n	800571a <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	220c      	movs	r2, #12
 8005718:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40022000 	.word	0x40022000
 8005728:	40022100 	.word	0x40022100
 800572c:	40022300 	.word	0x40022300
 8005730:	58026300 	.word	0x58026300

08005734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b099      	sub	sp, #100	; 0x64
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a99      	ldr	r2, [pc, #612]	; (80059d0 <HAL_ADC_ConfigChannel+0x280>)
 800576a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_ADC_ConfigChannel+0x2a>
 8005776:	2302      	movs	r3, #2
 8005778:	e2e6      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x5f8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fc0e 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 82cb 	bne.w	8005d2a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x62>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	e00f      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x82>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2201      	movs	r2, #1
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	69d1      	ldr	r1, [r2, #28]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	430b      	orrs	r3, r1
 80057de:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f7ff fa80 	bl	8004cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fbd6 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 80057fc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fbf8 	bl	8004ff8 <LL_ADC_INJ_IsConversionOngoing>
 8005808:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800580a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 80b3 	bne.w	8005978 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 80af 	bne.w	8005978 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	461a      	mov	r2, r3
 8005828:	f7ff fa8f 	bl	8004d4a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800582c:	4b69      	ldr	r3, [pc, #420]	; (80059d4 <HAL_ADC_ConfigChannel+0x284>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005838:	d10b      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x102>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	e01d      	b.n	800588e <HAL_ADC_ConfigChannel+0x13e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x128>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	e00a      	b.n	800588e <HAL_ADC_ConfigChannel+0x13e>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d027      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6919      	ldr	r1, [r3, #16]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a6:	f7ff f9bd 	bl	8004c24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6919      	ldr	r1, [r3, #16]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	7e5b      	ldrb	r3, [r3, #25]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x170>
 80058ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058be:	e000      	b.n	80058c2 <HAL_ADC_ConfigChannel+0x172>
 80058c0:	2300      	movs	r3, #0
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7ff f9e7 	bl	8004c96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6919      	ldr	r1, [r3, #16]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	7e1b      	ldrb	r3, [r3, #24]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d102      	bne.n	80058de <HAL_ADC_ConfigChannel+0x18e>
 80058d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058dc:	e000      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x190>
 80058de:	2300      	movs	r3, #0
 80058e0:	461a      	mov	r2, r3
 80058e2:	f7ff f9bf 	bl	8004c64 <LL_ADC_SetDataRightShift>
 80058e6:	e047      	b.n	8005978 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	069b      	lsls	r3, r3, #26
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d107      	bne.n	800590c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800590a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	069b      	lsls	r3, r3, #26
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800592e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	069b      	lsls	r3, r3, #26
 8005940:	429a      	cmp	r2, r3
 8005942:	d107      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005952:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800595a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	069b      	lsls	r3, r3, #26
 8005964:	429a      	cmp	r2, r3
 8005966:	d107      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005976:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fac5 	bl	8004f0c <LL_ADC_IsEnabled>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 81d9 	bne.w	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	f7ff fa02 	bl	8004da0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <HAL_ADC_ConfigChannel+0x280>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	f040 8101 	bne.w	8005baa <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x288>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0e9b      	lsrs	r3, r3, #26
 80059be:	3301      	adds	r3, #1
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e016      	b.n	80059fe <HAL_ADC_ConfigChannel+0x2ae>
 80059d0:	47ff0000 	.word	0x47ff0000
 80059d4:	5c001000 	.word	0x5c001000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	2b09      	cmp	r3, #9
 80059f6:	bf94      	ite	ls
 80059f8:	2301      	movls	r3, #1
 80059fa:	2300      	movhi	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d064      	beq.n	8005acc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x2ce>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	0e9b      	lsrs	r3, r3, #26
 8005a14:	3301      	adds	r3, #1
 8005a16:	069b      	lsls	r3, r3, #26
 8005a18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a1c:	e00e      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x2ec>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	fab3 f383 	clz	r3, r3
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	3301      	adds	r3, #1
 8005a36:	069b      	lsls	r3, r3, #26
 8005a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x30c>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0e9b      	lsrs	r3, r3, #26
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	e010      	b.n	8005a7e <HAL_ADC_ConfigChannel+0x32e>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	fa93 f3a3 	rbit	r3, r3
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	fab3 f383 	clz	r3, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	ea42 0103 	orr.w	r1, r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x354>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	0e9b      	lsrs	r3, r3, #26
 8005a94:	3301      	adds	r3, #1
 8005a96:	f003 021f 	and.w	r2, r3, #31
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	e011      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x378>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	fab3 f383 	clz	r3, r3
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	e069      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d107      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x398>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	0e9b      	lsrs	r3, r3, #26
 8005ade:	3301      	adds	r3, #1
 8005ae0:	069b      	lsls	r3, r3, #26
 8005ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ae6:	e00e      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x3b6>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	61fb      	str	r3, [r7, #28]
  return result;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	3301      	adds	r3, #1
 8005b00:	069b      	lsls	r3, r3, #26
 8005b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x3d6>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	0e9b      	lsrs	r3, r3, #26
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	2101      	movs	r1, #1
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	e010      	b.n	8005b48 <HAL_ADC_ConfigChannel+0x3f8>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	617b      	str	r3, [r7, #20]
  return result;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	ea42 0103 	orr.w	r1, r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x424>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0e9b      	lsrs	r3, r3, #26
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f003 021f 	and.w	r2, r3, #31
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	3b1e      	subs	r3, #30
 8005b6c:	051b      	lsls	r3, r3, #20
 8005b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b72:	e014      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x44e>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	60fb      	str	r3, [r7, #12]
  return result;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f003 021f 	and.w	r2, r3, #31
 8005b90:	4613      	mov	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4413      	add	r3, r2
 8005b96:	3b1e      	subs	r3, #30
 8005b98:	051b      	lsls	r3, r3, #20
 8005b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f7ff f8d0 	bl	8004d4a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f280 80c4 	bge.w	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_ADC_ConfigChannel+0x478>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a64      	ldr	r2, [pc, #400]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x47c>
 8005bc8:	4b63      	ldr	r3, [pc, #396]	; (8005d58 <HAL_ADC_ConfigChannel+0x608>)
 8005bca:	e000      	b.n	8005bce <HAL_ADC_ConfigChannel+0x47e>
 8005bcc:	4b63      	ldr	r3, [pc, #396]	; (8005d5c <HAL_ADC_ConfigChannel+0x60c>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff f81a 	bl	8004c08 <LL_ADC_GetCommonPathInternalCh>
 8005bd4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a5d      	ldr	r2, [pc, #372]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x49a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5b      	ldr	r2, [pc, #364]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10e      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x4b8>
 8005bea:	4859      	ldr	r0, [pc, #356]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005bec:	f7ff f98e 	bl	8004f0c <LL_ADC_IsEnabled>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4858      	ldr	r0, [pc, #352]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005bf4:	f7ff f98a 	bl	8004f0c <LL_ADC_IsEnabled>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4323      	orrs	r3, r4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e008      	b.n	8005c1a <HAL_ADC_ConfigChannel+0x4ca>
 8005c08:	4855      	ldr	r0, [pc, #340]	; (8005d60 <HAL_ADC_ConfigChannel+0x610>)
 8005c0a:	f7ff f97f 	bl	8004f0c <LL_ADC_IsEnabled>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d07b      	beq.n	8005d16 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a50      	ldr	r2, [pc, #320]	; (8005d64 <HAL_ADC_ConfigChannel+0x614>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d12e      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x536>
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d129      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4a      	ldr	r2, [pc, #296]	; (8005d60 <HAL_ADC_ConfigChannel+0x610>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d17f      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a43      	ldr	r2, [pc, #268]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_ADC_ConfigChannel+0x500>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a42      	ldr	r2, [pc, #264]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <HAL_ADC_ConfigChannel+0x504>
 8005c50:	4a41      	ldr	r2, [pc, #260]	; (8005d58 <HAL_ADC_ConfigChannel+0x608>)
 8005c52:	e000      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x506>
 8005c54:	4a41      	ldr	r2, [pc, #260]	; (8005d5c <HAL_ADC_ConfigChannel+0x60c>)
 8005c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe ffbf 	bl	8004be2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005c64:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <HAL_ADC_ConfigChannel+0x618>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	4a40      	ldr	r2, [pc, #256]	; (8005d6c <HAL_ADC_ConfigChannel+0x61c>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	099b      	lsrs	r3, r3, #6
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c76:	e002      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f9      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c84:	e05a      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <HAL_ADC_ConfigChannel+0x620>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d11e      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x57e>
 8005c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d119      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <HAL_ADC_ConfigChannel+0x610>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d14b      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_ADC_ConfigChannel+0x568>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a28      	ldr	r2, [pc, #160]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x56c>
 8005cb8:	4a27      	ldr	r2, [pc, #156]	; (8005d58 <HAL_ADC_ConfigChannel+0x608>)
 8005cba:	e000      	b.n	8005cbe <HAL_ADC_ConfigChannel+0x56e>
 8005cbc:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <HAL_ADC_ConfigChannel+0x60c>)
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7fe ff8b 	bl	8004be2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ccc:	e036      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <HAL_ADC_ConfigChannel+0x624>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d131      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d12c      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <HAL_ADC_ConfigChannel+0x610>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d127      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a17      	ldr	r2, [pc, #92]	; (8005d50 <HAL_ADC_ConfigChannel+0x600>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x5b0>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <HAL_ADC_ConfigChannel+0x604>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x5b4>
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <HAL_ADC_ConfigChannel+0x608>)
 8005d02:	e000      	b.n	8005d06 <HAL_ADC_ConfigChannel+0x5b6>
 8005d04:	4a15      	ldr	r2, [pc, #84]	; (8005d5c <HAL_ADC_ConfigChannel+0x60c>)
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fe ff67 	bl	8004be2 <LL_ADC_SetCommonPathInternalCh>
 8005d14:	e012      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d28:	e008      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3764      	adds	r7, #100	; 0x64
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}
 8005d50:	40022000 	.word	0x40022000
 8005d54:	40022100 	.word	0x40022100
 8005d58:	40022300 	.word	0x40022300
 8005d5c:	58026300 	.word	0x58026300
 8005d60:	58026000 	.word	0x58026000
 8005d64:	cb840000 	.word	0xcb840000
 8005d68:	24000004 	.word	0x24000004
 8005d6c:	053e2d63 	.word	0x053e2d63
 8005d70:	c7520000 	.word	0xc7520000
 8005d74:	cfb80000 	.word	0xcfb80000

08005d78 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff f90a 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 8005d94:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff f92c 	bl	8004ff8 <LL_ADC_INJ_IsConversionOngoing>
 8005da0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8091 	beq.w	8005ed2 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02a      	beq.n	8005e14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7d5b      	ldrb	r3, [r3, #21]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d126      	bne.n	8005e14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7d1b      	ldrb	r3, [r3, #20]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d122      	bne.n	8005e14 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005dd2:	e014      	b.n	8005dfe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4a41      	ldr	r2, [pc, #260]	; (8005edc <ADC_ConversionStop+0x164>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d90d      	bls.n	8005df8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f043 0210 	orr.w	r2, r3, #16
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	f043 0201 	orr.w	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e06d      	b.n	8005ed4 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d1e3      	bne.n	8005dd4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2240      	movs	r2, #64	; 0x40
 8005e12:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d014      	beq.n	8005e44 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff f8c2 	bl	8004fa8 <LL_ADC_REG_IsConversionOngoing>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00c      	beq.n	8005e44 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff f87f 	bl	8004f32 <LL_ADC_IsDisableOngoing>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff f89e 	bl	8004f80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d014      	beq.n	8005e74 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff f8d2 	bl	8004ff8 <LL_ADC_INJ_IsConversionOngoing>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff f867 	bl	8004f32 <LL_ADC_IsDisableOngoing>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff f8ae 	bl	8004fd0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d005      	beq.n	8005e86 <ADC_ConversionStop+0x10e>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d105      	bne.n	8005e8c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005e80:	230c      	movs	r3, #12
 8005e82:	617b      	str	r3, [r7, #20]
        break;
 8005e84:	e005      	b.n	8005e92 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005e86:	2308      	movs	r3, #8
 8005e88:	617b      	str	r3, [r7, #20]
        break;
 8005e8a:	e002      	b.n	8005e92 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	617b      	str	r3, [r7, #20]
        break;
 8005e90:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005e92:	f7fe fe41 	bl	8004b18 <HAL_GetTick>
 8005e96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005e98:	e014      	b.n	8005ec4 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005e9a:	f7fe fe3d 	bl	8004b18 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d90d      	bls.n	8005ec4 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f043 0210 	orr.w	r2, r3, #16
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f043 0201 	orr.w	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e007      	b.n	8005ed4 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	000cdbff 	.word	0x000cdbff

08005ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff f80d 	bl	8004f0c <LL_ADC_IsEnabled>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d167      	bne.n	8005fc8 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <ADC_Enable+0xf4>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	f043 0210 	orr.w	r2, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e053      	b.n	8005fca <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe ffc8 	bl	8004ebc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005f2c:	f7fe fdf4 	bl	8004b18 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <ADC_Enable+0xf8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <ADC_Enable+0x66>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <ADC_Enable+0xfc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d101      	bne.n	8005f4a <ADC_Enable+0x6a>
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <ADC_Enable+0x100>)
 8005f48:	e000      	b.n	8005f4c <ADC_Enable+0x6c>
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <ADC_Enable+0x104>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe ff4b 	bl	8004de8 <LL_ADC_GetMultimode>
 8005f52:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <ADC_Enable+0xfc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d002      	beq.n	8005f64 <ADC_Enable+0x84>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	e000      	b.n	8005f66 <ADC_Enable+0x86>
 8005f64:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <ADC_Enable+0xf8>)
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d025      	beq.n	8005fba <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d129      	bne.n	8005fc8 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f74:	e021      	b.n	8005fba <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe ffc6 	bl	8004f0c <LL_ADC_IsEnabled>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe ff96 	bl	8004ebc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f90:	f7fe fdc2 	bl	8004b18 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d90d      	bls.n	8005fba <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	f043 0210 	orr.w	r2, r3, #16
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	f043 0201 	orr.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e007      	b.n	8005fca <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d1d6      	bne.n	8005f76 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	8000003f 	.word	0x8000003f
 8005fd8:	40022000 	.word	0x40022000
 8005fdc:	40022100 	.word	0x40022100
 8005fe0:	40022300 	.word	0x40022300
 8005fe4:	58026300 	.word	0x58026300

08005fe8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe ff9c 	bl	8004f32 <LL_ADC_IsDisableOngoing>
 8005ffa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe ff83 	bl	8004f0c <LL_ADC_IsEnabled>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d040      	beq.n	800608e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d13d      	bne.n	800608e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030d 	and.w	r3, r3, #13
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10c      	bne.n	800603a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe ff5d 	bl	8004ee4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2203      	movs	r2, #3
 8006030:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006032:	f7fe fd71 	bl	8004b18 <HAL_GetTick>
 8006036:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006038:	e022      	b.n	8006080 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	f043 0210 	orr.w	r2, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	f043 0201 	orr.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e01c      	b.n	8006090 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006056:	f7fe fd5f 	bl	8004b18 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d90d      	bls.n	8006080 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	f043 0210 	orr.w	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	f043 0201 	orr.w	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e007      	b.n	8006090 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a79      	ldr	r2, [pc, #484]	; (800628c <ADC_ConfigureBoostMode+0x1f4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <ADC_ConfigureBoostMode+0x1c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a78      	ldr	r2, [pc, #480]	; (8006290 <ADC_ConfigureBoostMode+0x1f8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <ADC_ConfigureBoostMode+0x30>
 80060b4:	4b77      	ldr	r3, [pc, #476]	; (8006294 <ADC_ConfigureBoostMode+0x1fc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e008      	b.n	80060da <ADC_ConfigureBoostMode+0x42>
 80060c8:	4b73      	ldr	r3, [pc, #460]	; (8006298 <ADC_ConfigureBoostMode+0x200>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01c      	beq.n	8006118 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80060de:	f001 fd03 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 80060e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ec:	d010      	beq.n	8006110 <ADC_ConfigureBoostMode+0x78>
 80060ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060f2:	d871      	bhi.n	80061d8 <ADC_ConfigureBoostMode+0x140>
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d002      	beq.n	8006100 <ADC_ConfigureBoostMode+0x68>
 80060fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060fe:	d16b      	bne.n	80061d8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	60fb      	str	r3, [r7, #12]
        break;
 800610e:	e066      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	60fb      	str	r3, [r7, #12]
        break;
 8006116:	e062      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006118:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800611c:	f002 fc44 	bl	80089a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006120:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800612a:	d051      	beq.n	80061d0 <ADC_ConfigureBoostMode+0x138>
 800612c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006130:	d854      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 8006132:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006136:	d047      	beq.n	80061c8 <ADC_ConfigureBoostMode+0x130>
 8006138:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800613c:	d84e      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 800613e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006142:	d03d      	beq.n	80061c0 <ADC_ConfigureBoostMode+0x128>
 8006144:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006148:	d848      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 800614a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800614e:	d033      	beq.n	80061b8 <ADC_ConfigureBoostMode+0x120>
 8006150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006154:	d842      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 8006156:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800615a:	d029      	beq.n	80061b0 <ADC_ConfigureBoostMode+0x118>
 800615c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006160:	d83c      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 8006162:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006166:	d01a      	beq.n	800619e <ADC_ConfigureBoostMode+0x106>
 8006168:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800616c:	d836      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 800616e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006172:	d014      	beq.n	800619e <ADC_ConfigureBoostMode+0x106>
 8006174:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006178:	d830      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 800617a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800617e:	d00e      	beq.n	800619e <ADC_ConfigureBoostMode+0x106>
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d82a      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 8006186:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800618a:	d008      	beq.n	800619e <ADC_ConfigureBoostMode+0x106>
 800618c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006190:	d824      	bhi.n	80061dc <ADC_ConfigureBoostMode+0x144>
 8006192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006196:	d002      	beq.n	800619e <ADC_ConfigureBoostMode+0x106>
 8006198:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800619c:	d11e      	bne.n	80061dc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	0c9b      	lsrs	r3, r3, #18
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	60fb      	str	r3, [r7, #12]
        break;
 80061ae:	e016      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	60fb      	str	r3, [r7, #12]
        break;
 80061b6:	e012      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	60fb      	str	r3, [r7, #12]
        break;
 80061be:	e00e      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	099b      	lsrs	r3, r3, #6
 80061c4:	60fb      	str	r3, [r7, #12]
        break;
 80061c6:	e00a      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]
        break;
 80061ce:	e006      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	60fb      	str	r3, [r7, #12]
        break;
 80061d6:	e002      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
        break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80061dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80061de:	f7fe fccb 	bl	8004b78 <HAL_GetREVID>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d815      	bhi.n	8006218 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a2b      	ldr	r2, [pc, #172]	; (800629c <ADC_ConfigureBoostMode+0x204>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d908      	bls.n	8006206 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006202:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006204:	e03e      	b.n	8006284 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	e035      	b.n	8006284 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <ADC_ConfigureBoostMode+0x208>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d808      	bhi.n	8006238 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006234:	609a      	str	r2, [r3, #8]
}
 8006236:	e025      	b.n	8006284 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <ADC_ConfigureBoostMode+0x20c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d80a      	bhi.n	8006256 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	e016      	b.n	8006284 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <ADC_ConfigureBoostMode+0x210>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d80a      	bhi.n	8006274 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006270:	609a      	str	r2, [r3, #8]
}
 8006272:	e007      	b.n	8006284 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40022000 	.word	0x40022000
 8006290:	40022100 	.word	0x40022100
 8006294:	40022300 	.word	0x40022300
 8006298:	58026300 	.word	0x58026300
 800629c:	01312d00 	.word	0x01312d00
 80062a0:	005f5e10 	.word	0x005f5e10
 80062a4:	00bebc20 	.word	0x00bebc20
 80062a8:	017d7840 	.word	0x017d7840

080062ac <LL_ADC_IsEnabled>:
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <LL_ADC_IsEnabled+0x18>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <LL_ADC_IsEnabled+0x1a>
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <LL_ADC_StartCalibration>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <LL_ADC_StartCalibration+0x38>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80062f4:	430a      	orrs	r2, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	3ffeffc0 	.word	0x3ffeffc0

08006310 <LL_ADC_IsCalibrationOnGoing>:
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006324:	d101      	bne.n	800632a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <LL_ADC_REG_IsConversionOngoing>:
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d101      	bne.n	8006350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_ADCEx_Calibration_Start+0x1e>
 800637a:	2302      	movs	r3, #2
 800637c:	e04c      	b.n	8006418 <HAL_ADCEx_Calibration_Start+0xb8>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fe2e 	bl	8005fe8 <ADC_Disable>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d135      	bne.n	8006402 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639a:	4b21      	ldr	r3, [pc, #132]	; (8006420 <HAL_ADCEx_Calibration_Start+0xc0>)
 800639c:	4013      	ands	r3, r2
 800639e:	f043 0202 	orr.w	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff ff90 	bl	80062d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80063b4:	e014      	b.n	80063e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_ADCEx_Calibration_Start+0xc4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d30d      	bcc.n	80063e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c8:	f023 0312 	bic.w	r3, r3, #18
 80063cc:	f043 0210 	orr.w	r2, r3, #16
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e01b      	b.n	8006418 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff ff93 	bl	8006310 <LL_ADC_IsCalibrationOnGoing>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e2      	bne.n	80063b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f023 0303 	bic.w	r3, r3, #3
 80063f8:	f043 0201 	orr.w	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
 8006400:	e005      	b.n	800640e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006406:	f043 0210 	orr.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	ffffeefd 	.word	0xffffeefd
 8006424:	25c3f800 	.word	0x25c3f800

08006428 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b09f      	sub	sp, #124	; 0x7c
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006442:	2302      	movs	r3, #2
 8006444:	e0ba      	b.n	80065bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a5c      	ldr	r2, [pc, #368]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d102      	bne.n	800645e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	e001      	b.n	8006462 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e09d      	b.n	80065bc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff58 	bl	8006338 <LL_ADC_REG_IsConversionOngoing>
 8006488:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ff52 	bl	8006338 <LL_ADC_REG_IsConversionOngoing>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d17f      	bne.n	800659a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800649a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800649c:	2b00      	cmp	r3, #0
 800649e:	d17c      	bne.n	800659a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a47      	ldr	r2, [pc, #284]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a46      	ldr	r2, [pc, #280]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d101      	bne.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80064b4:	4b45      	ldr	r3, [pc, #276]	; (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80064b6:	e000      	b.n	80064ba <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80064b8:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80064ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d039      	beq.n	8006538 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3a      	ldr	r2, [pc, #232]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a38      	ldr	r2, [pc, #224]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10e      	bne.n	8006508 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80064ea:	4836      	ldr	r0, [pc, #216]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80064ec:	f7ff fede 	bl	80062ac <LL_ADC_IsEnabled>
 80064f0:	4604      	mov	r4, r0
 80064f2:	4835      	ldr	r0, [pc, #212]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80064f4:	f7ff feda 	bl	80062ac <LL_ADC_IsEnabled>
 80064f8:	4603      	mov	r3, r0
 80064fa:	4323      	orrs	r3, r4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e008      	b.n	800651a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8006508:	4832      	ldr	r0, [pc, #200]	; (80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800650a:	f7ff fecf 	bl	80062ac <LL_ADC_IsEnabled>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d047      	beq.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006524:	4013      	ands	r3, r2
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	6811      	ldr	r1, [r2, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	430a      	orrs	r2, r1
 8006530:	431a      	orrs	r2, r3
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006536:	e03a      	b.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d10e      	bne.n	8006576 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8006558:	481a      	ldr	r0, [pc, #104]	; (80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800655a:	f7ff fea7 	bl	80062ac <LL_ADC_IsEnabled>
 800655e:	4604      	mov	r4, r0
 8006560:	4819      	ldr	r0, [pc, #100]	; (80065c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8006562:	f7ff fea3 	bl	80062ac <LL_ADC_IsEnabled>
 8006566:	4603      	mov	r3, r0
 8006568:	4323      	orrs	r3, r4
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	e008      	b.n	8006588 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8006576:	4817      	ldr	r0, [pc, #92]	; (80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006578:	f7ff fe98 	bl	80062ac <LL_ADC_IsEnabled>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006592:	4013      	ands	r3, r2
 8006594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006596:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006598:	e009      	b.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80065ac:	e000      	b.n	80065b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80065bc:	4618      	mov	r0, r3
 80065be:	377c      	adds	r7, #124	; 0x7c
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd90      	pop	{r4, r7, pc}
 80065c4:	40022000 	.word	0x40022000
 80065c8:	40022100 	.word	0x40022100
 80065cc:	40022300 	.word	0x40022300
 80065d0:	58026300 	.word	0x58026300
 80065d4:	58026000 	.word	0x58026000
 80065d8:	fffff0e0 	.word	0xfffff0e0

080065dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <__NVIC_SetPriorityGrouping+0x40>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <__NVIC_SetPriorityGrouping+0x44>)
 8006606:	4313      	orrs	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800660a:	4a04      	ldr	r2, [pc, #16]	; (800661c <__NVIC_SetPriorityGrouping+0x40>)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	60d3      	str	r3, [r2, #12]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	e000ed00 	.word	0xe000ed00
 8006620:	05fa0000 	.word	0x05fa0000

08006624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <__NVIC_GetPriorityGrouping+0x18>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	f003 0307 	and.w	r3, r3, #7
}
 8006632:	4618      	mov	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800664a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	db0b      	blt.n	800666a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	f003 021f 	and.w	r2, r3, #31
 8006658:	4907      	ldr	r1, [pc, #28]	; (8006678 <__NVIC_EnableIRQ+0x38>)
 800665a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2001      	movs	r0, #1
 8006662:	fa00 f202 	lsl.w	r2, r0, r2
 8006666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e000e100 	.word	0xe000e100

0800667c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800668c:	2b00      	cmp	r3, #0
 800668e:	db0a      	blt.n	80066a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	490c      	ldr	r1, [pc, #48]	; (80066c8 <__NVIC_SetPriority+0x4c>)
 8006696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800669a:	0112      	lsls	r2, r2, #4
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	440b      	add	r3, r1
 80066a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066a4:	e00a      	b.n	80066bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4908      	ldr	r1, [pc, #32]	; (80066cc <__NVIC_SetPriority+0x50>)
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	3b04      	subs	r3, #4
 80066b4:	0112      	lsls	r2, r2, #4
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	440b      	add	r3, r1
 80066ba:	761a      	strb	r2, [r3, #24]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	e000e100 	.word	0xe000e100
 80066cc:	e000ed00 	.word	0xe000ed00

080066d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f1c3 0307 	rsb	r3, r3, #7
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	bf28      	it	cs
 80066ee:	2304      	movcs	r3, #4
 80066f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	3304      	adds	r3, #4
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d902      	bls.n	8006700 <NVIC_EncodePriority+0x30>
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3b03      	subs	r3, #3
 80066fe:	e000      	b.n	8006702 <NVIC_EncodePriority+0x32>
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43da      	mvns	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	401a      	ands	r2, r3
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006718:	f04f 31ff 	mov.w	r1, #4294967295
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	fa01 f303 	lsl.w	r3, r1, r3
 8006722:	43d9      	mvns	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006728:	4313      	orrs	r3, r2
         );
}
 800672a:	4618      	mov	r0, r3
 800672c:	3724      	adds	r7, #36	; 0x24
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3b01      	subs	r3, #1
 8006744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006748:	d301      	bcc.n	800674e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800674a:	2301      	movs	r3, #1
 800674c:	e00f      	b.n	800676e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <SysTick_Config+0x40>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3b01      	subs	r3, #1
 8006754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006756:	210f      	movs	r1, #15
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	f7ff ff8e 	bl	800667c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <SysTick_Config+0x40>)
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <SysTick_Config+0x40>)
 8006768:	2207      	movs	r2, #7
 800676a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	e000e010 	.word	0xe000e010

0800677c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff29 	bl	80065dc <__NVIC_SetPriorityGrouping>
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	4603      	mov	r3, r0
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
 800679e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067a0:	f7ff ff40 	bl	8006624 <__NVIC_GetPriorityGrouping>
 80067a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	f7ff ff90 	bl	80066d0 <NVIC_EncodePriority>
 80067b0:	4602      	mov	r2, r0
 80067b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ff5f 	bl	800667c <__NVIC_SetPriority>
}
 80067be:	bf00      	nop
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff33 	bl	8006640 <__NVIC_EnableIRQ>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ffa4 	bl	8006738 <SysTick_Config>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	; 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800680a:	4b89      	ldr	r3, [pc, #548]	; (8006a30 <HAL_GPIO_Init+0x234>)
 800680c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800680e:	e194      	b.n	8006b3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	2101      	movs	r1, #1
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	4013      	ands	r3, r2
 800681e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8186 	beq.w	8006b34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d00b      	beq.n	8006848 <HAL_GPIO_Init+0x4c>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d007      	beq.n	8006848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800683c:	2b11      	cmp	r3, #17
 800683e:	d003      	beq.n	8006848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b12      	cmp	r3, #18
 8006846:	d130      	bne.n	80068aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	2203      	movs	r2, #3
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	43db      	mvns	r3, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4313      	orrs	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800687e:	2201      	movs	r2, #1
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	4013      	ands	r3, r2
 800688c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	f003 0201 	and.w	r2, r3, #1
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	2203      	movs	r2, #3
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4013      	ands	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_Init+0xee>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b12      	cmp	r3, #18
 80068e8:	d123      	bne.n	8006932 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	08da      	lsrs	r2, r3, #3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3208      	adds	r2, #8
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	220f      	movs	r2, #15
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43db      	mvns	r3, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4013      	ands	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	4313      	orrs	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	08da      	lsrs	r2, r3, #3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3208      	adds	r2, #8
 800692c:	69b9      	ldr	r1, [r7, #24]
 800692e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	2203      	movs	r2, #3
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	4013      	ands	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 0203 	and.w	r2, r3, #3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	4313      	orrs	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80e0 	beq.w	8006b34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006974:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <HAL_GPIO_Init+0x238>)
 8006976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800697a:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <HAL_GPIO_Init+0x238>)
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_GPIO_Init+0x238>)
 8006986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006992:	4a29      	ldr	r2, [pc, #164]	; (8006a38 <HAL_GPIO_Init+0x23c>)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	089b      	lsrs	r3, r3, #2
 8006998:	3302      	adds	r3, #2
 800699a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	220f      	movs	r2, #15
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4013      	ands	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <HAL_GPIO_Init+0x240>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d052      	beq.n	8006a64 <HAL_GPIO_Init+0x268>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_GPIO_Init+0x244>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d031      	beq.n	8006a2a <HAL_GPIO_Init+0x22e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <HAL_GPIO_Init+0x248>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d02b      	beq.n	8006a26 <HAL_GPIO_Init+0x22a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_GPIO_Init+0x24c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d025      	beq.n	8006a22 <HAL_GPIO_Init+0x226>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_GPIO_Init+0x250>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01f      	beq.n	8006a1e <HAL_GPIO_Init+0x222>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1b      	ldr	r2, [pc, #108]	; (8006a50 <HAL_GPIO_Init+0x254>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d019      	beq.n	8006a1a <HAL_GPIO_Init+0x21e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <HAL_GPIO_Init+0x258>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <HAL_GPIO_Init+0x21a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <HAL_GPIO_Init+0x25c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00d      	beq.n	8006a12 <HAL_GPIO_Init+0x216>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_GPIO_Init+0x260>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d007      	beq.n	8006a0e <HAL_GPIO_Init+0x212>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_GPIO_Init+0x264>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <HAL_GPIO_Init+0x20e>
 8006a06:	2309      	movs	r3, #9
 8006a08:	e02d      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	e02b      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a0e:	2308      	movs	r3, #8
 8006a10:	e029      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a12:	2307      	movs	r3, #7
 8006a14:	e027      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a16:	2306      	movs	r3, #6
 8006a18:	e025      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a1a:	2305      	movs	r3, #5
 8006a1c:	e023      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	e021      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a22:	2303      	movs	r3, #3
 8006a24:	e01f      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e01d      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e01b      	b.n	8006a66 <HAL_GPIO_Init+0x26a>
 8006a2e:	bf00      	nop
 8006a30:	58000080 	.word	0x58000080
 8006a34:	58024400 	.word	0x58024400
 8006a38:	58000400 	.word	0x58000400
 8006a3c:	58020000 	.word	0x58020000
 8006a40:	58020400 	.word	0x58020400
 8006a44:	58020800 	.word	0x58020800
 8006a48:	58020c00 	.word	0x58020c00
 8006a4c:	58021000 	.word	0x58021000
 8006a50:	58021400 	.word	0x58021400
 8006a54:	58021800 	.word	0x58021800
 8006a58:	58021c00 	.word	0x58021c00
 8006a5c:	58022000 	.word	0x58022000
 8006a60:	58022400 	.word	0x58022400
 8006a64:	2300      	movs	r3, #0
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	f002 0203 	and.w	r2, r2, #3
 8006a6c:	0092      	lsls	r2, r2, #2
 8006a6e:	4093      	lsls	r3, r2
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a76:	4938      	ldr	r1, [pc, #224]	; (8006b58 <HAL_GPIO_Init+0x35c>)
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4013      	ands	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4013      	ands	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f47f ae63 	bne.w	8006810 <HAL_GPIO_Init+0x14>
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	3724      	adds	r7, #36	; 0x24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	58000400 	.word	0x58000400

08006b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	887b      	ldrh	r3, [r7, #2]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	e001      	b.n	8006b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	807b      	strh	r3, [r7, #2]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b9c:	787b      	ldrb	r3, [r7, #1]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ba8:	e003      	b.n	8006bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006baa:	887b      	ldrh	r3, [r7, #2]
 8006bac:	041a      	lsls	r2, r3, #16
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	619a      	str	r2, [r3, #24]
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fb fc43 	bl	8002470 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_PWREx_ConfigSupply+0x70>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d00a      	beq.n	8006c1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c08:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <HAL_PWREx_ConfigSupply+0x70>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d001      	beq.n	8006c1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e01f      	b.n	8006c5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e01d      	b.n	8006c5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <HAL_PWREx_ConfigSupply+0x70>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f023 0207 	bic.w	r2, r3, #7
 8006c26:	490f      	ldr	r1, [pc, #60]	; (8006c64 <HAL_PWREx_ConfigSupply+0x70>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c2e:	f7fd ff73 	bl	8004b18 <HAL_GetTick>
 8006c32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c34:	e009      	b.n	8006c4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c36:	f7fd ff6f 	bl	8004b18 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c44:	d901      	bls.n	8006c4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e007      	b.n	8006c5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <HAL_PWREx_ConfigSupply+0x70>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	d1ee      	bne.n	8006c36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	58024800 	.word	0x58024800

08006c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e3ff      	b.n	800747a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8087 	beq.w	8006d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c88:	4b99      	ldr	r3, [pc, #612]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c92:	4b97      	ldr	r3, [pc, #604]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d007      	beq.n	8006cae <HAL_RCC_OscConfig+0x46>
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	2b18      	cmp	r3, #24
 8006ca2:	d110      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x5e>
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d10b      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cae:	4b90      	ldr	r3, [pc, #576]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06c      	beq.n	8006d94 <HAL_RCC_OscConfig+0x12c>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d168      	bne.n	8006d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e3d9      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cce:	d106      	bne.n	8006cde <HAL_RCC_OscConfig+0x76>
 8006cd0:	4b87      	ldr	r3, [pc, #540]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a86      	ldr	r2, [pc, #536]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e02e      	b.n	8006d3c <HAL_RCC_OscConfig+0xd4>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <HAL_RCC_OscConfig+0x98>
 8006ce6:	4b82      	ldr	r3, [pc, #520]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a81      	ldr	r2, [pc, #516]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	4b7f      	ldr	r3, [pc, #508]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7e      	ldr	r2, [pc, #504]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	e01d      	b.n	8006d3c <HAL_RCC_OscConfig+0xd4>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d08:	d10c      	bne.n	8006d24 <HAL_RCC_OscConfig+0xbc>
 8006d0a:	4b79      	ldr	r3, [pc, #484]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a78      	ldr	r2, [pc, #480]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	4b76      	ldr	r3, [pc, #472]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a75      	ldr	r2, [pc, #468]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e00b      	b.n	8006d3c <HAL_RCC_OscConfig+0xd4>
 8006d24:	4b72      	ldr	r3, [pc, #456]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a71      	ldr	r2, [pc, #452]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	4b6f      	ldr	r3, [pc, #444]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a6e      	ldr	r2, [pc, #440]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fd fee8 	bl	8004b18 <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d4c:	f7fd fee4 	bl	8004b18 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b64      	cmp	r3, #100	; 0x64
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e38d      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d5e:	4b64      	ldr	r3, [pc, #400]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0xe4>
 8006d6a:	e014      	b.n	8006d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6c:	f7fd fed4 	bl	8004b18 <HAL_GetTick>
 8006d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d74:	f7fd fed0 	bl	8004b18 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b64      	cmp	r3, #100	; 0x64
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e379      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d86:	4b5a      	ldr	r3, [pc, #360]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f0      	bne.n	8006d74 <HAL_RCC_OscConfig+0x10c>
 8006d92:	e000      	b.n	8006d96 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80ae 	beq.w	8006f00 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da4:	4b52      	ldr	r3, [pc, #328]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dae:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_RCC_OscConfig+0x162>
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	2b18      	cmp	r3, #24
 8006dbe:	d13a      	bne.n	8006e36 <HAL_RCC_OscConfig+0x1ce>
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d135      	bne.n	8006e36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dca:	4b49      	ldr	r3, [pc, #292]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <HAL_RCC_OscConfig+0x17a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e34b      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de2:	f7fd fec9 	bl	8004b78 <HAL_GetREVID>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d817      	bhi.n	8006e20 <HAL_RCC_OscConfig+0x1b8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d108      	bne.n	8006e0a <HAL_RCC_OscConfig+0x1a2>
 8006df8:	4b3d      	ldr	r3, [pc, #244]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e00:	4a3b      	ldr	r2, [pc, #236]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e08:	e07a      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	031b      	lsls	r3, r3, #12
 8006e18:	4935      	ldr	r1, [pc, #212]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e1e:	e06f      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e20:	4b33      	ldr	r3, [pc, #204]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	4930      	ldr	r1, [pc, #192]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e34:	e064      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d045      	beq.n	8006eca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e3e:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 0219 	bic.w	r2, r3, #25
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4929      	ldr	r1, [pc, #164]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fd fe62 	bl	8004b18 <HAL_GetTick>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e58:	f7fd fe5e 	bl	8004b18 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e307      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e6a:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e76:	f7fd fe7f 	bl	8004b78 <HAL_GetREVID>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d817      	bhi.n	8006eb4 <HAL_RCC_OscConfig+0x24c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d108      	bne.n	8006e9e <HAL_RCC_OscConfig+0x236>
 8006e8c:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e94:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9a:	6053      	str	r3, [r2, #4]
 8006e9c:	e030      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	031b      	lsls	r3, r3, #12
 8006eac:	4910      	ldr	r1, [pc, #64]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	604b      	str	r3, [r1, #4]
 8006eb2:	e025      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	604b      	str	r3, [r1, #4]
 8006ec8:	e01a      	b.n	8006f00 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <HAL_RCC_OscConfig+0x288>)
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed6:	f7fd fe1f 	bl	8004b18 <HAL_GetTick>
 8006eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006edc:	e00a      	b.n	8006ef4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ede:	f7fd fe1b 	bl	8004b18 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d903      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e2c4      	b.n	800747a <HAL_RCC_OscConfig+0x812>
 8006ef0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ef4:	4ba4      	ldr	r3, [pc, #656]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1ee      	bne.n	8006ede <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80a9 	beq.w	8007060 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f0e:	4b9e      	ldr	r3, [pc, #632]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f18:	4b9b      	ldr	r3, [pc, #620]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d007      	beq.n	8006f34 <HAL_RCC_OscConfig+0x2cc>
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b18      	cmp	r3, #24
 8006f28:	d13a      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x338>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d135      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f34:	4b94      	ldr	r3, [pc, #592]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_OscConfig+0x2e4>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e296      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f4c:	f7fd fe14 	bl	8004b78 <HAL_GetREVID>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d817      	bhi.n	8006f8a <HAL_RCC_OscConfig+0x322>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d108      	bne.n	8006f74 <HAL_RCC_OscConfig+0x30c>
 8006f62:	4b89      	ldr	r3, [pc, #548]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f6a:	4a87      	ldr	r2, [pc, #540]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f72:	e075      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	069b      	lsls	r3, r3, #26
 8006f82:	4981      	ldr	r1, [pc, #516]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f88:	e06a      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	497b      	ldr	r1, [pc, #492]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f9e:	e05f      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d042      	beq.n	800702e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006fa8:	4b77      	ldr	r3, [pc, #476]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a76      	ldr	r2, [pc, #472]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fd fdb0 	bl	8004b18 <HAL_GetTick>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006fbc:	f7fd fdac 	bl	8004b18 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e255      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fce:	4b6e      	ldr	r3, [pc, #440]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fda:	f7fd fdcd 	bl	8004b78 <HAL_GetREVID>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d817      	bhi.n	8007018 <HAL_RCC_OscConfig+0x3b0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d108      	bne.n	8007002 <HAL_RCC_OscConfig+0x39a>
 8006ff0:	4b65      	ldr	r3, [pc, #404]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ff8:	4a63      	ldr	r2, [pc, #396]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8006ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ffe:	6053      	str	r3, [r2, #4]
 8007000:	e02e      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
 8007002:	4b61      	ldr	r3, [pc, #388]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	069b      	lsls	r3, r3, #26
 8007010:	495d      	ldr	r1, [pc, #372]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007012:	4313      	orrs	r3, r2
 8007014:	604b      	str	r3, [r1, #4]
 8007016:	e023      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
 8007018:	4b5b      	ldr	r3, [pc, #364]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	4958      	ldr	r1, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007028:	4313      	orrs	r3, r2
 800702a:	60cb      	str	r3, [r1, #12]
 800702c:	e018      	b.n	8007060 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800702e:	4b56      	ldr	r3, [pc, #344]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a55      	ldr	r2, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703a:	f7fd fd6d 	bl	8004b18 <HAL_GetTick>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007042:	f7fd fd69 	bl	8004b18 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e212      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007054:	4b4c      	ldr	r3, [pc, #304]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d036      	beq.n	80070da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d019      	beq.n	80070a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007074:	4b44      	ldr	r3, [pc, #272]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007078:	4a43      	ldr	r2, [pc, #268]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007080:	f7fd fd4a 	bl	8004b18 <HAL_GetTick>
 8007084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007088:	f7fd fd46 	bl	8004b18 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e1ef      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 800709c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0x420>
 80070a6:	e018      	b.n	80070da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070a8:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 80070aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ac:	4a36      	ldr	r2, [pc, #216]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b4:	f7fd fd30 	bl	8004b18 <HAL_GetTick>
 80070b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070bc:	f7fd fd2c 	bl	8004b18 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1d5      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070ce:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 80070d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d036      	beq.n	8007154 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070ee:	4b26      	ldr	r3, [pc, #152]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a25      	ldr	r2, [pc, #148]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 80070f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070fa:	f7fd fd0d 	bl	8004b18 <HAL_GetTick>
 80070fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007102:	f7fd fd09 	bl	8004b18 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e1b2      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x49a>
 8007120:	e018      	b.n	8007154 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 8007128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800712c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800712e:	f7fd fcf3 	bl	8004b18 <HAL_GetTick>
 8007132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007136:	f7fd fcef 	bl	8004b18 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e198      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <HAL_RCC_OscConfig+0x520>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8085 	beq.w	800726c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <HAL_RCC_OscConfig+0x524>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <HAL_RCC_OscConfig+0x524>)
 8007168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800716e:	f7fd fcd3 	bl	8004b18 <HAL_GetTick>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007174:	e00c      	b.n	8007190 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007176:	f7fd fccf 	bl	8004b18 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b64      	cmp	r3, #100	; 0x64
 8007182:	d905      	bls.n	8007190 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e178      	b.n	800747a <HAL_RCC_OscConfig+0x812>
 8007188:	58024400 	.word	0x58024400
 800718c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007190:	4b96      	ldr	r3, [pc, #600]	; (80073ec <HAL_RCC_OscConfig+0x784>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0ec      	beq.n	8007176 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d106      	bne.n	80071b2 <HAL_RCC_OscConfig+0x54a>
 80071a4:	4b92      	ldr	r3, [pc, #584]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	4a91      	ldr	r2, [pc, #580]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	6713      	str	r3, [r2, #112]	; 0x70
 80071b0:	e02d      	b.n	800720e <HAL_RCC_OscConfig+0x5a6>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10c      	bne.n	80071d4 <HAL_RCC_OscConfig+0x56c>
 80071ba:	4b8d      	ldr	r3, [pc, #564]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	4a8c      	ldr	r2, [pc, #560]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	6713      	str	r3, [r2, #112]	; 0x70
 80071c6:	4b8a      	ldr	r3, [pc, #552]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	4a89      	ldr	r2, [pc, #548]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071cc:	f023 0304 	bic.w	r3, r3, #4
 80071d0:	6713      	str	r3, [r2, #112]	; 0x70
 80071d2:	e01c      	b.n	800720e <HAL_RCC_OscConfig+0x5a6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b05      	cmp	r3, #5
 80071da:	d10c      	bne.n	80071f6 <HAL_RCC_OscConfig+0x58e>
 80071dc:	4b84      	ldr	r3, [pc, #528]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a83      	ldr	r2, [pc, #524]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071e2:	f043 0304 	orr.w	r3, r3, #4
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
 80071e8:	4b81      	ldr	r3, [pc, #516]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a80      	ldr	r2, [pc, #512]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
 80071f4:	e00b      	b.n	800720e <HAL_RCC_OscConfig+0x5a6>
 80071f6:	4b7e      	ldr	r3, [pc, #504]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	4a7d      	ldr	r2, [pc, #500]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	6713      	str	r3, [r2, #112]	; 0x70
 8007202:	4b7b      	ldr	r3, [pc, #492]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a7a      	ldr	r2, [pc, #488]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007208:	f023 0304 	bic.w	r3, r3, #4
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d015      	beq.n	8007242 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007216:	f7fd fc7f 	bl	8004b18 <HAL_GetTick>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800721c:	e00a      	b.n	8007234 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800721e:	f7fd fc7b 	bl	8004b18 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f241 3288 	movw	r2, #5000	; 0x1388
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e122      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007234:	4b6e      	ldr	r3, [pc, #440]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0ee      	beq.n	800721e <HAL_RCC_OscConfig+0x5b6>
 8007240:	e014      	b.n	800726c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fd fc69 	bl	8004b18 <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007248:	e00a      	b.n	8007260 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fd fc65 	bl	8004b18 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	; 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e10c      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007260:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ee      	bne.n	800724a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 8101 	beq.w	8007478 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007276:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727e:	2b18      	cmp	r3, #24
 8007280:	f000 80bc 	beq.w	80073fc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b02      	cmp	r3, #2
 800728a:	f040 8095 	bne.w	80073b8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800728e:	4b58      	ldr	r3, [pc, #352]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a57      	ldr	r2, [pc, #348]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729a:	f7fd fc3d 	bl	8004b18 <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a2:	f7fd fc39 	bl	8004b18 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0e2      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b4:	4b4e      	ldr	r3, [pc, #312]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f0      	bne.n	80072a2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072c0:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80072c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072c4:	4b4b      	ldr	r3, [pc, #300]	; (80073f4 <HAL_RCC_OscConfig+0x78c>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	430a      	orrs	r2, r1
 80072d4:	4946      	ldr	r1, [pc, #280]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	628b      	str	r3, [r1, #40]	; 0x28
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	3b01      	subs	r3, #1
 80072e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	3b01      	subs	r3, #1
 80072ea:	025b      	lsls	r3, r3, #9
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	3b01      	subs	r3, #1
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	3b01      	subs	r3, #1
 8007304:	061b      	lsls	r3, r3, #24
 8007306:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800730a:	4939      	ldr	r1, [pc, #228]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800730c:	4313      	orrs	r3, r2
 800730e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007310:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a36      	ldr	r2, [pc, #216]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800731c:	4b34      	ldr	r3, [pc, #208]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800731e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007320:	4b35      	ldr	r3, [pc, #212]	; (80073f8 <HAL_RCC_OscConfig+0x790>)
 8007322:	4013      	ands	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007328:	00d2      	lsls	r2, r2, #3
 800732a:	4931      	ldr	r1, [pc, #196]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800732c:	4313      	orrs	r3, r2
 800732e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007330:	4b2f      	ldr	r3, [pc, #188]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f023 020c 	bic.w	r2, r3, #12
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	492c      	ldr	r1, [pc, #176]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800733e:	4313      	orrs	r3, r2
 8007340:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	f023 0202 	bic.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4928      	ldr	r1, [pc, #160]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007350:	4313      	orrs	r3, r2
 8007352:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007354:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a25      	ldr	r2, [pc, #148]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007360:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	4a22      	ldr	r2, [pc, #136]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800736a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800736c:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007378:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 800738a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800738e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fd fbc2 	bl	8004b18 <HAL_GetTick>
 8007394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007398:	f7fd fbbe 	bl	8004b18 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e067      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0x730>
 80073b6:	e05f      	b.n	8007478 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a0c      	ldr	r2, [pc, #48]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fd fba8 	bl	8004b18 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fd fba4 	bl	8004b18 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e04d      	b.n	800747a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073de:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <HAL_RCC_OscConfig+0x788>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x764>
 80073ea:	e045      	b.n	8007478 <HAL_RCC_OscConfig+0x810>
 80073ec:	58024800 	.word	0x58024800
 80073f0:	58024400 	.word	0x58024400
 80073f4:	fffffc0c 	.word	0xfffffc0c
 80073f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073fc:	4b21      	ldr	r3, [pc, #132]	; (8007484 <HAL_RCC_OscConfig+0x81c>)
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007402:	4b20      	ldr	r3, [pc, #128]	; (8007484 <HAL_RCC_OscConfig+0x81c>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b01      	cmp	r3, #1
 800740e:	d031      	beq.n	8007474 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f003 0203 	and.w	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800741a:	429a      	cmp	r2, r3
 800741c:	d12a      	bne.n	8007474 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	091b      	lsrs	r3, r3, #4
 8007422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742a:	429a      	cmp	r2, r3
 800742c:	d122      	bne.n	8007474 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800743a:	429a      	cmp	r2, r3
 800743c:	d11a      	bne.n	8007474 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	0a5b      	lsrs	r3, r3, #9
 8007442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800744c:	429a      	cmp	r2, r3
 800744e:	d111      	bne.n	8007474 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800745e:	429a      	cmp	r2, r3
 8007460:	d108      	bne.n	8007474 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	0e1b      	lsrs	r3, r3, #24
 8007466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007470:	429a      	cmp	r2, r3
 8007472:	d001      	beq.n	8007478 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3730      	adds	r7, #48	; 0x30
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	58024400 	.word	0x58024400

08007488 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e19c      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800749c:	4b8a      	ldr	r3, [pc, #552]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d910      	bls.n	80074cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074aa:	4b87      	ldr	r3, [pc, #540]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 020f 	bic.w	r2, r3, #15
 80074b2:	4985      	ldr	r1, [pc, #532]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ba:	4b83      	ldr	r3, [pc, #524]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e184      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	4b7b      	ldr	r3, [pc, #492]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d908      	bls.n	80074fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074e8:	4b78      	ldr	r3, [pc, #480]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4975      	ldr	r1, [pc, #468]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	695a      	ldr	r2, [r3, #20]
 800750a:	4b70      	ldr	r3, [pc, #448]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007512:	429a      	cmp	r2, r3
 8007514:	d908      	bls.n	8007528 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007516:	4b6d      	ldr	r3, [pc, #436]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	496a      	ldr	r1, [pc, #424]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007524:	4313      	orrs	r3, r2
 8007526:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	4b64      	ldr	r3, [pc, #400]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007540:	429a      	cmp	r2, r3
 8007542:	d908      	bls.n	8007556 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007544:	4b61      	ldr	r3, [pc, #388]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	495e      	ldr	r1, [pc, #376]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007552:	4313      	orrs	r3, r2
 8007554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d010      	beq.n	8007584 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	4b59      	ldr	r3, [pc, #356]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800756e:	429a      	cmp	r2, r3
 8007570:	d908      	bls.n	8007584 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007572:	4b56      	ldr	r3, [pc, #344]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4953      	ldr	r1, [pc, #332]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007580:	4313      	orrs	r3, r2
 8007582:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d010      	beq.n	80075b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	4b4d      	ldr	r3, [pc, #308]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	429a      	cmp	r2, r3
 800759e:	d908      	bls.n	80075b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075a0:	4b4a      	ldr	r3, [pc, #296]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f023 020f 	bic.w	r2, r3, #15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4947      	ldr	r1, [pc, #284]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d055      	beq.n	800766a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075be:	4b43      	ldr	r3, [pc, #268]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	4940      	ldr	r1, [pc, #256]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d107      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075d8:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d121      	bne.n	8007628 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0f6      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d107      	bne.n	8007600 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075f0:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d115      	bne.n	8007628 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0ea      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d107      	bne.n	8007618 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007608:	4b30      	ldr	r3, [pc, #192]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0de      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007618:	4b2c      	ldr	r3, [pc, #176]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0d6      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f023 0207 	bic.w	r2, r3, #7
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4925      	ldr	r1, [pc, #148]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800763a:	f7fd fa6d 	bl	8004b18 <HAL_GetTick>
 800763e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007640:	e00a      	b.n	8007658 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007642:	f7fd fa69 	bl	8004b18 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e0be      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007658:	4b1c      	ldr	r3, [pc, #112]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	429a      	cmp	r2, r3
 8007668:	d1eb      	bne.n	8007642 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d010      	beq.n	8007698 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	4b14      	ldr	r3, [pc, #80]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	429a      	cmp	r2, r3
 8007684:	d208      	bcs.n	8007698 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007686:	4b11      	ldr	r3, [pc, #68]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f023 020f 	bic.w	r2, r3, #15
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	490e      	ldr	r1, [pc, #56]	; (80076cc <HAL_RCC_ClockConfig+0x244>)
 8007694:	4313      	orrs	r3, r2
 8007696:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007698:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d214      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 020f 	bic.w	r2, r3, #15
 80076ae:	4906      	ldr	r1, [pc, #24]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076b6:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <HAL_RCC_ClockConfig+0x240>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e086      	b.n	80077d6 <HAL_RCC_ClockConfig+0x34e>
 80076c8:	52002000 	.word	0x52002000
 80076cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d010      	beq.n	80076fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	4b3f      	ldr	r3, [pc, #252]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d208      	bcs.n	80076fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076ec:	4b3c      	ldr	r3, [pc, #240]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	4939      	ldr	r1, [pc, #228]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d010      	beq.n	800772c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695a      	ldr	r2, [r3, #20]
 800770e:	4b34      	ldr	r3, [pc, #208]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007716:	429a      	cmp	r2, r3
 8007718:	d208      	bcs.n	800772c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800771a:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	492e      	ldr	r1, [pc, #184]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007728:	4313      	orrs	r3, r2
 800772a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007744:	429a      	cmp	r2, r3
 8007746:	d208      	bcs.n	800775a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	4922      	ldr	r1, [pc, #136]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007756:	4313      	orrs	r3, r2
 8007758:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d010      	beq.n	8007788 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007772:	429a      	cmp	r2, r3
 8007774:	d208      	bcs.n	8007788 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4917      	ldr	r1, [pc, #92]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007784:	4313      	orrs	r3, r2
 8007786:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007788:	f000 f834 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 800778c:	4602      	mov	r2, r0
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	4912      	ldr	r1, [pc, #72]	; (80077e4 <HAL_RCC_ClockConfig+0x35c>)
 800779a:	5ccb      	ldrb	r3, [r1, r3]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <HAL_RCC_ClockConfig+0x358>)
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	4a0d      	ldr	r2, [pc, #52]	; (80077e4 <HAL_RCC_ClockConfig+0x35c>)
 80077b0:	5cd3      	ldrb	r3, [r2, r3]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
 80077bc:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <HAL_RCC_ClockConfig+0x360>)
 80077be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <HAL_RCC_ClockConfig+0x364>)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <HAL_RCC_ClockConfig+0x368>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd f95a 	bl	8004a84 <HAL_InitTick>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
 80077e4:	0800b080 	.word	0x0800b080
 80077e8:	24000008 	.word	0x24000008
 80077ec:	24000004 	.word	0x24000004
 80077f0:	2400000c 	.word	0x2400000c

080077f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	; 0x24
 80077f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077fa:	4bb3      	ldr	r3, [pc, #716]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007802:	2b18      	cmp	r3, #24
 8007804:	f200 8155 	bhi.w	8007ab2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <HAL_RCC_GetSysClockFreq+0x1c>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007875 	.word	0x08007875
 8007814:	08007ab3 	.word	0x08007ab3
 8007818:	08007ab3 	.word	0x08007ab3
 800781c:	08007ab3 	.word	0x08007ab3
 8007820:	08007ab3 	.word	0x08007ab3
 8007824:	08007ab3 	.word	0x08007ab3
 8007828:	08007ab3 	.word	0x08007ab3
 800782c:	08007ab3 	.word	0x08007ab3
 8007830:	0800789b 	.word	0x0800789b
 8007834:	08007ab3 	.word	0x08007ab3
 8007838:	08007ab3 	.word	0x08007ab3
 800783c:	08007ab3 	.word	0x08007ab3
 8007840:	08007ab3 	.word	0x08007ab3
 8007844:	08007ab3 	.word	0x08007ab3
 8007848:	08007ab3 	.word	0x08007ab3
 800784c:	08007ab3 	.word	0x08007ab3
 8007850:	080078a1 	.word	0x080078a1
 8007854:	08007ab3 	.word	0x08007ab3
 8007858:	08007ab3 	.word	0x08007ab3
 800785c:	08007ab3 	.word	0x08007ab3
 8007860:	08007ab3 	.word	0x08007ab3
 8007864:	08007ab3 	.word	0x08007ab3
 8007868:	08007ab3 	.word	0x08007ab3
 800786c:	08007ab3 	.word	0x08007ab3
 8007870:	080078a7 	.word	0x080078a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007874:	4b94      	ldr	r3, [pc, #592]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007880:	4b91      	ldr	r3, [pc, #580]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	08db      	lsrs	r3, r3, #3
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	4a90      	ldr	r2, [pc, #576]	; (8007acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007892:	e111      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007894:	4b8d      	ldr	r3, [pc, #564]	; (8007acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007896:	61bb      	str	r3, [r7, #24]
    break;
 8007898:	e10e      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800789a:	4b8d      	ldr	r3, [pc, #564]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800789c:	61bb      	str	r3, [r7, #24]
    break;
 800789e:	e10b      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80078a0:	4b8c      	ldr	r3, [pc, #560]	; (8007ad4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078a2:	61bb      	str	r3, [r7, #24]
    break;
 80078a4:	e108      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078a6:	4b88      	ldr	r3, [pc, #544]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80078b0:	4b85      	ldr	r3, [pc, #532]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078bc:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078c6:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	08db      	lsrs	r3, r3, #3
 80078cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80e1 	beq.w	8007aac <HAL_RCC_GetSysClockFreq+0x2b8>
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	f000 8083 	beq.w	80079f8 <HAL_RCC_GetSysClockFreq+0x204>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f200 80a1 	bhi.w	8007a3c <HAL_RCC_GetSysClockFreq+0x248>
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <HAL_RCC_GetSysClockFreq+0x114>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d056      	beq.n	80079b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007906:	e099      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007908:	4b6f      	ldr	r3, [pc, #444]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d02d      	beq.n	8007970 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007914:	4b6c      	ldr	r3, [pc, #432]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	08db      	lsrs	r3, r3, #3
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	4a6b      	ldr	r2, [pc, #428]	; (8007acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
 8007924:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793e:	4b62      	ldr	r3, [pc, #392]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007952:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800796e:	e087      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007adc <HAL_RCC_GetSysClockFreq+0x2e8>
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	4b51      	ldr	r3, [pc, #324]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007992:	ed97 6a02 	vldr	s12, [r7, #8]
 8007996:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800799a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b2:	e065      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c6:	4b40      	ldr	r3, [pc, #256]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f6:	e043      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007ae4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a3a:	e021      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	0a5b      	lsrs	r3, r3, #9
 8007a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa4:	ee17 3a90 	vmov	r3, s15
 8007aa8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007aaa:	e005      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61bb      	str	r3, [r7, #24]
    break;
 8007ab0:	e002      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007ab2:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ab4:	61bb      	str	r3, [r7, #24]
    break;
 8007ab6:	bf00      	nop
  }

  return sysclockfreq;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3724      	adds	r7, #36	; 0x24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	03d09000 	.word	0x03d09000
 8007ad0:	003d0900 	.word	0x003d0900
 8007ad4:	007a1200 	.word	0x007a1200
 8007ad8:	46000000 	.word	0x46000000
 8007adc:	4c742400 	.word	0x4c742400
 8007ae0:	4a742400 	.word	0x4a742400
 8007ae4:	4af42400 	.word	0x4af42400

08007ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007aee:	f7ff fe81 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	490f      	ldr	r1, [pc, #60]	; (8007b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b00:	5ccb      	ldrb	r3, [r1, r3]
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b16:	5cd3      	ldrb	r3, [r2, r3]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b26:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	0800b080 	.word	0x0800b080
 8007b40:	24000008 	.word	0x24000008
 8007b44:	24000004 	.word	0x24000004

08007b48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b54:	2300      	movs	r3, #0
 8007b56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d03f      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b6c:	d02a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b72:	d824      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b78:	d018      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b7e:	d81e      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b88:	d007      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b8a:	e018      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8c:	4bab      	ldr	r3, [pc, #684]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4aaa      	ldr	r2, [pc, #680]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b98:	e015      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	2102      	movs	r1, #2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fdc9 	bl	8009738 <RCCEx_PLL2_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007baa:	e00c      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3324      	adds	r3, #36	; 0x24
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fe72 	bl	800989c <RCCEx_PLL3_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007bbc:	e003      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bcc:	4b9b      	ldr	r3, [pc, #620]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	4998      	ldr	r1, [pc, #608]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8007bde:	e001      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d03d      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d826      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c15 	.word	0x08007c15
 8007c04:	08007c23 	.word	0x08007c23
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	08007c4d 	.word	0x08007c4d
 8007c10:	08007c4d 	.word	0x08007c4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c14:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	4a88      	ldr	r2, [pc, #544]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c20:	e015      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3304      	adds	r3, #4
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 fd85 	bl	8009738 <RCCEx_PLL2_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c32:	e00c      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fe2e 	bl	800989c <RCCEx_PLL3_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c44:	e003      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4a:	e000      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c54:	4b79      	ldr	r3, [pc, #484]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	f023 0207 	bic.w	r2, r3, #7
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	4976      	ldr	r1, [pc, #472]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	650b      	str	r3, [r1, #80]	; 0x50
 8007c66:	e001      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d042      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c80:	d02b      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	d825      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c88:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8a:	d028      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c8c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8e:	d821      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d016      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d81d      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d007      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ca0:	e018      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca2:	4b66      	ldr	r3, [pc, #408]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	4a65      	ldr	r2, [pc, #404]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007cae:	e017      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fd3e 	bl	8009738 <RCCEx_PLL2_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007cc0:	e00e      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3324      	adds	r3, #36	; 0x24
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fde7 	bl	800989c <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007cd2:	e005      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ce6:	4b55      	ldr	r3, [pc, #340]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	4952      	ldr	r1, [pc, #328]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	650b      	str	r3, [r1, #80]	; 0x50
 8007cf8:	e001      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d049      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d14:	d030      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d1a:	d82a      	bhi.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d20:	d02c      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007d22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d26:	d824      	bhi.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d2c:	d018      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d32:	d81e      	bhi.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d3c:	d007      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007d3e:	e018      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d40:	4b3e      	ldr	r3, [pc, #248]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a3d      	ldr	r2, [pc, #244]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d4c:	e017      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fcef 	bl	8009738 <RCCEx_PLL2_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d5e:	e00e      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	2100      	movs	r1, #0
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 fd98 	bl	800989c <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d70:	e005      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
      break;
 8007d76:	e002      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e000      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d84:	4b2d      	ldr	r3, [pc, #180]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d92:	492a      	ldr	r1, [pc, #168]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	658b      	str	r3, [r1, #88]	; 0x58
 8007d98:	e001      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d04c      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007db4:	d030      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dba:	d82a      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007dbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dc0:	d02c      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007dc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dc6:	d824      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dcc:	d018      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd2:	d81e      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ddc:	d007      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007dde:	e018      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de0:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dec:	e017      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3304      	adds	r3, #4
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 fc9f 	bl	8009738 <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007dfe:	e00e      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 fd48 	bl	800989c <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e10:	e005      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75fb      	strb	r3, [r7, #23]
      break;
 8007e16:	e002      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e32:	4902      	ldr	r1, [pc, #8]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	658b      	str	r3, [r1, #88]	; 0x58
 8007e38:	e004      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007e3a:	bf00      	nop
 8007e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d032      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e54:	2b30      	cmp	r3, #48	; 0x30
 8007e56:	d01c      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d817      	bhi.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d00c      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d813      	bhi.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d016      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d10f      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4baf      	ldr	r3, [pc, #700]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4aae      	ldr	r2, [pc, #696]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e78:	e00e      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	2102      	movs	r1, #2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fc59 	bl	8009738 <RCCEx_PLL2_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e8a:	e005      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e90:	e002      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e92:	bf00      	nop
 8007e94:	e000      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e9e:	4ba3      	ldr	r3, [pc, #652]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eaa:	49a0      	ldr	r1, [pc, #640]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007eb0:	e001      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d047      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eca:	d030      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed0:	d82a      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ed6:	d02c      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007ed8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007edc:	d824      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee2:	d018      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee8:	d81e      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d007      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007ef4:	e018      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef6:	4b8d      	ldr	r3, [pc, #564]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	4a8c      	ldr	r2, [pc, #560]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f02:	e017      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fc14 	bl	8009738 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f14:	e00e      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3324      	adds	r3, #36	; 0x24
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fcbd 	bl	800989c <RCCEx_PLL3_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f26:	e005      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2c:	e002      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e000      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f3a:	4b7c      	ldr	r3, [pc, #496]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f46:	4979      	ldr	r1, [pc, #484]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f4c:	e001      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d049      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f66:	d02e      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f6c:	d828      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f72:	d02a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f78:	d822      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f7e:	d026      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f84:	d81c      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8a:	d010      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f90:	d816      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01d      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9a:	d111      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fbc8 	bl	8009738 <RCCEx_PLL2_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007fac:	e012      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 fc71 	bl	800989c <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007fbe:	e009      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc4:	e006      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fda:	4b54      	ldr	r3, [pc, #336]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe6:	4951      	ldr	r1, [pc, #324]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	650b      	str	r3, [r1, #80]	; 0x50
 8007fec:	e001      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d04b      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008008:	d02e      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800800a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800800e:	d828      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008014:	d02a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801a:	d822      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800801c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008020:	d026      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008026:	d81c      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802c:	d010      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800802e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008032:	d816      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01d      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803c:	d111      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3304      	adds	r3, #4
 8008042:	2101      	movs	r1, #1
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fb77 	bl	8009738 <RCCEx_PLL2_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800804e:	e012      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3324      	adds	r3, #36	; 0x24
 8008054:	2101      	movs	r1, #1
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fc20 	bl	800989c <RCCEx_PLL3_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008060:	e009      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
      break;
 8008066:	e006      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008068:	bf00      	nop
 800806a:	e004      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800806c:	bf00      	nop
 800806e:	e002      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800807c:	4b2b      	ldr	r3, [pc, #172]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008080:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800808a:	4928      	ldr	r1, [pc, #160]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800808c:	4313      	orrs	r3, r2
 800808e:	658b      	str	r3, [r1, #88]	; 0x58
 8008090:	e001      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02f      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080aa:	d00e      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b0:	d814      	bhi.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d015      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80080b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ba:	d10f      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080bc:	4b1b      	ldr	r3, [pc, #108]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4a1a      	ldr	r2, [pc, #104]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80080c8:	e00c      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	2101      	movs	r1, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 fb31 	bl	8009738 <RCCEx_PLL2_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	75fb      	strb	r3, [r7, #23]
      break;
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80080e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f6:	490d      	ldr	r1, [pc, #52]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	650b      	str	r3, [r1, #80]	; 0x50
 80080fc:	e001      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d033      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	2b03      	cmp	r3, #3
 8008114:	d81c      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008157 	.word	0x08008157
 8008120:	08008131 	.word	0x08008131
 8008124:	0800813f 	.word	0x0800813f
 8008128:	08008157 	.word	0x08008157
 800812c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008130:	4bb8      	ldr	r3, [pc, #736]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4ab7      	ldr	r2, [pc, #732]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800813a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800813c:	e00c      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3304      	adds	r3, #4
 8008142:	2102      	movs	r1, #2
 8008144:	4618      	mov	r0, r3
 8008146:	f001 faf7 	bl	8009738 <RCCEx_PLL2_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]
      break;
 8008154:	e000      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800815e:	4bad      	ldr	r3, [pc, #692]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008162:	f023 0203 	bic.w	r2, r3, #3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816a:	49aa      	ldr	r1, [pc, #680]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800816c:	4313      	orrs	r3, r2
 800816e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008170:	e001      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8086 	beq.w	8008290 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008184:	4ba4      	ldr	r3, [pc, #656]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4aa3      	ldr	r2, [pc, #652]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800818a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008190:	f7fc fcc2 	bl	8004b18 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008196:	e009      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008198:	f7fc fcbe 	bl	8004b18 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d902      	bls.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	75fb      	strb	r3, [r7, #23]
        break;
 80081aa:	e005      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ac:	4b9a      	ldr	r3, [pc, #616]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0ef      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d166      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081be:	4b95      	ldr	r3, [pc, #596]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081c8:	4053      	eors	r3, r2
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d013      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081d2:	4b90      	ldr	r3, [pc, #576]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081dc:	4b8d      	ldr	r3, [pc, #564]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e0:	4a8c      	ldr	r2, [pc, #560]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081e8:	4b8a      	ldr	r3, [pc, #552]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ec:	4a89      	ldr	r2, [pc, #548]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081f4:	4a87      	ldr	r2, [pc, #540]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008204:	d115      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008206:	f7fc fc87 	bl	8004b18 <HAL_GetTick>
 800820a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800820c:	e00b      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800820e:	f7fc fc83 	bl	8004b18 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f241 3288 	movw	r2, #5000	; 0x1388
 800821c:	4293      	cmp	r3, r2
 800821e:	d902      	bls.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	75fb      	strb	r3, [r7, #23]
            break;
 8008224:	e005      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008226:	4b7b      	ldr	r3, [pc, #492]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0ed      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d126      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800823e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008246:	d10d      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008248:	4b72      	ldr	r3, [pc, #456]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008256:	0919      	lsrs	r1, r3, #4
 8008258:	4b70      	ldr	r3, [pc, #448]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800825a:	400b      	ands	r3, r1
 800825c:	496d      	ldr	r1, [pc, #436]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825e:	4313      	orrs	r3, r2
 8008260:	610b      	str	r3, [r1, #16]
 8008262:	e005      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008264:	4b6b      	ldr	r3, [pc, #428]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	4a6a      	ldr	r2, [pc, #424]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800826a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800826e:	6113      	str	r3, [r2, #16]
 8008270:	4b68      	ldr	r3, [pc, #416]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800827a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800827e:	4965      	ldr	r1, [pc, #404]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008280:	4313      	orrs	r3, r2
 8008282:	670b      	str	r3, [r1, #112]	; 0x70
 8008284:	e004      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	75bb      	strb	r3, [r7, #22]
 800828a:	e001      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d07e      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a0:	2b28      	cmp	r3, #40	; 0x28
 80082a2:	d867      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	0800837b 	.word	0x0800837b
 80082b0:	08008375 	.word	0x08008375
 80082b4:	08008375 	.word	0x08008375
 80082b8:	08008375 	.word	0x08008375
 80082bc:	08008375 	.word	0x08008375
 80082c0:	08008375 	.word	0x08008375
 80082c4:	08008375 	.word	0x08008375
 80082c8:	08008375 	.word	0x08008375
 80082cc:	08008351 	.word	0x08008351
 80082d0:	08008375 	.word	0x08008375
 80082d4:	08008375 	.word	0x08008375
 80082d8:	08008375 	.word	0x08008375
 80082dc:	08008375 	.word	0x08008375
 80082e0:	08008375 	.word	0x08008375
 80082e4:	08008375 	.word	0x08008375
 80082e8:	08008375 	.word	0x08008375
 80082ec:	08008363 	.word	0x08008363
 80082f0:	08008375 	.word	0x08008375
 80082f4:	08008375 	.word	0x08008375
 80082f8:	08008375 	.word	0x08008375
 80082fc:	08008375 	.word	0x08008375
 8008300:	08008375 	.word	0x08008375
 8008304:	08008375 	.word	0x08008375
 8008308:	08008375 	.word	0x08008375
 800830c:	0800837b 	.word	0x0800837b
 8008310:	08008375 	.word	0x08008375
 8008314:	08008375 	.word	0x08008375
 8008318:	08008375 	.word	0x08008375
 800831c:	08008375 	.word	0x08008375
 8008320:	08008375 	.word	0x08008375
 8008324:	08008375 	.word	0x08008375
 8008328:	08008375 	.word	0x08008375
 800832c:	0800837b 	.word	0x0800837b
 8008330:	08008375 	.word	0x08008375
 8008334:	08008375 	.word	0x08008375
 8008338:	08008375 	.word	0x08008375
 800833c:	08008375 	.word	0x08008375
 8008340:	08008375 	.word	0x08008375
 8008344:	08008375 	.word	0x08008375
 8008348:	08008375 	.word	0x08008375
 800834c:	0800837b 	.word	0x0800837b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	2101      	movs	r1, #1
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f9ee 	bl	8009738 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008360:	e00c      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3324      	adds	r3, #36	; 0x24
 8008366:	2101      	movs	r1, #1
 8008368:	4618      	mov	r0, r3
 800836a:	f001 fa97 	bl	800989c <RCCEx_PLL3_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008372:	e003      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
      break;
 8008378:	e000      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800837a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838e:	4921      	ldr	r1, [pc, #132]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008390:	4313      	orrs	r3, r2
 8008392:	654b      	str	r3, [r1, #84]	; 0x54
 8008394:	e001      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d03e      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d820      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083f7 	.word	0x080083f7
 80083b8:	080083cd 	.word	0x080083cd
 80083bc:	080083df 	.word	0x080083df
 80083c0:	080083f7 	.word	0x080083f7
 80083c4:	080083f7 	.word	0x080083f7
 80083c8:	080083f7 	.word	0x080083f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	2101      	movs	r1, #1
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 f9b0 	bl	8009738 <RCCEx_PLL2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083dc:	e00c      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	2101      	movs	r1, #1
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fa59 	bl	800989c <RCCEx_PLL3_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083ee:	e003      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
      break;
 80083f4:	e000      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80083f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d110      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	f023 0207 	bic.w	r2, r3, #7
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840a:	4902      	ldr	r1, [pc, #8]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800840c:	4313      	orrs	r3, r2
 800840e:	654b      	str	r3, [r1, #84]	; 0x54
 8008410:	e008      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	58024800 	.word	0x58024800
 800841c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d039      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008436:	2b05      	cmp	r3, #5
 8008438:	d820      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008483 	.word	0x08008483
 8008444:	08008459 	.word	0x08008459
 8008448:	0800846b 	.word	0x0800846b
 800844c:	08008483 	.word	0x08008483
 8008450:	08008483 	.word	0x08008483
 8008454:	08008483 	.word	0x08008483
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3304      	adds	r3, #4
 800845c:	2101      	movs	r1, #1
 800845e:	4618      	mov	r0, r3
 8008460:	f001 f96a 	bl	8009738 <RCCEx_PLL2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008468:	e00c      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3324      	adds	r3, #36	; 0x24
 800846e:	2101      	movs	r1, #1
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fa13 	bl	800989c <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800847a:	e003      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
      break;
 8008480:	e000      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800848a:	4bb7      	ldr	r3, [pc, #732]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	f023 0207 	bic.w	r2, r3, #7
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008498:	49b3      	ldr	r1, [pc, #716]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800849a:	4313      	orrs	r3, r2
 800849c:	658b      	str	r3, [r1, #88]	; 0x58
 800849e:	e001      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d04b      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ba:	d02e      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80084bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c0:	d828      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c6:	d02a      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d822      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084d2:	d026      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80084d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084d8:	d81c      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084de:	d010      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e4:	d816      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01d      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80084ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ee:	d111      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	2100      	movs	r1, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 f91e 	bl	8009738 <RCCEx_PLL2_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008500:	e012      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2102      	movs	r1, #2
 8008508:	4618      	mov	r0, r3
 800850a:	f001 f9c7 	bl	800989c <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008512:	e009      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	75fb      	strb	r3, [r7, #23]
      break;
 8008518:	e006      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800851a:	bf00      	nop
 800851c:	e004      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800852e:	4b8e      	ldr	r3, [pc, #568]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853c:	498a      	ldr	r1, [pc, #552]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800853e:	4313      	orrs	r3, r2
 8008540:	654b      	str	r3, [r1, #84]	; 0x54
 8008542:	e001      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d04b      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800855a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800855e:	d02e      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008560:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008564:	d828      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	d02a      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800856c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008570:	d822      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008576:	d026      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800857c:	d81c      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800857e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008582:	d010      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008588:	d816      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01d      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800858e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008592:	d111      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f001 f8cc 	bl	8009738 <RCCEx_PLL2_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80085a4:	e012      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3324      	adds	r3, #36	; 0x24
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f975 	bl	800989c <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80085b6:	e009      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	e006      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085be:	bf00      	nop
 80085c0:	e004      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085c2:	bf00      	nop
 80085c4:	e002      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085d2:	4b65      	ldr	r3, [pc, #404]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085e0:	4961      	ldr	r1, [pc, #388]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	658b      	str	r3, [r1, #88]	; 0x58
 80085e6:	e001      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d04b      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008602:	d02e      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008604:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008608:	d828      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800860a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800860e:	d02a      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008614:	d822      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008616:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800861a:	d026      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800861c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008620:	d81c      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008626:	d010      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800862c:	d816      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01d      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008636:	d111      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f87a 	bl	8009738 <RCCEx_PLL2_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008648:	e012      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3324      	adds	r3, #36	; 0x24
 800864e:	2102      	movs	r1, #2
 8008650:	4618      	mov	r0, r3
 8008652:	f001 f923 	bl	800989c <RCCEx_PLL3_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800865a:	e009      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
      break;
 8008660:	e006      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008662:	bf00      	nop
 8008664:	e004      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008666:	bf00      	nop
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800866e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008676:	4b3c      	ldr	r3, [pc, #240]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008684:	4938      	ldr	r1, [pc, #224]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008686:	4313      	orrs	r3, r2
 8008688:	658b      	str	r3, [r1, #88]	; 0x58
 800868a:	e001      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01a      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a6:	d10a      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3324      	adds	r3, #36	; 0x24
 80086ac:	2102      	movs	r1, #2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 f8f4 	bl	800989c <RCCEx_PLL3_Config>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086be:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086cc:	4926      	ldr	r1, [pc, #152]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e8:	d10a      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2102      	movs	r1, #2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 f8d3 	bl	800989c <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800870e:	4916      	ldr	r1, [pc, #88]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008710:	4313      	orrs	r3, r2
 8008712:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d036      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872a:	d01f      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800872c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008730:	d817      	bhi.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873a:	d009      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800873c:	e011      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fff7 	bl	8009738 <RCCEx_PLL2_Config>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800874e:	e00e      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3324      	adds	r3, #36	; 0x24
 8008754:	2102      	movs	r1, #2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f8a0 	bl	800989c <RCCEx_PLL3_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008760:	e005      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	75fb      	strb	r3, [r7, #23]
      break;
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008768:	58024400 	.word	0x58024400
      break;
 800876c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008774:	4b8b      	ldr	r3, [pc, #556]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008782:	4988      	ldr	r1, [pc, #544]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008784:	4313      	orrs	r3, r2
 8008786:	658b      	str	r3, [r1, #88]	; 0x58
 8008788:	e001      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d033      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087a4:	d01c      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80087a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087aa:	d816      	bhi.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b0:	d003      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80087b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087b6:	d007      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80087b8:	e00f      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ba:	4b7a      	ldr	r3, [pc, #488]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	4a79      	ldr	r2, [pc, #484]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80087c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80087c6:	e00c      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3324      	adds	r3, #36	; 0x24
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f864 	bl	800989c <RCCEx_PLL3_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80087d8:	e003      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      break;
 80087de:	e000      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80087e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087e8:	4b6e      	ldr	r3, [pc, #440]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80087ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f6:	496b      	ldr	r1, [pc, #428]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	654b      	str	r3, [r1, #84]	; 0x54
 80087fc:	e001      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d029      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881a:	d007      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800881c:	e00f      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881e:	4b61      	ldr	r3, [pc, #388]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	4a60      	ldr	r2, [pc, #384]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800882a:	e00b      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3304      	adds	r3, #4
 8008830:	2102      	movs	r1, #2
 8008832:	4618      	mov	r0, r3
 8008834:	f000 ff80 	bl	8009738 <RCCEx_PLL2_Config>
 8008838:	4603      	mov	r3, r0
 800883a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800883c:	e002      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	75fb      	strb	r3, [r7, #23]
      break;
 8008842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d109      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800884a:	4b56      	ldr	r3, [pc, #344]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800884c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	4953      	ldr	r1, [pc, #332]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008858:	4313      	orrs	r3, r2
 800885a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800885c:	e001      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3324      	adds	r3, #36	; 0x24
 8008872:	2102      	movs	r1, #2
 8008874:	4618      	mov	r0, r3
 8008876:	f001 f811 	bl	800989c <RCCEx_PLL3_Config>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d030      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008898:	d017      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800889a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800889e:	d811      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80088a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a4:	d013      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80088a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088aa:	d80b      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d010      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80088b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b4:	d106      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b6:	4b3b      	ldr	r3, [pc, #236]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	4a3a      	ldr	r2, [pc, #232]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80088c2:	e007      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	e004      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088ca:	bf00      	nop
 80088cc:	e002      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088ce:	bf00      	nop
 80088d0:	e000      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d109      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088da:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e6:	492f      	ldr	r1, [pc, #188]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	654b      	str	r3, [r1, #84]	; 0x54
 80088ec:	e001      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088fe:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008902:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890a:	4926      	ldr	r1, [pc, #152]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800891c:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800892a:	491e      	ldr	r1, [pc, #120]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800893e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008940:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008948:	4916      	ldr	r1, [pc, #88]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800894a:	4313      	orrs	r3, r2
 800894c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800895a:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008964:	6113      	str	r3, [r2, #16]
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008970:	490c      	ldr	r1, [pc, #48]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008972:	4313      	orrs	r3, r2
 8008974:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da08      	bge.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800897e:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	4906      	ldr	r1, [pc, #24]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800898c:	4313      	orrs	r3, r2
 800898e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008990:	7dbb      	ldrb	r3, [r7, #22]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	e000      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	58024400 	.word	0x58024400

080089a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b090      	sub	sp, #64	; 0x40
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b6:	d14f      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80089b8:	4ba0      	ldr	r3, [pc, #640]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d844      	bhi.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	080089e5 	.word	0x080089e5
 80089d4:	080089f5 	.word	0x080089f5
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	08008a4d 	.word	0x08008a4d
 80089e0:	08008a15 	.word	0x08008a15

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fd53 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f2:	e28b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f4:	f107 0318 	add.w	r3, r7, #24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 faa3 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a02:	e283      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fbef 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a12:	e27b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a14:	4b89      	ldr	r3, [pc, #548]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008a24:	4b86      	ldr	r3, [pc, #536]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008a28:	e270      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a30:	d102      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008a32:	4b84      	ldr	r3, [pc, #528]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a36:	e269      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008a40:	4b81      	ldr	r3, [pc, #516]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a44:	e262      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4a:	e25f      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a4c:	4b7f      	ldr	r3, [pc, #508]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a50:	e25c      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a56:	e259      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5e:	d159      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008a60:	4b76      	ldr	r3, [pc, #472]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a70:	d02e      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a78:	d849      	bhi.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	2bc0      	cmp	r3, #192	; 0xc0
 8008a7e:	d043      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2bc0      	cmp	r3, #192	; 0xc0
 8008a84:	d843      	bhi.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	2b80      	cmp	r3, #128	; 0x80
 8008a8a:	d019      	beq.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	2b80      	cmp	r3, #128	; 0x80
 8008a90:	d83d      	bhi.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d008      	beq.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008a9e:	e036      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fcf5 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aae:	e22d      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab0:	f107 0318 	add.w	r3, r7, #24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fa45 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008abe:	e225      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac0:	f107 030c 	add.w	r3, r7, #12
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fb91 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ace:	e21d      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ad0:	4b5a      	ldr	r3, [pc, #360]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ae0:	4b57      	ldr	r3, [pc, #348]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ae4:	e212      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aec:	d102      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 8008aee:	4b55      	ldr	r3, [pc, #340]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af2:	e20b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008afa:	d102      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 8008afc:	4b52      	ldr	r3, [pc, #328]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b00:	e204      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b06:	e201      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b08:	4b50      	ldr	r3, [pc, #320]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b0c:	e1fe      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b12:	e1fb      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1a:	d15e      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008b1c:	4b47      	ldr	r3, [pc, #284]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b20:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008b24:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b2c:	d033      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b34:	d84e      	bhi.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b3c:	d047      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b44:	d846      	bhi.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b4c:	d01b      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b54:	d83e      	bhi.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b62:	d008      	beq.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008b64:	e036      	b.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fc92 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b74:	e1ca      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b76:	f107 0318 	add.w	r3, r7, #24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f9e2 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b84:	e1c2      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fb2e 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b94:	e1ba      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b96:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ba6:	4b26      	ldr	r3, [pc, #152]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008baa:	e1af      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb2:	d102      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 8008bb4:	4b23      	ldr	r3, [pc, #140]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb8:	e1a8      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 8008bc2:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc6:	e1a1      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bcc:	e19e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bce:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd2:	e19b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd8:	e198      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008be0:	d168      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008be2:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf2:	d03d      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfa:	d858      	bhi.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c02:	d051      	beq.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c0a:	d850      	bhi.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c12:	d025      	beq.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1a:	d848      	bhi.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c28:	d012      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8008c2a:	e040      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fc2f 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3a:	e167      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	03d09000 	.word	0x03d09000
 8008c44:	003d0900 	.word	0x003d0900
 8008c48:	007a1200 	.word	0x007a1200
 8008c4c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f975 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5e:	e155      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c60:	f107 030c 	add.w	r3, r7, #12
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fac1 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6e:	e14d      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c70:	4ba0      	ldr	r3, [pc, #640]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c80:	4b9d      	ldr	r3, [pc, #628]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c84:	e142      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c8c:	d102      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
            frequency = CSI_VALUE;
 8008c8e:	4b9b      	ldr	r3, [pc, #620]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e13b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
            frequency = HSE_VALUE;
 8008c9c:	4b98      	ldr	r3, [pc, #608]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca0:	e134      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca6:	e131      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ca8:	4b96      	ldr	r3, [pc, #600]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cac:	e12e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cb2:	e12b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cba:	d15e      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008cbc:	4b8d      	ldr	r3, [pc, #564]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ccc:	d033      	beq.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cd4:	d84e      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cdc:	d047      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ce4:	d846      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cec:	d01b      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf4:	d83e      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d02:	d008      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8008d04:	e036      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fbc2 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d14:	e0fa      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d16:	f107 0318 	add.w	r3, r7, #24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f912 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d24:	e0f2      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fa5e 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d34:	e0ea      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d36:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d3e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d102      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d46:	4b6c      	ldr	r3, [pc, #432]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d4a:	e0df      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d52:	d102      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = CSI_VALUE;
 8008d54:	4b69      	ldr	r3, [pc, #420]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d58:	e0d8      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d60:	d102      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
            frequency = HSE_VALUE;
 8008d62:	4b67      	ldr	r3, [pc, #412]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d66:	e0d1      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6c:	e0ce      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d6e:	4b65      	ldr	r3, [pc, #404]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d72:	e0cb      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d78:	e0c8      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d80:	d143      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008d82:	4b5c      	ldr	r3, [pc, #368]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d92:	d01b      	beq.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d9a:	d833      	bhi.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da8:	d008      	beq.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008daa:	e02b      	b.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dac:	f107 0318 	add.w	r3, r7, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f8c7 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dba:	e0a7      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fa13 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dca:	e09f      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dcc:	4b49      	ldr	r3, [pc, #292]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ddc:	4b46      	ldr	r3, [pc, #280]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008de0:	e094      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de8:	d102      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
            frequency = CSI_VALUE;
 8008dea:	4b44      	ldr	r3, [pc, #272]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dee:	e08d      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df6:	d102      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            frequency = HSE_VALUE;
 8008df8:	4b41      	ldr	r3, [pc, #260]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfc:	e086      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e02:	e083      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e08:	e080      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d11f      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e12:	4b38      	ldr	r3, [pc, #224]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d008      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 8008e2a:	e00f      	b.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fb2f 	bl	8009494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3a:	e067      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3c:	f107 0318 	add.w	r3, r7, #24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f87f 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4a:	e05f      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e50:	e05c      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e58:	d156      	bne.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e5a:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e6a:	d03d      	beq.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e72:	d83c      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d032      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d834      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e8a:	d027      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e92:	d82c      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9a:	d017      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea2:	d824      	bhi.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb0:	d004      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8008eb2:	e01c      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x546>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008eb4:	f000 f830 	bl	8008f18 <HAL_RCCEx_GetD3PCLK1Freq>
 8008eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008eba:	e027      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 f83f 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eca:	e01f      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ecc:	f107 030c 	add.w	r3, r7, #12
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f98b 	bl	80091ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eda:	e017      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee0:	e014      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee6:	e011      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eec:	e00e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef2:	e00b      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	03d09000 	.word	0x03d09000
 8008efc:	003d0900 	.word	0x003d0900
 8008f00:	007a1200 	.word	0x007a1200
 8008f04:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else
    {
      frequency = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3740      	adds	r7, #64	; 0x40
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop

08008f18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f1c:	f7fe fde4 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	4904      	ldr	r1, [pc, #16]	; (8008f40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	0800b080 	.word	0x0800b080

08008f44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b089      	sub	sp, #36	; 0x24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f4c:	4ba1      	ldr	r3, [pc, #644]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f56:	4b9f      	ldr	r3, [pc, #636]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	0b1b      	lsrs	r3, r3, #12
 8008f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f62:	4b9c      	ldr	r3, [pc, #624]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	091b      	lsrs	r3, r3, #4
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f6e:	4b99      	ldr	r3, [pc, #612]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	08db      	lsrs	r3, r3, #3
 8008f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8111 	beq.w	80091b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	f000 8083 	beq.w	80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	f200 80a1 	bhi.w	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d056      	beq.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008fae:	e099      	b.n	80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fb0:	4b88      	ldr	r3, [pc, #544]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d02d      	beq.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fbc:	4b85      	ldr	r3, [pc, #532]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	08db      	lsrs	r3, r3, #3
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	4a84      	ldr	r2, [pc, #528]	; (80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b7b      	ldr	r3, [pc, #492]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009016:	e087      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80091e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902a:	4b6a      	ldr	r3, [pc, #424]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	ed97 6a03 	vldr	s12, [r7, #12]
 800903e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800904e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800905a:	e065      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	4b59      	ldr	r3, [pc, #356]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009082:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800909e:	e043      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	4b48      	ldr	r3, [pc, #288]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090e2:	e021      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f6:	4b37      	ldr	r3, [pc, #220]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009106:	ed97 6a03 	vldr	s12, [r7, #12]
 800910a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800910e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800911a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009126:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009128:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	0a5b      	lsrs	r3, r3, #9
 800912e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800913e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009142:	edd7 6a07 	vldr	s13, [r7, #28]
 8009146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800914a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914e:	ee17 2a90 	vmov	r2, s15
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009156:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	0c1b      	lsrs	r3, r3, #16
 800915c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009160:	ee07 3a90 	vmov	s15, r3
 8009164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800916c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009170:	edd7 6a07 	vldr	s13, [r7, #28]
 8009174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800917c:	ee17 2a90 	vmov	r2, s15
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009184:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	0e1b      	lsrs	r3, r3, #24
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800919a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800919e:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091aa:	ee17 2a90 	vmov	r2, s15
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80091b2:	e008      	b.n	80091c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	609a      	str	r2, [r3, #8]
}
 80091c6:	bf00      	nop
 80091c8:	3724      	adds	r7, #36	; 0x24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	58024400 	.word	0x58024400
 80091d8:	03d09000 	.word	0x03d09000
 80091dc:	46000000 	.word	0x46000000
 80091e0:	4c742400 	.word	0x4c742400
 80091e4:	4a742400 	.word	0x4a742400
 80091e8:	4af42400 	.word	0x4af42400

080091ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b089      	sub	sp, #36	; 0x24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091f4:	4ba1      	ldr	r3, [pc, #644]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f8:	f003 0303 	and.w	r3, r3, #3
 80091fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80091fe:	4b9f      	ldr	r3, [pc, #636]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	0d1b      	lsrs	r3, r3, #20
 8009204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009208:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800920a:	4b9c      	ldr	r3, [pc, #624]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009216:	4b99      	ldr	r3, [pc, #612]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921a:	08db      	lsrs	r3, r3, #3
 800921c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	fb02 f303 	mul.w	r3, r2, r3
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 8111 	beq.w	800945c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b02      	cmp	r3, #2
 800923e:	f000 8083 	beq.w	8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	2b02      	cmp	r3, #2
 8009246:	f200 80a1 	bhi.w	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d056      	beq.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009256:	e099      	b.n	800938c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009258:	4b88      	ldr	r3, [pc, #544]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d02d      	beq.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009264:	4b85      	ldr	r3, [pc, #532]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	08db      	lsrs	r3, r3, #3
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	4a84      	ldr	r2, [pc, #528]	; (8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009270:	fa22 f303 	lsr.w	r3, r2, r3
 8009274:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b7b      	ldr	r3, [pc, #492]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092be:	e087      	b.n	80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009488 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b6a      	ldr	r3, [pc, #424]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009302:	e065      	b.n	80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800948c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009316:	4b59      	ldr	r3, [pc, #356]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009326:	ed97 6a03 	vldr	s12, [r7, #12]
 800932a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800932e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009346:	e043      	b.n	80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935a:	4b48      	ldr	r3, [pc, #288]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	ed97 6a03 	vldr	s12, [r7, #12]
 800936e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800938a:	e021      	b.n	80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800948c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800939a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939e:	4b37      	ldr	r3, [pc, #220]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80093d0:	4b2a      	ldr	r3, [pc, #168]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	0a5b      	lsrs	r3, r3, #9
 80093d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f6:	ee17 2a90 	vmov	r2, s15
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80093fe:	4b1f      	ldr	r3, [pc, #124]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	0c1b      	lsrs	r3, r3, #16
 8009404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009408:	ee07 3a90 	vmov	s15, r3
 800940c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009418:	edd7 6a07 	vldr	s13, [r7, #28]
 800941c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009424:	ee17 2a90 	vmov	r2, s15
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800942c:	4b13      	ldr	r3, [pc, #76]	; (800947c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	0e1b      	lsrs	r3, r3, #24
 8009432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009446:	edd7 6a07 	vldr	s13, [r7, #28]
 800944a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009452:	ee17 2a90 	vmov	r2, s15
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800945a:	e008      	b.n	800946e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	609a      	str	r2, [r3, #8]
}
 800946e:	bf00      	nop
 8009470:	3724      	adds	r7, #36	; 0x24
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	58024400 	.word	0x58024400
 8009480:	03d09000 	.word	0x03d09000
 8009484:	46000000 	.word	0x46000000
 8009488:	4c742400 	.word	0x4c742400
 800948c:	4a742400 	.word	0x4a742400
 8009490:	4af42400 	.word	0x4af42400

08009494 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009494:	b480      	push	{r7}
 8009496:	b089      	sub	sp, #36	; 0x24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800949c:	4ba0      	ldr	r3, [pc, #640]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80094a6:	4b9e      	ldr	r3, [pc, #632]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	091b      	lsrs	r3, r3, #4
 80094ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80094b2:	4b9b      	ldr	r3, [pc, #620]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80094bc:	4b98      	ldr	r3, [pc, #608]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	fb02 f303 	mul.w	r3, r2, r3
 80094cc:	ee07 3a90 	vmov	s15, r3
 80094d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8111 	beq.w	8009702 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	f000 8083 	beq.w	80095ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	f200 80a1 	bhi.w	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d056      	beq.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80094fc:	e099      	b.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094fe:	4b88      	ldr	r3, [pc, #544]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d02d      	beq.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800950a:	4b85      	ldr	r3, [pc, #532]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	4a83      	ldr	r2, [pc, #524]	; (8009724 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	ee07 3a90 	vmov	s15, r3
 800952c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b7a      	ldr	r3, [pc, #488]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009564:	e087      	b.n	8009676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800972c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b69      	ldr	r3, [pc, #420]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a8:	e065      	b.n	8009676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009730 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80095b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095bc:	4b58      	ldr	r3, [pc, #352]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ec:	e043      	b.n	8009676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80095fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009600:	4b47      	ldr	r3, [pc, #284]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009610:	ed97 6a03 	vldr	s12, [r7, #12]
 8009614:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009630:	e021      	b.n	8009676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009730 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009644:	4b36      	ldr	r3, [pc, #216]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	ed97 6a03 	vldr	s12, [r7, #12]
 8009658:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800965c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009670:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009674:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009676:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	0a5b      	lsrs	r3, r3, #9
 800967c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800968c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009690:	edd7 6a07 	vldr	s13, [r7, #28]
 8009694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969c:	ee17 2a90 	vmov	r2, s15
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096be:	edd7 6a07 	vldr	s13, [r7, #28]
 80096c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ca:	ee17 2a90 	vmov	r2, s15
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80096d2:	4b13      	ldr	r3, [pc, #76]	; (8009720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	0e1b      	lsrs	r3, r3, #24
 80096d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80096f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f8:	ee17 2a90 	vmov	r2, s15
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009700:	e008      	b.n	8009714 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	609a      	str	r2, [r3, #8]
}
 8009714:	bf00      	nop
 8009716:	3724      	adds	r7, #36	; 0x24
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	58024400 	.word	0x58024400
 8009724:	03d09000 	.word	0x03d09000
 8009728:	46000000 	.word	0x46000000
 800972c:	4c742400 	.word	0x4c742400
 8009730:	4a742400 	.word	0x4a742400
 8009734:	4af42400 	.word	0x4af42400

08009738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009746:	4b53      	ldr	r3, [pc, #332]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	f003 0303 	and.w	r3, r3, #3
 800974e:	2b03      	cmp	r3, #3
 8009750:	d101      	bne.n	8009756 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e099      	b.n	800988a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009756:	4b4f      	ldr	r3, [pc, #316]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a4e      	ldr	r2, [pc, #312]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800975c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009762:	f7fb f9d9 	bl	8004b18 <HAL_GetTick>
 8009766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009768:	e008      	b.n	800977c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800976a:	f7fb f9d5 	bl	8004b18 <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d901      	bls.n	800977c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e086      	b.n	800988a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800977c:	4b45      	ldr	r3, [pc, #276]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f0      	bne.n	800976a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009788:	4b42      	ldr	r3, [pc, #264]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	031b      	lsls	r3, r3, #12
 8009796:	493f      	ldr	r1, [pc, #252]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009798:	4313      	orrs	r3, r2
 800979a:	628b      	str	r3, [r1, #40]	; 0x28
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	025b      	lsls	r3, r3, #9
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	041b      	lsls	r3, r3, #16
 80097ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	061b      	lsls	r3, r3, #24
 80097c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097cc:	4931      	ldr	r1, [pc, #196]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097d2:	4b30      	ldr	r3, [pc, #192]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	492d      	ldr	r1, [pc, #180]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097e4:	4b2b      	ldr	r3, [pc, #172]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	f023 0220 	bic.w	r2, r3, #32
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	4928      	ldr	r1, [pc, #160]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097f6:	4b27      	ldr	r3, [pc, #156]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4a26      	ldr	r2, [pc, #152]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	f023 0310 	bic.w	r3, r3, #16
 8009800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009802:	4b24      	ldr	r3, [pc, #144]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009806:	4b24      	ldr	r3, [pc, #144]	; (8009898 <RCCEx_PLL2_Config+0x160>)
 8009808:	4013      	ands	r3, r2
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	69d2      	ldr	r2, [r2, #28]
 800980e:	00d2      	lsls	r2, r2, #3
 8009810:	4920      	ldr	r1, [pc, #128]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009812:	4313      	orrs	r3, r2
 8009814:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009816:	4b1f      	ldr	r3, [pc, #124]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	4a1e      	ldr	r2, [pc, #120]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800981c:	f043 0310 	orr.w	r3, r3, #16
 8009820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009828:	4b1a      	ldr	r3, [pc, #104]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4a19      	ldr	r2, [pc, #100]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800982e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009834:	e00f      	b.n	8009856 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d106      	bne.n	800984a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800983c:	4b15      	ldr	r3, [pc, #84]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	4a14      	ldr	r2, [pc, #80]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009848:	e005      	b.n	8009856 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800984a:	4b12      	ldr	r3, [pc, #72]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	4a11      	ldr	r2, [pc, #68]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009854:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009856:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a0e      	ldr	r2, [pc, #56]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800985c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009862:	f7fb f959 	bl	8004b18 <HAL_GetTick>
 8009866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009868:	e008      	b.n	800987c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800986a:	f7fb f955 	bl	8004b18 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e006      	b.n	800988a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <RCCEx_PLL2_Config+0x15c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0f0      	beq.n	800986a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	58024400 	.word	0x58024400
 8009898:	ffff0007 	.word	0xffff0007

0800989c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098aa:	4b53      	ldr	r3, [pc, #332]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d101      	bne.n	80098ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e099      	b.n	80099ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098ba:	4b4f      	ldr	r3, [pc, #316]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a4e      	ldr	r2, [pc, #312]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098c6:	f7fb f927 	bl	8004b18 <HAL_GetTick>
 80098ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098cc:	e008      	b.n	80098e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80098ce:	f7fb f923 	bl	8004b18 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d901      	bls.n	80098e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e086      	b.n	80099ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098e0:	4b45      	ldr	r3, [pc, #276]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098ec:	4b42      	ldr	r3, [pc, #264]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	051b      	lsls	r3, r3, #20
 80098fa:	493f      	ldr	r1, [pc, #252]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	628b      	str	r3, [r1, #40]	; 0x28
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	3b01      	subs	r3, #1
 8009906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	3b01      	subs	r3, #1
 8009910:	025b      	lsls	r3, r3, #9
 8009912:	b29b      	uxth	r3, r3
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	3b01      	subs	r3, #1
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	3b01      	subs	r3, #1
 800992a:	061b      	lsls	r3, r3, #24
 800992c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009930:	4931      	ldr	r1, [pc, #196]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009932:	4313      	orrs	r3, r2
 8009934:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009936:	4b30      	ldr	r3, [pc, #192]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	492d      	ldr	r1, [pc, #180]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009944:	4313      	orrs	r3, r2
 8009946:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009948:	4b2b      	ldr	r3, [pc, #172]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	4928      	ldr	r1, [pc, #160]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800995a:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	4a26      	ldr	r2, [pc, #152]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009966:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996a:	4b24      	ldr	r3, [pc, #144]	; (80099fc <RCCEx_PLL3_Config+0x160>)
 800996c:	4013      	ands	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	69d2      	ldr	r2, [r2, #28]
 8009972:	00d2      	lsls	r2, r2, #3
 8009974:	4920      	ldr	r1, [pc, #128]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800997a:	4b1f      	ldr	r3, [pc, #124]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	4a1e      	ldr	r2, [pc, #120]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d106      	bne.n	800999a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800998c:	4b1a      	ldr	r3, [pc, #104]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 8009992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009998:	e00f      	b.n	80099ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d106      	bne.n	80099ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099a0:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099ac:	e005      	b.n	80099ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099ae:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	4a11      	ldr	r2, [pc, #68]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099ba:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a0e      	ldr	r2, [pc, #56]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c6:	f7fb f8a7 	bl	8004b18 <HAL_GetTick>
 80099ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099cc:	e008      	b.n	80099e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099ce:	f7fb f8a3 	bl	8004b18 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e006      	b.n	80099ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f0      	beq.n	80099ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	ffff0007 	.word	0xffff0007

08009a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d001      	beq.n	8009a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e019      	b.n	8009a4c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <HAL_TIM_Base_Start+0x58>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b06      	cmp	r3, #6
 8009a30:	d00b      	beq.n	8009a4a <HAL_TIM_Base_Start+0x4a>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a38:	d007      	beq.n	8009a4a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f042 0201 	orr.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	00010007 	.word	0x00010007

08009a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e049      	b.n	8009b02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7f8 fdf2 	bl	800266c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f000 fa18 	bl	8009ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d109      	bne.n	8009b30 <HAL_TIM_PWM_Start+0x24>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	bf14      	ite	ne
 8009b28:	2301      	movne	r3, #1
 8009b2a:	2300      	moveq	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	e03c      	b.n	8009baa <HAL_TIM_PWM_Start+0x9e>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d109      	bne.n	8009b4a <HAL_TIM_PWM_Start+0x3e>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	bf14      	ite	ne
 8009b42:	2301      	movne	r3, #1
 8009b44:	2300      	moveq	r3, #0
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	e02f      	b.n	8009baa <HAL_TIM_PWM_Start+0x9e>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d109      	bne.n	8009b64 <HAL_TIM_PWM_Start+0x58>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	bf14      	ite	ne
 8009b5c:	2301      	movne	r3, #1
 8009b5e:	2300      	moveq	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	e022      	b.n	8009baa <HAL_TIM_PWM_Start+0x9e>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b0c      	cmp	r3, #12
 8009b68:	d109      	bne.n	8009b7e <HAL_TIM_PWM_Start+0x72>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e015      	b.n	8009baa <HAL_TIM_PWM_Start+0x9e>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b10      	cmp	r3, #16
 8009b82:	d109      	bne.n	8009b98 <HAL_TIM_PWM_Start+0x8c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	e008      	b.n	8009baa <HAL_TIM_PWM_Start+0x9e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	bf14      	ite	ne
 8009ba4:	2301      	movne	r3, #1
 8009ba6:	2300      	moveq	r3, #0
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e06e      	b.n	8009c90 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_PWM_Start+0xb6>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bc0:	e023      	b.n	8009c0a <HAL_TIM_PWM_Start+0xfe>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d104      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0xc6>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bd0:	e01b      	b.n	8009c0a <HAL_TIM_PWM_Start+0xfe>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_PWM_Start+0xd6>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009be0:	e013      	b.n	8009c0a <HAL_TIM_PWM_Start+0xfe>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b0c      	cmp	r3, #12
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIM_PWM_Start+0xe6>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bf0:	e00b      	b.n	8009c0a <HAL_TIM_PWM_Start+0xfe>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d104      	bne.n	8009c02 <HAL_TIM_PWM_Start+0xf6>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c00:	e003      	b.n	8009c0a <HAL_TIM_PWM_Start+0xfe>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fcc4 	bl	800a5a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <HAL_TIM_PWM_Start+0x18c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d013      	beq.n	8009c4a <HAL_TIM_PWM_Start+0x13e>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <HAL_TIM_PWM_Start+0x190>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00e      	beq.n	8009c4a <HAL_TIM_PWM_Start+0x13e>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <HAL_TIM_PWM_Start+0x194>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d009      	beq.n	8009c4a <HAL_TIM_PWM_Start+0x13e>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ca4 <HAL_TIM_PWM_Start+0x198>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d004      	beq.n	8009c4a <HAL_TIM_PWM_Start+0x13e>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <HAL_TIM_PWM_Start+0x19c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d101      	bne.n	8009c4e <HAL_TIM_PWM_Start+0x142>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <HAL_TIM_PWM_Start+0x144>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	4b10      	ldr	r3, [pc, #64]	; (8009cac <HAL_TIM_PWM_Start+0x1a0>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b06      	cmp	r3, #6
 8009c74:	d00b      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x182>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7c:	d007      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0201 	orr.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	40010000 	.word	0x40010000
 8009c9c:	40010400 	.word	0x40010400
 8009ca0:	40014000 	.word	0x40014000
 8009ca4:	40014400 	.word	0x40014400
 8009ca8:	40014800 	.word	0x40014800
 8009cac:	00010007 	.word	0x00010007

08009cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e0fd      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b14      	cmp	r3, #20
 8009cd6:	f200 80f0 	bhi.w	8009eba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009ebb 	.word	0x08009ebb
 8009ce8:	08009ebb 	.word	0x08009ebb
 8009cec:	08009ebb 	.word	0x08009ebb
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009ebb 	.word	0x08009ebb
 8009cf8:	08009ebb 	.word	0x08009ebb
 8009cfc:	08009ebb 	.word	0x08009ebb
 8009d00:	08009db7 	.word	0x08009db7
 8009d04:	08009ebb 	.word	0x08009ebb
 8009d08:	08009ebb 	.word	0x08009ebb
 8009d0c:	08009ebb 	.word	0x08009ebb
 8009d10:	08009df7 	.word	0x08009df7
 8009d14:	08009ebb 	.word	0x08009ebb
 8009d18:	08009ebb 	.word	0x08009ebb
 8009d1c:	08009ebb 	.word	0x08009ebb
 8009d20:	08009e39 	.word	0x08009e39
 8009d24:	08009ebb 	.word	0x08009ebb
 8009d28:	08009ebb 	.word	0x08009ebb
 8009d2c:	08009ebb 	.word	0x08009ebb
 8009d30:	08009e79 	.word	0x08009e79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f962 	bl	800a004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f042 0208 	orr.w	r2, r2, #8
 8009d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0204 	bic.w	r2, r2, #4
 8009d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6999      	ldr	r1, [r3, #24]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	619a      	str	r2, [r3, #24]
      break;
 8009d72:	e0a3      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f9d2 	bl	800a124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6999      	ldr	r1, [r3, #24]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	021a      	lsls	r2, r3, #8
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	619a      	str	r2, [r3, #24]
      break;
 8009db4:	e082      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fa3b 	bl	800a238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0208 	orr.w	r2, r2, #8
 8009dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0204 	bic.w	r2, r2, #4
 8009de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69d9      	ldr	r1, [r3, #28]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691a      	ldr	r2, [r3, #16]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	61da      	str	r2, [r3, #28]
      break;
 8009df4:	e062      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 faa1 	bl	800a344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69d9      	ldr	r1, [r3, #28]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	021a      	lsls	r2, r3, #8
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	61da      	str	r2, [r3, #28]
      break;
 8009e36:	e041      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fae8 	bl	800a414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0208 	orr.w	r2, r2, #8
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0204 	bic.w	r2, r2, #4
 8009e62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691a      	ldr	r2, [r3, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e76:	e021      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 fb2a 	bl	800a4d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009eb8:	e000      	b.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop

08009ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a40      	ldr	r2, [pc, #256]	; (8009fe4 <TIM_Base_SetConfig+0x114>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d013      	beq.n	8009f10 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eee:	d00f      	beq.n	8009f10 <TIM_Base_SetConfig+0x40>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a3d      	ldr	r2, [pc, #244]	; (8009fe8 <TIM_Base_SetConfig+0x118>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00b      	beq.n	8009f10 <TIM_Base_SetConfig+0x40>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a3c      	ldr	r2, [pc, #240]	; (8009fec <TIM_Base_SetConfig+0x11c>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d007      	beq.n	8009f10 <TIM_Base_SetConfig+0x40>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a3b      	ldr	r2, [pc, #236]	; (8009ff0 <TIM_Base_SetConfig+0x120>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_Base_SetConfig+0x40>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a3a      	ldr	r2, [pc, #232]	; (8009ff4 <TIM_Base_SetConfig+0x124>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d108      	bne.n	8009f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2f      	ldr	r2, [pc, #188]	; (8009fe4 <TIM_Base_SetConfig+0x114>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01f      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f30:	d01b      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a2c      	ldr	r2, [pc, #176]	; (8009fe8 <TIM_Base_SetConfig+0x118>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d017      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2b      	ldr	r2, [pc, #172]	; (8009fec <TIM_Base_SetConfig+0x11c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d013      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <TIM_Base_SetConfig+0x120>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00f      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a29      	ldr	r2, [pc, #164]	; (8009ff4 <TIM_Base_SetConfig+0x124>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00b      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a28      	ldr	r2, [pc, #160]	; (8009ff8 <TIM_Base_SetConfig+0x128>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d007      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a27      	ldr	r2, [pc, #156]	; (8009ffc <TIM_Base_SetConfig+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d003      	beq.n	8009f6a <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a26      	ldr	r2, [pc, #152]	; (800a000 <TIM_Base_SetConfig+0x130>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d108      	bne.n	8009f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a10      	ldr	r2, [pc, #64]	; (8009fe4 <TIM_Base_SetConfig+0x114>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00f      	beq.n	8009fc8 <TIM_Base_SetConfig+0xf8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a12      	ldr	r2, [pc, #72]	; (8009ff4 <TIM_Base_SetConfig+0x124>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00b      	beq.n	8009fc8 <TIM_Base_SetConfig+0xf8>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <TIM_Base_SetConfig+0x128>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d007      	beq.n	8009fc8 <TIM_Base_SetConfig+0xf8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a10      	ldr	r2, [pc, #64]	; (8009ffc <TIM_Base_SetConfig+0x12c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_Base_SetConfig+0xf8>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a0f      	ldr	r2, [pc, #60]	; (800a000 <TIM_Base_SetConfig+0x130>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d103      	bne.n	8009fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	615a      	str	r2, [r3, #20]
}
 8009fd6:	bf00      	nop
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40010000 	.word	0x40010000
 8009fe8:	40000400 	.word	0x40000400
 8009fec:	40000800 	.word	0x40000800
 8009ff0:	40000c00 	.word	0x40000c00
 8009ff4:	40010400 	.word	0x40010400
 8009ff8:	40014000 	.word	0x40014000
 8009ffc:	40014400 	.word	0x40014400
 800a000:	40014800 	.word	0x40014800

0800a004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f023 0201 	bic.w	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4b37      	ldr	r3, [pc, #220]	; (800a10c <TIM_OC1_SetConfig+0x108>)
 800a030:	4013      	ands	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f023 0302 	bic.w	r3, r3, #2
 800a04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	4313      	orrs	r3, r2
 800a056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a2d      	ldr	r2, [pc, #180]	; (800a110 <TIM_OC1_SetConfig+0x10c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00f      	beq.n	800a080 <TIM_OC1_SetConfig+0x7c>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a2c      	ldr	r2, [pc, #176]	; (800a114 <TIM_OC1_SetConfig+0x110>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d00b      	beq.n	800a080 <TIM_OC1_SetConfig+0x7c>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a2b      	ldr	r2, [pc, #172]	; (800a118 <TIM_OC1_SetConfig+0x114>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d007      	beq.n	800a080 <TIM_OC1_SetConfig+0x7c>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <TIM_OC1_SetConfig+0x118>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d003      	beq.n	800a080 <TIM_OC1_SetConfig+0x7c>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a29      	ldr	r2, [pc, #164]	; (800a120 <TIM_OC1_SetConfig+0x11c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10c      	bne.n	800a09a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f023 0308 	bic.w	r3, r3, #8
 800a086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	4313      	orrs	r3, r2
 800a090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 0304 	bic.w	r3, r3, #4
 800a098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a1c      	ldr	r2, [pc, #112]	; (800a110 <TIM_OC1_SetConfig+0x10c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00f      	beq.n	800a0c2 <TIM_OC1_SetConfig+0xbe>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a1b      	ldr	r2, [pc, #108]	; (800a114 <TIM_OC1_SetConfig+0x110>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00b      	beq.n	800a0c2 <TIM_OC1_SetConfig+0xbe>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a1a      	ldr	r2, [pc, #104]	; (800a118 <TIM_OC1_SetConfig+0x114>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d007      	beq.n	800a0c2 <TIM_OC1_SetConfig+0xbe>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a19      	ldr	r2, [pc, #100]	; (800a11c <TIM_OC1_SetConfig+0x118>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <TIM_OC1_SetConfig+0xbe>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a18      	ldr	r2, [pc, #96]	; (800a120 <TIM_OC1_SetConfig+0x11c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d111      	bne.n	800a0e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	621a      	str	r2, [r3, #32]
}
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	fffeff8f 	.word	0xfffeff8f
 800a110:	40010000 	.word	0x40010000
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40014400 	.word	0x40014400
 800a120:	40014800 	.word	0x40014800

0800a124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	f023 0210 	bic.w	r2, r3, #16
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	4b34      	ldr	r3, [pc, #208]	; (800a220 <TIM_OC2_SetConfig+0xfc>)
 800a150:	4013      	ands	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f023 0320 	bic.w	r3, r3, #32
 800a16e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a29      	ldr	r2, [pc, #164]	; (800a224 <TIM_OC2_SetConfig+0x100>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_OC2_SetConfig+0x68>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a28      	ldr	r2, [pc, #160]	; (800a228 <TIM_OC2_SetConfig+0x104>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d10d      	bne.n	800a1a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	011b      	lsls	r3, r3, #4
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a1e      	ldr	r2, [pc, #120]	; (800a224 <TIM_OC2_SetConfig+0x100>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d00f      	beq.n	800a1d0 <TIM_OC2_SetConfig+0xac>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a1d      	ldr	r2, [pc, #116]	; (800a228 <TIM_OC2_SetConfig+0x104>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d00b      	beq.n	800a1d0 <TIM_OC2_SetConfig+0xac>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a1c      	ldr	r2, [pc, #112]	; (800a22c <TIM_OC2_SetConfig+0x108>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d007      	beq.n	800a1d0 <TIM_OC2_SetConfig+0xac>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <TIM_OC2_SetConfig+0x10c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d003      	beq.n	800a1d0 <TIM_OC2_SetConfig+0xac>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <TIM_OC2_SetConfig+0x110>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d113      	bne.n	800a1f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	feff8fff 	.word	0xfeff8fff
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400
 800a22c:	40014000 	.word	0x40014000
 800a230:	40014400 	.word	0x40014400
 800a234:	40014800 	.word	0x40014800

0800a238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a27      	ldr	r2, [pc, #156]	; (800a330 <TIM_OC3_SetConfig+0xf8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC3_SetConfig+0x66>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a26      	ldr	r2, [pc, #152]	; (800a334 <TIM_OC3_SetConfig+0xfc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d10d      	bne.n	800a2ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <TIM_OC3_SetConfig+0xf8>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00f      	beq.n	800a2e2 <TIM_OC3_SetConfig+0xaa>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <TIM_OC3_SetConfig+0xfc>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00b      	beq.n	800a2e2 <TIM_OC3_SetConfig+0xaa>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a1a      	ldr	r2, [pc, #104]	; (800a338 <TIM_OC3_SetConfig+0x100>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d007      	beq.n	800a2e2 <TIM_OC3_SetConfig+0xaa>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a19      	ldr	r2, [pc, #100]	; (800a33c <TIM_OC3_SetConfig+0x104>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d003      	beq.n	800a2e2 <TIM_OC3_SetConfig+0xaa>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a18      	ldr	r2, [pc, #96]	; (800a340 <TIM_OC3_SetConfig+0x108>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d113      	bne.n	800a30a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4313      	orrs	r3, r2
 800a308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	621a      	str	r2, [r3, #32]
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	40010000 	.word	0x40010000
 800a334:	40010400 	.word	0x40010400
 800a338:	40014000 	.word	0x40014000
 800a33c:	40014400 	.word	0x40014400
 800a340:	40014800 	.word	0x40014800

0800a344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a38e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	031b      	lsls	r3, r3, #12
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a18      	ldr	r2, [pc, #96]	; (800a400 <TIM_OC4_SetConfig+0xbc>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_OC4_SetConfig+0x80>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a17      	ldr	r2, [pc, #92]	; (800a404 <TIM_OC4_SetConfig+0xc0>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_OC4_SetConfig+0x80>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a16      	ldr	r2, [pc, #88]	; (800a408 <TIM_OC4_SetConfig+0xc4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_OC4_SetConfig+0x80>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a15      	ldr	r2, [pc, #84]	; (800a40c <TIM_OC4_SetConfig+0xc8>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_OC4_SetConfig+0x80>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a14      	ldr	r2, [pc, #80]	; (800a410 <TIM_OC4_SetConfig+0xcc>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d109      	bne.n	800a3d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	019b      	lsls	r3, r3, #6
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	621a      	str	r2, [r3, #32]
}
 800a3f2:	bf00      	nop
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	40010000 	.word	0x40010000
 800a404:	40010400 	.word	0x40010400
 800a408:	40014000 	.word	0x40014000
 800a40c:	40014400 	.word	0x40014400
 800a410:	40014800 	.word	0x40014800

0800a414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	041b      	lsls	r3, r3, #16
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a17      	ldr	r2, [pc, #92]	; (800a4c4 <TIM_OC5_SetConfig+0xb0>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00f      	beq.n	800a48a <TIM_OC5_SetConfig+0x76>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a16      	ldr	r2, [pc, #88]	; (800a4c8 <TIM_OC5_SetConfig+0xb4>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00b      	beq.n	800a48a <TIM_OC5_SetConfig+0x76>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a15      	ldr	r2, [pc, #84]	; (800a4cc <TIM_OC5_SetConfig+0xb8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d007      	beq.n	800a48a <TIM_OC5_SetConfig+0x76>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a14      	ldr	r2, [pc, #80]	; (800a4d0 <TIM_OC5_SetConfig+0xbc>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d003      	beq.n	800a48a <TIM_OC5_SetConfig+0x76>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <TIM_OC5_SetConfig+0xc0>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d109      	bne.n	800a49e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	621a      	str	r2, [r3, #32]
}
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	40010000 	.word	0x40010000
 800a4c8:	40010400 	.word	0x40010400
 800a4cc:	40014000 	.word	0x40014000
 800a4d0:	40014400 	.word	0x40014400
 800a4d4:	40014800 	.word	0x40014800

0800a4d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	051b      	lsls	r3, r3, #20
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a18      	ldr	r2, [pc, #96]	; (800a58c <TIM_OC6_SetConfig+0xb4>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00f      	beq.n	800a550 <TIM_OC6_SetConfig+0x78>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a17      	ldr	r2, [pc, #92]	; (800a590 <TIM_OC6_SetConfig+0xb8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d00b      	beq.n	800a550 <TIM_OC6_SetConfig+0x78>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a16      	ldr	r2, [pc, #88]	; (800a594 <TIM_OC6_SetConfig+0xbc>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d007      	beq.n	800a550 <TIM_OC6_SetConfig+0x78>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <TIM_OC6_SetConfig+0xc0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d003      	beq.n	800a550 <TIM_OC6_SetConfig+0x78>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a14      	ldr	r2, [pc, #80]	; (800a59c <TIM_OC6_SetConfig+0xc4>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d109      	bne.n	800a564 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	029b      	lsls	r3, r3, #10
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40010000 	.word	0x40010000
 800a590:	40010400 	.word	0x40010400
 800a594:	40014000 	.word	0x40014000
 800a598:	40014400 	.word	0x40014400
 800a59c:	40014800 	.word	0x40014800

0800a5a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 031f 	and.w	r3, r3, #31
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1a      	ldr	r2, [r3, #32]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a1a      	ldr	r2, [r3, #32]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a600:	2302      	movs	r3, #2
 800a602:	e068      	b.n	800a6d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a2e      	ldr	r2, [pc, #184]	; (800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d004      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a2d      	ldr	r2, [pc, #180]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d108      	bne.n	800a64a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a63e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4313      	orrs	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a1e      	ldr	r2, [pc, #120]	; (800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d01d      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d018      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1b      	ldr	r2, [pc, #108]	; (800a6ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d013      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1a      	ldr	r2, [pc, #104]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00e      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d009      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a13      	ldr	r2, [pc, #76]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d004      	beq.n	800a6aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a14      	ldr	r2, [pc, #80]	; (800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	40000400 	.word	0x40000400
 800a6f0:	40000800 	.word	0x40000800
 800a6f4:	40000c00 	.word	0x40000c00
 800a6f8:	40001800 	.word	0x40001800

0800a6fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a714:	2302      	movs	r3, #2
 800a716:	e065      	b.n	800a7e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d004      	beq.n	800a7a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a14      	ldr	r2, [pc, #80]	; (800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d115      	bne.n	800a7d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	051b      	lsls	r3, r3, #20
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40010000 	.word	0x40010000
 800a7f4:	40010400 	.word	0x40010400

0800a7f8 <__cxa_pure_virtual>:
 800a7f8:	b508      	push	{r3, lr}
 800a7fa:	f000 f80d 	bl	800a818 <_ZSt9terminatev>

0800a7fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a7fe:	b508      	push	{r3, lr}
 800a800:	4780      	blx	r0
 800a802:	f000 fb8a 	bl	800af1a <abort>
	...

0800a808 <_ZSt13get_terminatev>:
 800a808:	4b02      	ldr	r3, [pc, #8]	; (800a814 <_ZSt13get_terminatev+0xc>)
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	f3bf 8f5b 	dmb	ish
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	24000014 	.word	0x24000014

0800a818 <_ZSt9terminatev>:
 800a818:	b508      	push	{r3, lr}
 800a81a:	f7ff fff5 	bl	800a808 <_ZSt13get_terminatev>
 800a81e:	f7ff ffee 	bl	800a7fe <_ZN10__cxxabiv111__terminateEPFvvE>
 800a822:	0000      	movs	r0, r0
 800a824:	0000      	movs	r0, r0
	...

0800a828 <floor>:
 800a828:	ee10 1a90 	vmov	r1, s1
 800a82c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a830:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a834:	2b13      	cmp	r3, #19
 800a836:	b530      	push	{r4, r5, lr}
 800a838:	ee10 0a10 	vmov	r0, s0
 800a83c:	ee10 5a10 	vmov	r5, s0
 800a840:	dc31      	bgt.n	800a8a6 <floor+0x7e>
 800a842:	2b00      	cmp	r3, #0
 800a844:	da15      	bge.n	800a872 <floor+0x4a>
 800a846:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a900 <floor+0xd8>
 800a84a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a84e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a856:	dd07      	ble.n	800a868 <floor+0x40>
 800a858:	2900      	cmp	r1, #0
 800a85a:	da4e      	bge.n	800a8fa <floor+0xd2>
 800a85c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a860:	4318      	orrs	r0, r3
 800a862:	d001      	beq.n	800a868 <floor+0x40>
 800a864:	4928      	ldr	r1, [pc, #160]	; (800a908 <floor+0xe0>)
 800a866:	2000      	movs	r0, #0
 800a868:	460b      	mov	r3, r1
 800a86a:	4602      	mov	r2, r0
 800a86c:	ec43 2b10 	vmov	d0, r2, r3
 800a870:	e020      	b.n	800a8b4 <floor+0x8c>
 800a872:	4a26      	ldr	r2, [pc, #152]	; (800a90c <floor+0xe4>)
 800a874:	411a      	asrs	r2, r3
 800a876:	ea01 0402 	and.w	r4, r1, r2
 800a87a:	4304      	orrs	r4, r0
 800a87c:	d01a      	beq.n	800a8b4 <floor+0x8c>
 800a87e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a900 <floor+0xd8>
 800a882:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a886:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88e:	ddeb      	ble.n	800a868 <floor+0x40>
 800a890:	2900      	cmp	r1, #0
 800a892:	bfbe      	ittt	lt
 800a894:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a898:	fa40 f303 	asrlt.w	r3, r0, r3
 800a89c:	18c9      	addlt	r1, r1, r3
 800a89e:	ea21 0102 	bic.w	r1, r1, r2
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e7e0      	b.n	800a868 <floor+0x40>
 800a8a6:	2b33      	cmp	r3, #51	; 0x33
 800a8a8:	dd05      	ble.n	800a8b6 <floor+0x8e>
 800a8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ae:	d101      	bne.n	800a8b4 <floor+0x8c>
 800a8b0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a8b4:	bd30      	pop	{r4, r5, pc}
 800a8b6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a8be:	40e2      	lsrs	r2, r4
 800a8c0:	4202      	tst	r2, r0
 800a8c2:	d0f7      	beq.n	800a8b4 <floor+0x8c>
 800a8c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a900 <floor+0xd8>
 800a8c8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a8cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d4:	ddc8      	ble.n	800a868 <floor+0x40>
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	da02      	bge.n	800a8e0 <floor+0xb8>
 800a8da:	2b14      	cmp	r3, #20
 800a8dc:	d103      	bne.n	800a8e6 <floor+0xbe>
 800a8de:	3101      	adds	r1, #1
 800a8e0:	ea20 0002 	bic.w	r0, r0, r2
 800a8e4:	e7c0      	b.n	800a868 <floor+0x40>
 800a8e6:	2401      	movs	r4, #1
 800a8e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a8ec:	fa04 f303 	lsl.w	r3, r4, r3
 800a8f0:	4418      	add	r0, r3
 800a8f2:	42a8      	cmp	r0, r5
 800a8f4:	bf38      	it	cc
 800a8f6:	1909      	addcc	r1, r1, r4
 800a8f8:	e7f2      	b.n	800a8e0 <floor+0xb8>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	e7b3      	b.n	800a868 <floor+0x40>
 800a900:	8800759c 	.word	0x8800759c
 800a904:	7e37e43c 	.word	0x7e37e43c
 800a908:	bff00000 	.word	0xbff00000
 800a90c:	000fffff 	.word	0x000fffff

0800a910 <round>:
 800a910:	ee10 1a90 	vmov	r1, s1
 800a914:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800a918:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800a91c:	2a13      	cmp	r2, #19
 800a91e:	b510      	push	{r4, lr}
 800a920:	ee10 3a10 	vmov	r3, s0
 800a924:	dc19      	bgt.n	800a95a <round+0x4a>
 800a926:	2a00      	cmp	r2, #0
 800a928:	da09      	bge.n	800a93e <round+0x2e>
 800a92a:	3201      	adds	r2, #1
 800a92c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a930:	d103      	bne.n	800a93a <round+0x2a>
 800a932:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a936:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a93a:	2000      	movs	r0, #0
 800a93c:	e027      	b.n	800a98e <round+0x7e>
 800a93e:	4816      	ldr	r0, [pc, #88]	; (800a998 <round+0x88>)
 800a940:	4110      	asrs	r0, r2
 800a942:	ea01 0400 	and.w	r4, r1, r0
 800a946:	4323      	orrs	r3, r4
 800a948:	d00e      	beq.n	800a968 <round+0x58>
 800a94a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a94e:	fa43 f202 	asr.w	r2, r3, r2
 800a952:	4411      	add	r1, r2
 800a954:	ea21 0100 	bic.w	r1, r1, r0
 800a958:	e7ef      	b.n	800a93a <round+0x2a>
 800a95a:	2a33      	cmp	r2, #51	; 0x33
 800a95c:	dd05      	ble.n	800a96a <round+0x5a>
 800a95e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a962:	d101      	bne.n	800a968 <round+0x58>
 800a964:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295
 800a972:	fa20 f404 	lsr.w	r4, r0, r4
 800a976:	4223      	tst	r3, r4
 800a978:	d0f6      	beq.n	800a968 <round+0x58>
 800a97a:	2001      	movs	r0, #1
 800a97c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800a980:	fa00 f202 	lsl.w	r2, r0, r2
 800a984:	189b      	adds	r3, r3, r2
 800a986:	bf28      	it	cs
 800a988:	1809      	addcs	r1, r1, r0
 800a98a:	ea23 0004 	bic.w	r0, r3, r4
 800a98e:	460b      	mov	r3, r1
 800a990:	4602      	mov	r2, r0
 800a992:	ec43 2b10 	vmov	d0, r2, r3
 800a996:	e7e7      	b.n	800a968 <round+0x58>
 800a998:	000fffff 	.word	0x000fffff
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <fmod>:
 800a9a0:	b508      	push	{r3, lr}
 800a9a2:	ed2d 8b04 	vpush	{d8-d9}
 800a9a6:	eeb0 9b40 	vmov.f64	d9, d0
 800a9aa:	eeb0 8b41 	vmov.f64	d8, d1
 800a9ae:	f000 f827 	bl	800aa00 <__ieee754_fmod>
 800a9b2:	4b11      	ldr	r3, [pc, #68]	; (800a9f8 <fmod+0x58>)
 800a9b4:	f993 3000 	ldrsb.w	r3, [r3]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	d016      	beq.n	800a9ea <fmod+0x4a>
 800a9bc:	eeb4 8b48 	vcmp.f64	d8, d8
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	d611      	bvs.n	800a9ea <fmod+0x4a>
 800a9c6:	eeb4 9b49 	vcmp.f64	d9, d9
 800a9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ce:	d60c      	bvs.n	800a9ea <fmod+0x4a>
 800a9d0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800a9f0 <fmod+0x50>
 800a9d4:	eeb4 8b49 	vcmp.f64	d8, d9
 800a9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9dc:	d105      	bne.n	800a9ea <fmod+0x4a>
 800a9de:	f000 faa3 	bl	800af28 <__errno>
 800a9e2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a9e6:	2321      	movs	r3, #33	; 0x21
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	ecbd 8b04 	vpop	{d8-d9}
 800a9ee:	bd08      	pop	{r3, pc}
	...
 800a9f8:	24000018 	.word	0x24000018

0800a9fc <atan2f>:
 800a9fc:	f000 b914 	b.w	800ac28 <__ieee754_atan2f>

0800aa00 <__ieee754_fmod>:
 800aa00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	ed8d 1b00 	vstr	d1, [sp]
 800aa08:	e9dd 6500 	ldrd	r6, r5, [sp]
 800aa0c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800aa10:	ea57 0306 	orrs.w	r3, r7, r6
 800aa14:	46b4      	mov	ip, r6
 800aa16:	d00e      	beq.n	800aa36 <__ieee754_fmod+0x36>
 800aa18:	ee10 9a90 	vmov	r9, s1
 800aa1c:	4a7c      	ldr	r2, [pc, #496]	; (800ac10 <__ieee754_fmod+0x210>)
 800aa1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa22:	4293      	cmp	r3, r2
 800aa24:	dc07      	bgt.n	800aa36 <__ieee754_fmod+0x36>
 800aa26:	4272      	negs	r2, r6
 800aa28:	497a      	ldr	r1, [pc, #488]	; (800ac14 <__ieee754_fmod+0x214>)
 800aa2a:	4332      	orrs	r2, r6
 800aa2c:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 800aa30:	428a      	cmp	r2, r1
 800aa32:	460a      	mov	r2, r1
 800aa34:	d908      	bls.n	800aa48 <__ieee754_fmod+0x48>
 800aa36:	ed9d 7b00 	vldr	d7, [sp]
 800aa3a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800aa3e:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800aa42:	b003      	add	sp, #12
 800aa44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa48:	42bb      	cmp	r3, r7
 800aa4a:	ee10 ea10 	vmov	lr, s0
 800aa4e:	ee10 1a10 	vmov	r1, s0
 800aa52:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 800aa56:	dc0a      	bgt.n	800aa6e <__ieee754_fmod+0x6e>
 800aa58:	dbf3      	blt.n	800aa42 <__ieee754_fmod+0x42>
 800aa5a:	45b6      	cmp	lr, r6
 800aa5c:	d3f1      	bcc.n	800aa42 <__ieee754_fmod+0x42>
 800aa5e:	d106      	bne.n	800aa6e <__ieee754_fmod+0x6e>
 800aa60:	4a6d      	ldr	r2, [pc, #436]	; (800ac18 <__ieee754_fmod+0x218>)
 800aa62:	0fe4      	lsrs	r4, r4, #31
 800aa64:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800aa68:	ed94 0b00 	vldr	d0, [r4]
 800aa6c:	e7e9      	b.n	800aa42 <__ieee754_fmod+0x42>
 800aa6e:	ea19 0f02 	tst.w	r9, r2
 800aa72:	d14d      	bne.n	800ab10 <__ieee754_fmod+0x110>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d144      	bne.n	800ab02 <__ieee754_fmod+0x102>
 800aa78:	4868      	ldr	r0, [pc, #416]	; (800ac1c <__ieee754_fmod+0x21c>)
 800aa7a:	4672      	mov	r2, lr
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	dc3d      	bgt.n	800aafc <__ieee754_fmod+0xfc>
 800aa80:	4a64      	ldr	r2, [pc, #400]	; (800ac14 <__ieee754_fmod+0x214>)
 800aa82:	402a      	ands	r2, r5
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	d155      	bne.n	800ab34 <__ieee754_fmod+0x134>
 800aa88:	2f00      	cmp	r7, #0
 800aa8a:	d149      	bne.n	800ab20 <__ieee754_fmod+0x120>
 800aa8c:	46b0      	mov	r8, r6
 800aa8e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800aa92:	f1b8 0f00 	cmp.w	r8, #0
 800aa96:	dc3f      	bgt.n	800ab18 <__ieee754_fmod+0x118>
 800aa98:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800ac20 <__ieee754_fmod+0x220>
 800aa9c:	4540      	cmp	r0, r8
 800aa9e:	db4d      	blt.n	800ab3c <__ieee754_fmod+0x13c>
 800aaa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaa8:	f8df e174 	ldr.w	lr, [pc, #372]	; 800ac20 <__ieee754_fmod+0x220>
 800aaac:	4572      	cmp	r2, lr
 800aaae:	db59      	blt.n	800ab64 <__ieee754_fmod+0x164>
 800aab0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800aab4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800aab8:	1a80      	subs	r0, r0, r2
 800aaba:	1b5e      	subs	r6, r3, r5
 800aabc:	eba1 070c 	sub.w	r7, r1, ip
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d165      	bne.n	800ab90 <__ieee754_fmod+0x190>
 800aac4:	4561      	cmp	r1, ip
 800aac6:	bf38      	it	cc
 800aac8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800aacc:	2e00      	cmp	r6, #0
 800aace:	bfa4      	itt	ge
 800aad0:	4639      	movge	r1, r7
 800aad2:	4633      	movge	r3, r6
 800aad4:	ea53 0001 	orrs.w	r0, r3, r1
 800aad8:	d0c2      	beq.n	800aa60 <__ieee754_fmod+0x60>
 800aada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aade:	db6c      	blt.n	800abba <__ieee754_fmod+0x1ba>
 800aae0:	484f      	ldr	r0, [pc, #316]	; (800ac20 <__ieee754_fmod+0x220>)
 800aae2:	4282      	cmp	r2, r0
 800aae4:	db6f      	blt.n	800abc6 <__ieee754_fmod+0x1c6>
 800aae6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aaea:	4323      	orrs	r3, r4
 800aaec:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800aaf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	ec45 4b10 	vmov	d0, r4, r5
 800aafa:	e7a2      	b.n	800aa42 <__ieee754_fmod+0x42>
 800aafc:	3801      	subs	r0, #1
 800aafe:	0052      	lsls	r2, r2, #1
 800ab00:	e7bc      	b.n	800aa7c <__ieee754_fmod+0x7c>
 800ab02:	4847      	ldr	r0, [pc, #284]	; (800ac20 <__ieee754_fmod+0x220>)
 800ab04:	02da      	lsls	r2, r3, #11
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	ddba      	ble.n	800aa80 <__ieee754_fmod+0x80>
 800ab0a:	3801      	subs	r0, #1
 800ab0c:	0052      	lsls	r2, r2, #1
 800ab0e:	e7fa      	b.n	800ab06 <__ieee754_fmod+0x106>
 800ab10:	1518      	asrs	r0, r3, #20
 800ab12:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800ab16:	e7b3      	b.n	800aa80 <__ieee754_fmod+0x80>
 800ab18:	3a01      	subs	r2, #1
 800ab1a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ab1e:	e7b8      	b.n	800aa92 <__ieee754_fmod+0x92>
 800ab20:	4a3f      	ldr	r2, [pc, #252]	; (800ac20 <__ieee754_fmod+0x220>)
 800ab22:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 800ab26:	f1b8 0f00 	cmp.w	r8, #0
 800ab2a:	ddb5      	ble.n	800aa98 <__ieee754_fmod+0x98>
 800ab2c:	3a01      	subs	r2, #1
 800ab2e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ab32:	e7f8      	b.n	800ab26 <__ieee754_fmod+0x126>
 800ab34:	153a      	asrs	r2, r7, #20
 800ab36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab3a:	e7ad      	b.n	800aa98 <__ieee754_fmod+0x98>
 800ab3c:	eba8 0100 	sub.w	r1, r8, r0
 800ab40:	291f      	cmp	r1, #31
 800ab42:	dc09      	bgt.n	800ab58 <__ieee754_fmod+0x158>
 800ab44:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 800ab48:	408b      	lsls	r3, r1
 800ab4a:	fa2e f808 	lsr.w	r8, lr, r8
 800ab4e:	ea48 0303 	orr.w	r3, r8, r3
 800ab52:	fa0e f101 	lsl.w	r1, lr, r1
 800ab56:	e7a7      	b.n	800aaa8 <__ieee754_fmod+0xa8>
 800ab58:	4b32      	ldr	r3, [pc, #200]	; (800ac24 <__ieee754_fmod+0x224>)
 800ab5a:	1a1b      	subs	r3, r3, r0
 800ab5c:	fa0e f303 	lsl.w	r3, lr, r3
 800ab60:	2100      	movs	r1, #0
 800ab62:	e7a1      	b.n	800aaa8 <__ieee754_fmod+0xa8>
 800ab64:	ebae 0c02 	sub.w	ip, lr, r2
 800ab68:	f1bc 0f1f 	cmp.w	ip, #31
 800ab6c:	dc09      	bgt.n	800ab82 <__ieee754_fmod+0x182>
 800ab6e:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800ab72:	fa07 f70c 	lsl.w	r7, r7, ip
 800ab76:	fa26 f505 	lsr.w	r5, r6, r5
 800ab7a:	433d      	orrs	r5, r7
 800ab7c:	fa06 fc0c 	lsl.w	ip, r6, ip
 800ab80:	e79a      	b.n	800aab8 <__ieee754_fmod+0xb8>
 800ab82:	4d28      	ldr	r5, [pc, #160]	; (800ac24 <__ieee754_fmod+0x224>)
 800ab84:	1aad      	subs	r5, r5, r2
 800ab86:	fa06 f505 	lsl.w	r5, r6, r5
 800ab8a:	f04f 0c00 	mov.w	ip, #0
 800ab8e:	e793      	b.n	800aab8 <__ieee754_fmod+0xb8>
 800ab90:	4561      	cmp	r1, ip
 800ab92:	bf38      	it	cc
 800ab94:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	da05      	bge.n	800aba8 <__ieee754_fmod+0x1a8>
 800ab9c:	0fce      	lsrs	r6, r1, #31
 800ab9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800aba2:	0049      	lsls	r1, r1, #1
 800aba4:	3801      	subs	r0, #1
 800aba6:	e788      	b.n	800aaba <__ieee754_fmod+0xba>
 800aba8:	ea56 0307 	orrs.w	r3, r6, r7
 800abac:	f43f af58 	beq.w	800aa60 <__ieee754_fmod+0x60>
 800abb0:	0ffb      	lsrs	r3, r7, #31
 800abb2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800abb6:	0079      	lsls	r1, r7, #1
 800abb8:	e7f4      	b.n	800aba4 <__ieee754_fmod+0x1a4>
 800abba:	0fc8      	lsrs	r0, r1, #31
 800abbc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800abc0:	0049      	lsls	r1, r1, #1
 800abc2:	3a01      	subs	r2, #1
 800abc4:	e789      	b.n	800aada <__ieee754_fmod+0xda>
 800abc6:	1a80      	subs	r0, r0, r2
 800abc8:	2814      	cmp	r0, #20
 800abca:	dc0c      	bgt.n	800abe6 <__ieee754_fmod+0x1e6>
 800abcc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800abd0:	fa03 f202 	lsl.w	r2, r3, r2
 800abd4:	40c1      	lsrs	r1, r0
 800abd6:	430a      	orrs	r2, r1
 800abd8:	4103      	asrs	r3, r0
 800abda:	ea43 0104 	orr.w	r1, r3, r4
 800abde:	4610      	mov	r0, r2
 800abe0:	ec41 0b10 	vmov	d0, r0, r1
 800abe4:	e72d      	b.n	800aa42 <__ieee754_fmod+0x42>
 800abe6:	281f      	cmp	r0, #31
 800abe8:	dc07      	bgt.n	800abfa <__ieee754_fmod+0x1fa>
 800abea:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800abee:	40c1      	lsrs	r1, r0
 800abf0:	fa03 f202 	lsl.w	r2, r3, r2
 800abf4:	430a      	orrs	r2, r1
 800abf6:	4623      	mov	r3, r4
 800abf8:	e7ef      	b.n	800abda <__ieee754_fmod+0x1da>
 800abfa:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800abfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac02:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800ac06:	32e2      	adds	r2, #226	; 0xe2
 800ac08:	fa43 f202 	asr.w	r2, r3, r2
 800ac0c:	e7f3      	b.n	800abf6 <__ieee754_fmod+0x1f6>
 800ac0e:	bf00      	nop
 800ac10:	7fefffff 	.word	0x7fefffff
 800ac14:	7ff00000 	.word	0x7ff00000
 800ac18:	0800b468 	.word	0x0800b468
 800ac1c:	fffffbed 	.word	0xfffffbed
 800ac20:	fffffc02 	.word	0xfffffc02
 800ac24:	fffffbe2 	.word	0xfffffbe2

0800ac28 <__ieee754_atan2f>:
 800ac28:	ee10 2a90 	vmov	r2, s1
 800ac2c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ac30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac34:	b510      	push	{r4, lr}
 800ac36:	eef0 7a40 	vmov.f32	s15, s0
 800ac3a:	dc06      	bgt.n	800ac4a <__ieee754_atan2f+0x22>
 800ac3c:	ee10 0a10 	vmov	r0, s0
 800ac40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ac44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac48:	dd04      	ble.n	800ac54 <__ieee754_atan2f+0x2c>
 800ac4a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ac4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ac58:	d103      	bne.n	800ac62 <__ieee754_atan2f+0x3a>
 800ac5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac5e:	f000 b881 	b.w	800ad64 <atanf>
 800ac62:	1794      	asrs	r4, r2, #30
 800ac64:	f004 0402 	and.w	r4, r4, #2
 800ac68:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ac6c:	b93b      	cbnz	r3, 800ac7e <__ieee754_atan2f+0x56>
 800ac6e:	2c02      	cmp	r4, #2
 800ac70:	d05c      	beq.n	800ad2c <__ieee754_atan2f+0x104>
 800ac72:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ad40 <__ieee754_atan2f+0x118>
 800ac76:	2c03      	cmp	r4, #3
 800ac78:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800ac7c:	e7e7      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ac7e:	b939      	cbnz	r1, 800ac90 <__ieee754_atan2f+0x68>
 800ac80:	eddf 7a30 	vldr	s15, [pc, #192]	; 800ad44 <__ieee754_atan2f+0x11c>
 800ac84:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ad48 <__ieee754_atan2f+0x120>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	fe67 7a80 	vselge.f32	s15, s15, s0
 800ac8e:	e7de      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ac90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac94:	d110      	bne.n	800acb8 <__ieee754_atan2f+0x90>
 800ac96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac9a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac9e:	d107      	bne.n	800acb0 <__ieee754_atan2f+0x88>
 800aca0:	2c02      	cmp	r4, #2
 800aca2:	d846      	bhi.n	800ad32 <__ieee754_atan2f+0x10a>
 800aca4:	4b29      	ldr	r3, [pc, #164]	; (800ad4c <__ieee754_atan2f+0x124>)
 800aca6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acaa:	edd4 7a00 	vldr	s15, [r4]
 800acae:	e7ce      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800acb0:	2c02      	cmp	r4, #2
 800acb2:	d841      	bhi.n	800ad38 <__ieee754_atan2f+0x110>
 800acb4:	4b26      	ldr	r3, [pc, #152]	; (800ad50 <__ieee754_atan2f+0x128>)
 800acb6:	e7f6      	b.n	800aca6 <__ieee754_atan2f+0x7e>
 800acb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800acbc:	d0e0      	beq.n	800ac80 <__ieee754_atan2f+0x58>
 800acbe:	1a5b      	subs	r3, r3, r1
 800acc0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800acc4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800acc8:	da1a      	bge.n	800ad00 <__ieee754_atan2f+0xd8>
 800acca:	2a00      	cmp	r2, #0
 800accc:	da01      	bge.n	800acd2 <__ieee754_atan2f+0xaa>
 800acce:	313c      	adds	r1, #60	; 0x3c
 800acd0:	db19      	blt.n	800ad06 <__ieee754_atan2f+0xde>
 800acd2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800acd6:	f000 f919 	bl	800af0c <fabsf>
 800acda:	f000 f843 	bl	800ad64 <atanf>
 800acde:	eef0 7a40 	vmov.f32	s15, s0
 800ace2:	2c01      	cmp	r4, #1
 800ace4:	d012      	beq.n	800ad0c <__ieee754_atan2f+0xe4>
 800ace6:	2c02      	cmp	r4, #2
 800ace8:	d017      	beq.n	800ad1a <__ieee754_atan2f+0xf2>
 800acea:	2c00      	cmp	r4, #0
 800acec:	d0af      	beq.n	800ac4e <__ieee754_atan2f+0x26>
 800acee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ad54 <__ieee754_atan2f+0x12c>
 800acf2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800acf6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800ad58 <__ieee754_atan2f+0x130>
 800acfa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800acfe:	e7a6      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad00:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ad44 <__ieee754_atan2f+0x11c>
 800ad04:	e7ed      	b.n	800ace2 <__ieee754_atan2f+0xba>
 800ad06:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ad5c <__ieee754_atan2f+0x134>
 800ad0a:	e7ea      	b.n	800ace2 <__ieee754_atan2f+0xba>
 800ad0c:	ee17 3a90 	vmov	r3, s15
 800ad10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	e799      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad1a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ad54 <__ieee754_atan2f+0x12c>
 800ad1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ad22:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ad58 <__ieee754_atan2f+0x130>
 800ad26:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ad2a:	e790      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad2c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ad58 <__ieee754_atan2f+0x130>
 800ad30:	e78d      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad32:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800ad60 <__ieee754_atan2f+0x138>
 800ad36:	e78a      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad38:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ad5c <__ieee754_atan2f+0x134>
 800ad3c:	e787      	b.n	800ac4e <__ieee754_atan2f+0x26>
 800ad3e:	bf00      	nop
 800ad40:	c0490fdb 	.word	0xc0490fdb
 800ad44:	3fc90fdb 	.word	0x3fc90fdb
 800ad48:	bfc90fdb 	.word	0xbfc90fdb
 800ad4c:	0800b478 	.word	0x0800b478
 800ad50:	0800b484 	.word	0x0800b484
 800ad54:	33bbbd2e 	.word	0x33bbbd2e
 800ad58:	40490fdb 	.word	0x40490fdb
 800ad5c:	00000000 	.word	0x00000000
 800ad60:	3f490fdb 	.word	0x3f490fdb

0800ad64 <atanf>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	ee10 5a10 	vmov	r5, s0
 800ad6a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ad6e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ad72:	eef0 7a40 	vmov.f32	s15, s0
 800ad76:	db0f      	blt.n	800ad98 <atanf+0x34>
 800ad78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ad7c:	dd04      	ble.n	800ad88 <atanf+0x24>
 800ad7e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ad82:	eeb0 0a67 	vmov.f32	s0, s15
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800aec0 <atanf+0x15c>
 800ad8c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800aec4 <atanf+0x160>
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800ad96:	e7f4      	b.n	800ad82 <atanf+0x1e>
 800ad98:	4b4b      	ldr	r3, [pc, #300]	; (800aec8 <atanf+0x164>)
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	dc10      	bgt.n	800adc0 <atanf+0x5c>
 800ad9e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ada2:	da0a      	bge.n	800adba <atanf+0x56>
 800ada4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800aecc <atanf+0x168>
 800ada8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800adac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800adb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb8:	dce3      	bgt.n	800ad82 <atanf+0x1e>
 800adba:	f04f 33ff 	mov.w	r3, #4294967295
 800adbe:	e013      	b.n	800ade8 <atanf+0x84>
 800adc0:	f000 f8a4 	bl	800af0c <fabsf>
 800adc4:	4b42      	ldr	r3, [pc, #264]	; (800aed0 <atanf+0x16c>)
 800adc6:	429c      	cmp	r4, r3
 800adc8:	dc4f      	bgt.n	800ae6a <atanf+0x106>
 800adca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800adce:	429c      	cmp	r4, r3
 800add0:	dc41      	bgt.n	800ae56 <atanf+0xf2>
 800add2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800add6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800adda:	eea0 7a27 	vfma.f32	s14, s0, s15
 800adde:	2300      	movs	r3, #0
 800ade0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ade4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800adee:	eddf 5a39 	vldr	s11, [pc, #228]	; 800aed4 <atanf+0x170>
 800adf2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800aed8 <atanf+0x174>
 800adf6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800aedc <atanf+0x178>
 800adfa:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800aee0 <atanf+0x17c>
 800adfe:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ae02:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ae06:	eddf 5a37 	vldr	s11, [pc, #220]	; 800aee4 <atanf+0x180>
 800ae0a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ae0e:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800aee8 <atanf+0x184>
 800ae12:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ae16:	eddf 5a35 	vldr	s11, [pc, #212]	; 800aeec <atanf+0x188>
 800ae1a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ae1e:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800aef0 <atanf+0x18c>
 800ae22:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ae26:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aef4 <atanf+0x190>
 800ae2a:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ae2e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800aef8 <atanf+0x194>
 800ae32:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ae36:	eddf 5a31 	vldr	s11, [pc, #196]	; 800aefc <atanf+0x198>
 800ae3a:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ae3e:	eea5 0a87 	vfma.f32	s0, s11, s14
 800ae42:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ae46:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ae4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae4e:	d121      	bne.n	800ae94 <atanf+0x130>
 800ae50:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ae54:	e795      	b.n	800ad82 <atanf+0x1e>
 800ae56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae5a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae62:	2301      	movs	r3, #1
 800ae64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae68:	e7be      	b.n	800ade8 <atanf+0x84>
 800ae6a:	4b25      	ldr	r3, [pc, #148]	; (800af00 <atanf+0x19c>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	dc0b      	bgt.n	800ae88 <atanf+0x124>
 800ae70:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ae74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae78:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ae82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae86:	e7af      	b.n	800ade8 <atanf+0x84>
 800ae88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae90:	2303      	movs	r3, #3
 800ae92:	e7a9      	b.n	800ade8 <atanf+0x84>
 800ae94:	4a1b      	ldr	r2, [pc, #108]	; (800af04 <atanf+0x1a0>)
 800ae96:	491c      	ldr	r1, [pc, #112]	; (800af08 <atanf+0x1a4>)
 800ae98:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae9c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aea0:	ed93 7a00 	vldr	s14, [r3]
 800aea4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aeae:	ed92 0a00 	vldr	s0, [r2]
 800aeb2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aeb6:	bfb8      	it	lt
 800aeb8:	eef1 7a67 	vneglt.f32	s15, s15
 800aebc:	e761      	b.n	800ad82 <atanf+0x1e>
 800aebe:	bf00      	nop
 800aec0:	3fc90fdb 	.word	0x3fc90fdb
 800aec4:	bfc90fdb 	.word	0xbfc90fdb
 800aec8:	3edfffff 	.word	0x3edfffff
 800aecc:	7149f2ca 	.word	0x7149f2ca
 800aed0:	3f97ffff 	.word	0x3f97ffff
 800aed4:	3c8569d7 	.word	0x3c8569d7
 800aed8:	3d4bda59 	.word	0x3d4bda59
 800aedc:	bd15a221 	.word	0xbd15a221
 800aee0:	be4ccccd 	.word	0xbe4ccccd
 800aee4:	3d886b35 	.word	0x3d886b35
 800aee8:	3dba2e6e 	.word	0x3dba2e6e
 800aeec:	3e124925 	.word	0x3e124925
 800aef0:	3eaaaaab 	.word	0x3eaaaaab
 800aef4:	bd6ef16b 	.word	0xbd6ef16b
 800aef8:	bd9d8795 	.word	0xbd9d8795
 800aefc:	bde38e38 	.word	0xbde38e38
 800af00:	401bffff 	.word	0x401bffff
 800af04:	0800b490 	.word	0x0800b490
 800af08:	0800b4a0 	.word	0x0800b4a0

0800af0c <fabsf>:
 800af0c:	ee10 3a10 	vmov	r3, s0
 800af10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af14:	ee00 3a10 	vmov	s0, r3
 800af18:	4770      	bx	lr

0800af1a <abort>:
 800af1a:	b508      	push	{r3, lr}
 800af1c:	2006      	movs	r0, #6
 800af1e:	f000 f85d 	bl	800afdc <raise>
 800af22:	2001      	movs	r0, #1
 800af24:	f7f7 fc8b 	bl	800283e <_exit>

0800af28 <__errno>:
 800af28:	4b01      	ldr	r3, [pc, #4]	; (800af30 <__errno+0x8>)
 800af2a:	6818      	ldr	r0, [r3, #0]
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	2400001c 	.word	0x2400001c

0800af34 <__libc_init_array>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	4d0d      	ldr	r5, [pc, #52]	; (800af6c <__libc_init_array+0x38>)
 800af38:	4c0d      	ldr	r4, [pc, #52]	; (800af70 <__libc_init_array+0x3c>)
 800af3a:	1b64      	subs	r4, r4, r5
 800af3c:	10a4      	asrs	r4, r4, #2
 800af3e:	2600      	movs	r6, #0
 800af40:	42a6      	cmp	r6, r4
 800af42:	d109      	bne.n	800af58 <__libc_init_array+0x24>
 800af44:	4d0b      	ldr	r5, [pc, #44]	; (800af74 <__libc_init_array+0x40>)
 800af46:	4c0c      	ldr	r4, [pc, #48]	; (800af78 <__libc_init_array+0x44>)
 800af48:	f000 f864 	bl	800b014 <_init>
 800af4c:	1b64      	subs	r4, r4, r5
 800af4e:	10a4      	asrs	r4, r4, #2
 800af50:	2600      	movs	r6, #0
 800af52:	42a6      	cmp	r6, r4
 800af54:	d105      	bne.n	800af62 <__libc_init_array+0x2e>
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5c:	4798      	blx	r3
 800af5e:	3601      	adds	r6, #1
 800af60:	e7ee      	b.n	800af40 <__libc_init_array+0xc>
 800af62:	f855 3b04 	ldr.w	r3, [r5], #4
 800af66:	4798      	blx	r3
 800af68:	3601      	adds	r6, #1
 800af6a:	e7f2      	b.n	800af52 <__libc_init_array+0x1e>
 800af6c:	0800b4b0 	.word	0x0800b4b0
 800af70:	0800b4b0 	.word	0x0800b4b0
 800af74:	0800b4b0 	.word	0x0800b4b0
 800af78:	0800b4b8 	.word	0x0800b4b8

0800af7c <memset>:
 800af7c:	4402      	add	r2, r0
 800af7e:	4603      	mov	r3, r0
 800af80:	4293      	cmp	r3, r2
 800af82:	d100      	bne.n	800af86 <memset+0xa>
 800af84:	4770      	bx	lr
 800af86:	f803 1b01 	strb.w	r1, [r3], #1
 800af8a:	e7f9      	b.n	800af80 <memset+0x4>

0800af8c <_raise_r>:
 800af8c:	291f      	cmp	r1, #31
 800af8e:	b538      	push	{r3, r4, r5, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	d904      	bls.n	800afa0 <_raise_r+0x14>
 800af96:	2316      	movs	r3, #22
 800af98:	6003      	str	r3, [r0, #0]
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afa2:	b112      	cbz	r2, 800afaa <_raise_r+0x1e>
 800afa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa8:	b94b      	cbnz	r3, 800afbe <_raise_r+0x32>
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 f830 	bl	800b010 <_getpid_r>
 800afb0:	462a      	mov	r2, r5
 800afb2:	4601      	mov	r1, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afba:	f000 b817 	b.w	800afec <_kill_r>
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d00a      	beq.n	800afd8 <_raise_r+0x4c>
 800afc2:	1c59      	adds	r1, r3, #1
 800afc4:	d103      	bne.n	800afce <_raise_r+0x42>
 800afc6:	2316      	movs	r3, #22
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	2001      	movs	r0, #1
 800afcc:	e7e7      	b.n	800af9e <_raise_r+0x12>
 800afce:	2400      	movs	r4, #0
 800afd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd4:	4628      	mov	r0, r5
 800afd6:	4798      	blx	r3
 800afd8:	2000      	movs	r0, #0
 800afda:	e7e0      	b.n	800af9e <_raise_r+0x12>

0800afdc <raise>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <raise+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f7ff bfd3 	b.w	800af8c <_raise_r>
 800afe6:	bf00      	nop
 800afe8:	2400001c 	.word	0x2400001c

0800afec <_kill_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_kill_r+0x20>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f7 fc10 	bl	800281e <_kill>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d102      	bne.n	800b008 <_kill_r+0x1c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	b103      	cbz	r3, 800b008 <_kill_r+0x1c>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	240003cc 	.word	0x240003cc

0800b010 <_getpid_r>:
 800b010:	f7f7 bbfd 	b.w	800280e <_getpid>

0800b014 <_init>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr

0800b020 <_fini>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr
