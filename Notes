Notes:
 //9th April, 2021:
 //TODO - here, align Iq - this may already be done with zero_angle, but should not this come before phase/driver alignment?
 //why index search doesn't work?
 //--seems like index search fails due to speed of index search set too high (20rad/s) causing
 //--motor not to be able to move to requested angle, before next position call was mad.
 //--either adding during index search while loop: BLDCMotor::absoluteZeroSearch()
 //--or decreasing "motor.velocity_index_search" to 0.1 fixes this problem.

 //Reset pulse counter to 0 on index detection? this would affect the velocity calculations
 //but resetting the pulse counter at some point is necessary otherwise counter will overflow.

 //* Implement anti-cogging - i.e. cogging compensation
 //* Check why "pulse_per_second" fluctuates between 999 and 1999 when motor spinning

 //10th April, 2021:
 /* working on the anti-cogging feature. Can't get the angle/foc_current control to work w/i the calibration loop
  * so tried to bring it out into the while(1) loop below, but can't get the motor to iterate through a set of
  * target angles here either - why? Is the _delay(2000) necessary? Why can't I set the motor.target value at
  * a lower rate then loopFOC and have motor.move() also running at a lower rate than loopFOC()?
  *
  */

 //16th April, 2021:
 /* Looking into the functions loopFOC() and move([target optional]) it seems that in velocity mode, they are
  * best run at the same freq. Within the move() function, in angle control mode both the velocity set point (based on error
  * between angle set point and measured angle) and current (based on error between new velocity set point and measured
  * velocity). However, it is probably best to have the current set point
  * set points are calculated within the same function. However, it is
  */

 //22nd April, 2021:
 /* Working on getting parity between Arduino and STM32 environments.
  * The 'natural' directions of spin were found to be different. Had to switch the assignment of encoder to GPIO pins in
  * main.h to get matching (CCW) estimates.
  * Next need to make sure that the zero-offset angle is calculated the same. Why/how can it be different?
  */

 //23rd April, 2021:
 /* Removed TIM4, now using TIM1CH4 for PWMA_Pin9 (which is actually pin D4). This is so that I don't need to synchronise
  * the timer channels. As all three PWM channels are now driven by the same clock, they should always be in sync.
  * Undid the switching of encoder pin assignment. The better way to achieve the same effect is to switch the pins the
  * three PWM signals are assigned - see function: _writeDutyCycle3PWM().
  * Am still not sure what PWM (1 or 2) mode is used, the code is not clear: https://github.com/simplefoc/Arduino-FOC/blob/40336919658f35790c96164dc37a6395fe8b4526/src/drivers/hardware_specific/stm32_mcu.cpp
  * Tried both PWM1 and PWM2, but neither lead to the same (as arduino) zero angle offset. In arduino I get 2.9877 radians, and
  * with this code for all possible combinations of a/b/c to U/V/W channels (and PWM1 or PWM2) I can't get the same offset angle.
  *
  * Also, need to look at correctly sampling the current from the phases. Maybe sampling many times quickly and smoothing out the
  * values, or integrating over a long(er) time...
  */


 //4th May, 2021:
 /* Currently code causes the motor to short circuit during enable where setPwm(0,0,0) - don't understand why.
  *
  */

 //6th May, 2021:
 /* The cause of motor short (noted above) is due to the fact that had moved the PWM signals for the motor phases
  * from D15/E11/E14 on STM board to E9/E11/E14 so that they could all be driven by the same clock. However, this
  * change also needed to include a hardware change - physically connecting pin E9 (arduino D4) to pin D15 (arduino D9).
  *
  * Okay, so motor calibrating, and finding zero-offset angle of 2.05 radians. Doesn't match with Arduino code.
  *
  * Motor also doesn't spin properly when motor.target = 1, which in Arduino causes a smooth spin. Will investigate
  * possible poor current estimates.
  *
  * Problem with current readings may be to do with the fact that the timing of readings is falling at different times within
  * the PWM signal causing various inaccurate readings. Need to trigger the ADC sampling every time a PWM pulse is triggered.
  * Tried to setup ADC to trigger on TIM1 counter overflow - added callback function, with LED toggle code to verify that this works.
  * Tomorrow need to debug, and get working.
  *
  */

 //7th May, 2021:
 /* Working on getting the current readings accurately - timed by the PWM freq. signal (TIMx_ARR).
  *
  */

 //10th May, 2021:
 /* fix current measurement calculations.
  * Why does motor 'click' and current steps high to low?
  */
  
  //20th May, 2021:
  Motor clicking and generally FOC (foc_current/dc_current) control not working because PID parameters for I/Q loops and current limits where set too high 
  for the low-resistance motor that I am using. 
 